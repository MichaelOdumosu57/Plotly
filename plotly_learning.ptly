intersted in table, sankey, parallel categories
buttons, sliders and lasso

ITS Best to refer to the files to see what you need

            .___                        .___                        .___                        .___
         |  [__]
         [__]  |                 |   [__]                      | [__]
        .___    .___
        .___    .___                .___    .___                .___    .___
      | [__]    [__]  |
      | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___
    .___            .___        .___            .___        .___            .___
 |  [__]            [__]
 |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___
.___                   .___.___                   .___ .___                   .___
[__]                   [__]
[__]                   [__][__]                   [__] [__]                   [__]



Plotly


Key


section
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]



            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Tips
            .___
            [__]
                 .___
                  [__]
      
      
      
Charts in plotly.js

            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]
            .___
            
            
basically this is what we need it shows more examples than anything else

so you need a div that exists in
Plotly.newPlot('myDiv', data);
with  'myDiv' as the id for it to work

file : line charts plotly meaning block


basic bar chart

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var data = [
  {
    x: ['giraffes', 'orangutans', 'monkeys'],
    y: [20, 14, 23],
    type: 'bar'
  }
];

Plotly.newPlot('myDiv', data);


grouped baar chart

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]

var trace1 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [20, 14, 23],
  name: 'SF Zoo',
  type: 'bar'
};

var trace2 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [12, 18, 29],
  name: 'LA Zoo',
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {barmode: 'group'};

Plotly.newPlot('myDiv', data, layout);


stacked bar chart


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var trace1 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [20, 14, 23],
  name: 'SF Zoo',
  type: 'bar'
};

var trace2 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [12, 18, 29],
  name: 'LA Zoo',
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {barmode: 'stack'};

Plotly.newPlot('myDiv', data, layout);



bar chart with hover text


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: ['Liam', 'Sophie', 'Jacob', 'Mia', 'William', 'Olivia'],
  y: [8.0, 8.0, 12.0, 12.0, 13.0, 20.0],
  type: 'bar',
  text: ['4.17 below the mean', '4.17 below the mean', '0.17 below the mean', '0.17 below the mean', '0.83 above the mean', '7.83 above the mean'],
  marker: {
    color: 'rgb(142,124,195)'
  }
};

var data = [trace1];

var layout = {
  title: 'Number of Graphs Made this Week',
  font:{
    family: 'Raleway, sans-serif'
  },
  showlegend: false,
  xaxis: {
    tickangle: -45
  },
  yaxis: {
    zeroline: false,
    gridwidth: 2
  },
  bargap :0.05
};

Plotly.newPlot('myDiv5', data, layout);




bar chart with direct labels


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
var xValue = ['Product A', 'Product B', 'Product C'];

var yValue = [20, 14, 23];

var trace1 = {
  x: xValue,
  y: yValue,
  type: 'bar',
  text: yValue.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  marker: {
    color: 'rgb(158,202,225)',
    opacity: 0.6,
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var data = [trace1];

var layout = {
  title: 'January 2013 Sales Report'
};

Plotly.newPlot('myDiv', data, layout);


grourped bar chart with direct labels


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
var xValue = ['Product A', 'Product B', 'Product C'];

var yValue = [20, 14, 23];
var yValue2 = [24, 16, 20];

var trace1 = {
  x: xValue,
  y: yValue,
  type: 'bar',
  text: yValue.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  opacity: 0.5,
  marker: {
    color: 'rgb(158,202,225)',
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var trace2 = {
  x: xValue,
  y: yValue2,
  type: 'bar',
  text: yValue2.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  marker: {
    color: 'rgba(58,200,225,.5)',
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var data = [trace1,trace2];

var layout = {
  title: 'January 2013 Sales Report'
};

Plotly.newPlot('myDiv', data, layout);



Bar Chart with Rotated Labels


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 var trace1 = {
  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  y: [20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],
  type: 'bar',
  name: 'Primary Product',
  marker: {
    color: 'rgb(49,130,189)',
    opacity: 0.7,
  }
};

var trace2 = {
  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  y: [19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],
  type: 'bar',
  name: 'Secondary Product',
  marker: {
    color: 'rgb(204,204,204)',
    opacity: 0.5
  }
};

var data = [trace1, trace2];

var layout = {
  title: '2013 Sales Report',
  xaxis: {
    tickangle: -45
  },
  barmode: 'group'
};

Plotly.newPlot('myDiv', data, layout);




Customizing Individual Bar Colors


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var trace1 = {
  x: ['Feature A', 'Feature B', 'Feature C', 'Feature D', 'Feature E'],
  y: [20, 14, 23, 25, 22],
  marker:{
    color: ['rgba(204,204,204,1)', 'rgba(222,45,38,0.8)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)']
  },
  type: 'bar'
};

var data = [trace1];

var layout = {
  title: 'Least Used Feature'
};

Plotly.newPlot('myDiv', data, layout);



Customizing Individual Bar Width


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var trace0 = {
  type: 'bar',
  x: [1, 2, 3, 5.5, 10],
  y: [10, 8, 6, 4, 2],
  width: [0.8, 0.8, 0.8, 3.5, 4]
}

var data = [trace0]

Plotly.plot('plotly-div', data);




Customizing Individual Bar Base


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 var data = [
  {
    type: 'bar',
    x: ['2016','2017','2018'],
    y: [500,600,700],
    base: [-500,-600,-700],
    marker: {
      color: 'red'
    },
    name: 'expenses'
  },
  {
    type: 'bar',
    x: ['2016','2017','2018'],
    y: [300,400,700],
    base: 0,
    marker: {
      color: 'blue'
    },
    name: 'revenue'
  }]

Plotly.newPlot('myDiv', data);


Colored and Styled Bar Chart


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 var trace1 = {
  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],
  y: [219, 146, 112, 127, 124, 180, 236, 207, 236, 263, 350, 430, 474, 526, 488, 537, 500, 439],
  name: 'Rest of world',
  marker: {color: 'rgb(55, 83, 109)'},
  type: 'bar'
};

var trace2 = {
  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],
  y: [16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270, 299, 340, 403, 549, 499],
  name: 'China',
  marker: {color: 'rgb(26, 118, 255)'},
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {
  title: 'US Export of Plastic Scrap',
  xaxis: {tickfont: {
      size: 14,
      color: 'rgb(107, 107, 107)'
    }},
  yaxis: {
    title: 'USD (millions)',
    titlefont: {
      size: 16,
      color: 'rgb(107, 107, 107)'
    },
    tickfont: {
      size: 14,
      color: 'rgb(107, 107, 107)'
    }
  },
  legend: {
    x: 0,
    y: 1.0,
    bgcolor: 'rgba(255, 255, 255, 0)',
    bordercolor: 'rgba(255, 255, 255, 0)'
  },
  barmode: 'group',
  bargap: 0.15,
  bargroupgap: 0.1
};

Plotly.newPlot('myDiv', data, layout);



Waterfall Bar Chart


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 // Base

var xData = ['Product&lt;br&gt;Revenue', 'Services&lt;br&gt;Revenue',
  'Total&lt;br&gt;Revenue', 'Fixed&lt;br&gt;Costs',
  'Variable&lt;br&gt;Costs', 'Total&lt;br&gt;Costs', 'Total'
];

var yData = [400, 660, 660, 590, 400, 400, 340];

var textList = ['$430K', '$260K', '$690K', '$-120K', '$-200K', '$-320K', '$370K'];

//Base

var trace1 = {
  x: xData,
  y: [0, 430, 0, 570, 370, 370, 0],
  marker: {
    color: 'rgba(1,1,1,0.0)'
  },
  type: 'bar'
};

//Revenue

var trace2 = {
  x: xData,
  y: [430, 260, 690, 0, 0, 0, 0],
  type: 'bar',
  marker: {
    color: 'rgba(55,128,191,0.7)',
    line: {
      color: 'rgba(55,128,191,1.0)',
      width: 2
    }
  }
};

//Cost

var trace3 = {
  x: xData,
  y: [0, 0, 0, 120, 200, 320, 0],
  type: 'bar',
  marker: {
    color: 'rgba(219, 64, 82, 0.7)',
    line: {
      color: 'rgba(219, 64, 82, 1.0)',
      width: 2
    }
  }
};

//Profit

var trace4 = {
  x: xData,
  y: [0, 0, 0, 0, 0, 0, 370],
  type: 'bar',
  marker: {
    color: 'rgba(50,171, 96, 0.7)',
    line: {
      color: 'rgba(50,171,96,1.0)',
      width: 2
    }
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Annual Profit 2015',
  barmode: 'stack',
  paper_bgcolor: 'rgba(245,246,249,1)',
  plot_bgcolor: 'rgba(245,246,249,1)',
  width: 600,
  height: 600,
  showlegend: false,
  annotations: []
};

for ( var i = 0 ; i &lt; 7 ; i++ ) {
  var result = {
    x: xData[i],
    y: yData[i],
    text: textList[i],
    font: {
      family: 'Arial',
      size: 14,
      color: 'rgba(245,246,249,1)'
    },
    showarrow: false
  };
  layout.annotations.push(result);
};

Plotly.newPlot('myDiv', data, layout);


Bar Chart with Relative Barmode


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [1, 4, 9, 16],
  name: 'Trace1',
  type: 'bar'
};
var trace2 = {
  x: [1, 2, 3, 4],
  y: [6, -8, -4.5, 8],
  name: 'Trace2',
  type: 'bar'
};
var trace3 = {
  x: [1, 2, 3, 4],
  y: [-15, -3, 4.5, -8],
  name: 'Trace3',
  type: 'bar'
 }

 var trace4 = {
  x: [1, 2, 3, 4],
  y: [-1, 3, -3, -4],
  name: 'Trace4',
  type: 'bar'
 }

var data = [trace1, trace2, trace3, trace4];
var layout = {
  xaxis: {title: 'X axis'},
  yaxis: {title: 'Y axis'},
  barmode: 'relative',
  title: 'Relative Barmode'
};

Plotly.newPlot('myDiv', data, layout);



Line charts
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]
            .___
            
            
Basic Line Plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [16, 5, 11, 9],
  type: 'scatter'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data);



Line and Scatter Plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers'
};

var data = [ trace1, trace2, trace3 ];

var layout = {
  title:'Line and Scatter Plot'
};

Plotly.newPlot('myDiv', data, layout);



Adding Names to Line and Scatter Plot


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  name: 'Scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  name: 'Lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  name: 'Scatter + Lines'
};

var data = [ trace1, trace2, trace3 ];

var layout = {
  title:'Adding Names to Line and Scatter Plot'
};

Plotly.newPlot('myDiv', data, layout);




Line and Scatter Styling


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  marker: {
    color: 'rgb(219, 64, 82)',
    size: 12
  }
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  line: {
    color: 'rgb(55, 128, 191)',
    width: 3
  }
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  marker: {
    color: 'rgb(128, 0, 128)',
    size: 8
  },
  line: {
    color: 'rgb(128, 0, 128)',
    width: 1
  }
};

var data = [trace1, trace2, trace3];

var layout = {
  title: 'Line and Scatter Styling'
};

Plotly.newPlot('myDiv', data, layout);



Styling Line Plot


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]

trace1 = {
  type: 'scatter',
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'lines',
  name: 'Red',
  line: {
    color: 'rgb(219, 64, 82)',
    width: 3
  }
};

trace2 = {
  type: 'scatter',
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines',
  name: 'Blue',
  line: {
    color: 'rgb(55, 128, 191)',
    width: 1
  }
};

var layout = {
  width: 500,
  height: 500
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data, layout);


Colored and Styled Scatter Plot


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]


var trace1 = {
  x: [52698, 43117],
  y: [53, 31],
  mode: 'markers',
  name: 'North America',
  text: ['United States', 'Canada'],
  marker: {
    color: 'rgb(164, 194, 244)',
    size: 12,
    line: {
      color: 'white',
      width: 0.5
    }
  },
  type: 'scatter'
};

var trace2 = {
  x: [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],
  y: [33, 20, 13, 19, 27, 19, 49, 44, 38],
  mode: 'markers',
  name: 'Europe',
  text: ['Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'],
  marker: {
    color: 'rgb(255, 217, 102)',
    size: 12
  },
  type: 'scatter'
};

var trace3 = {
  x: [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],
  y: [23, 42, 54, 89, 14, 99, 93, 70],
  mode: 'markers',
  name: 'Asia/Pacific',
  text: ['Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'],
  marker: {
    color: 'rgb(234, 153, 153)',
    size: 12
  },
  type: 'scatter'
};

var trace4 = {
  x: [19097, 18601, 15595, 13546, 12026, 7434, 5419],
  y: [43, 47, 56, 80, 86, 93, 80],
  mode: 'markers',
  name: 'Latin America',
  text: ['Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'],
  marker: {
    color: 'rgb(142, 124, 195)',
    size: 12
  },
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Quarter 1 Growth',
  xaxis: {
    title: 'GDP per Capita',
    showgrid: false,
    zeroline: false
  },
  yaxis: {
    title: 'Percent',
    showline: false
  }
};

Plotly.newPlot('myDiv', data, layout);



Line Shape Options for Interpolation

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 3, 2, 3, 1],
  mode: 'lines+markers',
  name: 'linear',
  line: {shape: 'linear'},
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4, 5],
  y: [6, 8, 7, 8, 6],
  mode: 'lines+markers',
  name: 'spline',
  text: ['tweak line smoothness&lt;br&gt;with "smoothing" in line object', 'tweak line smoothness&lt;br&gt;with "smoothing" in line object', 'tweak line smoothness&lt;br&gt;with "smoothing" in line object', 'tweak line smoothness&lt;br&gt;with "smoothing" in line object', 'tweak line smoothness&lt;br&gt;with "smoothing" in line object', 'tweak line smoothness&lt;br&gt;with "smoothing" in line object'],
  line: {shape: 'spline'},
  type: 'scatter'
};

var trace3 = {
  x: [1, 2, 3, 4, 5],
  y: [11, 13, 12, 13, 11],
  mode: 'lines+markers',
  name: 'vhv',
  line: {shape: 'vhv'},
  type: 'scatter'
};

var trace4 = {
  x: [1, 2, 3, 4, 5],
  y: [16, 18, 17, 18, 16],
  mode: 'lines+markers',
  name: 'hvh',
  line: {shape: 'hvh'},
  type: 'scatter'
};

var trace5 = {
  x: [1, 2, 3, 4, 5],
  y: [21, 23, 22, 23, 21],
  mode: 'lines+markers',
  name: 'vh',
  line: {shape: 'vh'},
  type: 'scatter'
};

var trace6 = {
  x: [1, 2, 3, 4, 5],
  y: [26, 28, 27, 28, 26],
  mode: 'lines+markers',
  name: 'hv',
  line: {shape: 'hv'},
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4, trace5, trace6];

var layout = {
  legend: {
    y: 0.5,
    traceorder: 'reversed',
    font: {size: 16},
    yref: 'paper'
  }};

Plotly.newPlot('myDiv6', data, layout);



Graph and Axes Titles


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  name: 'Scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  name: 'Lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  name: 'Scatter and Lines'
};

var data = [trace1, trace2, trace3];

var layout = {
  title: 'Title of the Graph',
  xaxis: {
    title: 'x-axis title'
  },
  yaxis: {
    title: 'y-axis title'
  }
};

Plotly.newPlot('myDiv', data, layout);



Line Dash


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 3, 2, 3, 1],
  mode: 'lines',
  name: 'Solid',
  line: {
    dash: 'solid',
    width: 4
  }
};

var trace2 = {
  x: [1, 2, 3, 4, 5],
  y: [6, 8, 7, 8, 6],
  mode: 'lines',
  name: 'dashdot',
  line: {
    dash: 'dashdot',
    width: 4
  }
};

var trace3 = {
  x: [1, 2, 3, 4, 5],
  y: [11, 13, 12, 13, 11],
  mode: 'lines',
  name: 'Solid',
  line: {
    dash: 'solid',
    width: 4
  }
};

var trace4 = {
  x: [1, 2, 3, 4, 5],
  y: [16, 18, 17, 18, 16],
  mode: 'lines',
  name: 'dot',
  line: {
    dash: 'dot',
    width: 4
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Line Dash',
  xaxis: {
    range: [0.75, 5.25],
    autorange: false
  },
  yaxis: {
    range: [0, 18.5],
    autorange: false
  },
  legend: {
    y: 0.5,
    traceorder: 'reversed',
    font: {
      size: 16
    }
  }
};

Plotly.newPlot('myDiv7', data, layout);


Connect Gaps Between Data

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


var trace1 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8],
  y: [10, 15, null, 17, 14, 12, 10, null, 15],
  mode: 'lines+markers',
  connectgaps: true
};

var trace2 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8],
  y: [16, null, 13, 10, 8, null, 11, 12],
  mode: 'lines',
  connectgaps: true
};

var data = [trace1, trace2];

var layout = {
  title: 'Connect the Gaps Between Data',
  showlegend: false
};

Plotly.newPlot('myDiv', data, layout);



Labelling Lines with Annotations

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var xData = [
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013]
];

var yData = [
  [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],
  [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],
  [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],
  [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23]
];

var colors = ['rgba(67,67,67,1)', 'rgba(115,115,115,1)', 'rgba(49,130,189, 1)',
  'rgba(189,189,189,1)'
];

var lineSize = [2, 2, 4, 2];

var labels = ['Television', 'Newspaper', 'Internet', 'Radio'];

var data = [];

for ( var i = 0 ; i < xData.length ; i++ ) {
  var result = {
    x: xData[i],
    y: yData[i],
    type: 'scatter',
    mode: 'lines',
    line: {
      color: colors[i],
      width: lineSize[i]
    }
  };
  var result2 = {
    x: [xData[i][0], xData[i][11]],
    y: [yData[i][0], yData[i][11]],
    type: 'scatter',
    mode: 'markers',
    marker: {
      color: colors[i],
      size: 12
    }
  };
  data.push(result, result2);
}

var layout = {
  showlegend: false,
  height: 600,
  width: 600,
  xaxis: {
    showline: true,
    showgrid: false,
    showticklabels: true,
    linecolor: 'rgb(204,204,204)',
    linewidth: 2,
    autotick: false,
    ticks: 'outside',
    tickcolor: 'rgb(204,204,204)',
    tickwidth: 2,
    ticklen: 5,
    tickfont: {
      family: 'Arial',
      size: 12,
      color: 'rgb(82, 82, 82)'
    }
  },
  yaxis: {
    showgrid: false,
    zeroline: false,
    showline: false,
    showticklabels: false
  },
  autosize: false,
  margin: {
    autoexpand: false,
    l: 100,
    r: 20,
    t: 100
  },
  annotations: [
    {
      xref: 'paper',
      yref: 'paper',
      x: 0.0,
      y: 1.05,
      xanchor: 'left',
      yanchor: 'bottom',
      text: 'Main Source for News',
      font:{
        family: 'Arial',
        size: 30,
        color: 'rgb(37,37,37)'
      },
      showarrow: false
    },
    {
      xref: 'paper',
      yref: 'paper',
      x: 0.5,
      y: -0.1,
      xanchor: 'center',
      yanchor: 'top',
      text: 'Source: Pew Research Center & Storytelling with data',
      showarrow: false,
      font: {
        family: 'Arial',
        size: 12,
        color: 'rgb(150,150,150)'
      }
    }
  ]
};

for( var i = 0 ; i < xData.length ; i++ ) {
  var result = {
    xref: 'paper',
    x: 0.05,
    y: yData[i][0],
    xanchor: 'right',
    yanchor: 'middle',
    text: labels[i] + ' ' + yData[i][0] +'%',
    showarrow: false,
    font: {
      family: 'Arial',
      size: 16,
      color: 'black'
    }
  };
  var result2 = {
    xref: 'paper',
    x: 0.95,
    y: yData[i][11],
    xanchor: 'left',
    yanchor: 'middle',
    text: yData[i][11] +'%',
    font: {
      family: 'Arial',
      size: 16,
      color: 'black'
    },
    showarrow: false
  };

  layout.annotations.push(result, result2);
}

Plotly.newPlot('myDiv9', data, layout);


pie charts

            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]



basic pie chart


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 

var data = [{
  values: [19, 26, 55],
  labels: ['Residential', 'Non-Residential', 'Utility'],
  type: 'pie'
}];

var layout = {
  height: 400,
  width: 500
};

Plotly.newPlot('myDiv', data, layout);



Pie Chart Subplots


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 In order to create pie chart subplots, you need to use the domain attribute
 
 
 var allLabels = ['1st', '2nd', '3rd', '4th', '5th'];

var allValues = [
  [38, 27, 18, 10, 7],
  [28, 26, 21, 15, 10],
  [38, 19, 16, 14, 13],
  [31, 24, 19, 18, 8]
];

var ultimateColors = [
  ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)', 'rgb(36, 55, 57)', 'rgb(6, 4, 4)'],
  ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)', 'rgb(129, 180, 179)', 'rgb(124, 103, 37)'],
  ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)', 'rgb(175, 49, 35)', 'rgb(36, 73, 147)'],
  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)', 'rgb(175, 51, 21)', 'rgb(35, 36, 21)']
];

var data = [{
  values: allValues[0],
  labels: allLabels,
  type: 'pie',
  name: 'Starry Night',
  marker: {
    colors: ultimateColors[0]
  },
  domain: {
    row: 0,
    column: 0
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[1],
  labels: allLabels,
  type: 'pie',
  name: 'Sunflowers',
  marker: {
    colors: ultimateColors[1]
  },
  domain: {
    row: 1,
    column: 0
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[2],
  labels: allLabels,
  type: 'pie',
  name: 'Irises',
  marker: {
    colors: ultimateColors[2]
  },
  domain: {
    row: 0,
    column: 1
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[3],
  labels: allLabels,
  type: 'pie',
  name: 'The Night Cafe',
  marker: {
    colors: ultimateColors[3]
  },
  domain: {
    x: [0.52,1],
    y: [0, 0.48]
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
}];

var layout = {
  height: 400,
  width: 500,
  grid: {rows: 2, columns: 2}
};

Plotly.newPlot('myDiv', data, layout);



scatter plots
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]




Line and Scatter Plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  type: 'scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  type: 'scatter'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  type: 'scatter'
};

var data = [trace1, trace2, trace3];

Plotly.newPlot('myDiv', data);




Data Labels Hover
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 6, 3, 6, 1],
  mode: 'markers',
  type: 'scatter',
  name: 'Team A',
  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],
  marker: { size: 12 }
};

var trace2 = {
  x: [1.5, 2.5, 3.5, 4.5, 5.5],
  y: [4, 1, 7, 1, 4],
  mode: 'markers',
  type: 'scatter',
  name: 'Team B',
  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],
  marker: { size: 12 }
};

var data = [ trace1, trace2 ];

var layout = {
  xaxis: {
    range: [ 0.75, 5.25 ]
  },
  yaxis: {
    range: [0, 8]
  },
  title:'Data Labels Hover'
};

Plotly.newPlot('myDiv', data, layout);
 
 
 
Data Labels on The Plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 6, 3, 6, 1],
  mode: 'markers+text',
  type: 'scatter',
  name: 'Team A',
  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],
  textposition: 'top center',
  textfont: {
    family:  'Raleway, sans-serif'
  },
  marker: { size: 12 }
};

var trace2 = {
  x: [1.5, 2.5, 3.5, 4.5, 5.5],
  y: [4, 1, 7, 1, 4],
  mode: 'markers+text',
  type: 'scatter',
  name: 'Team B',
  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],
  textfont : {
    family:'Times New Roman'
  },
  textposition: 'bottom center',
  marker: { size: 12 }
};

var data = [ trace1, trace2 ];

var layout = {
  xaxis: {
    range: [ 0.75, 5.25 ]
  },
  yaxis: {
    range: [0, 8]
  },
  legend: {
    y: 0.5,
    yref: 'paper',
    font: {
      family: 'Arial, sans-serif',
      size: 20,
      color: 'grey',
    }
  },
  title:'Data Labels on the Plot'
};

Plotly.newPlot('myDiv', data, layout);


 
Data Labels on The Plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
var trace1 = {
  y: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
  mode: 'markers',
  marker: {
    size: 400,
    color: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
  }
};

var data = [trace1];

var layout = {
  title: 'Scatter Plot with a Color Dimension'
};

Plotly.newPlot('myDiv', data, layout);
 



sample charts
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]
 
 
 
WebGL with 100,000 points
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 function gaussianRand() {
  var rand = 0;
  for (var i = 0; i < 6; i += 1) {
    rand += Math.random();
  }
  return (rand / 6)-0.5;
}

var X = [],
    Y = [],
    n = 100000,
    i;

for (i = 0; i < n; i += 1) {
  X.push(gaussianRand());
  Y.push(gaussianRand());
}

var data = [{
    type: "scattergl",
    mode: "markers",
    marker: {
        line: {
            width: 1,
            color: '#404040'}
    },
    x: X,
    y: Y
}]

Plotly.plot('graph', data)



WebGL with many traces
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
function gaussianRand() {
  var rand = 0;
  for (var i = 0; i < 6; i += 1) {
    rand += Math.random();
  }
  return (rand / 6)-0.5;
}


var start_value = 0,
     stop_value = 1,
     point_num = 5000,
     trace_num = 10;
var curr_value = start_value;
var step = (stop_value - start_value) / (point_num - 1);

var data = [];
for (var j = 0; j < trace_num; j++) {
    var X = [],
         Y = [];
    for (var i = 0; i < point_num; i++) {
        X.push(curr_value + (step * i));
        Y.push((gaussianRand()*8)+(j*5));
    }
    data.push({
        type: "scattergl",
        mode: "line",
        x: X,
        y: Y
    })
}
var layout = {showlegend: false}
Plotly.plot('graph', data = data, layout = layout)



Marker Size on Bubble Charts
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  mode: 'markers',
  marker: {
    size: [40, 60, 80, 100]
  }
};

var data = [trace1];

var layout = {
  title: 'Marker Size',
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);
 
 
Marker Size and Color on Bubble Charts

            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  mode: 'markers',
  marker: {
    color: ['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],
    opacity: [1, 0.8, 0.6, 0.4],
    size: [40, 60, 80, 100]
  }
};

var data = [trace1];

var layout = {
  title: 'Marker Size and Color',
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);
 
Bubble Size Scaling on Charts
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
// To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:
// sizeref = 2.0 * Math.max(...size) / (desired_maximum_marker_size**2)
// Note that setting 'sizeref' to a value greater than 1, decreases the rendered marker sizes, while setting 'sizeref' to less than 1, increases the rendered marker sizes. See https://plot.ly/python/reference/#scatter-marker-sizeref for more information. Additionally, we recommend setting the sizemode attribute: https://plot.ly/python/reference/#scatter-marker-sizemode to area.

var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  text: ['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    sizemode: 'area'
  }
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [14, 15, 16, 17],
  text: ['A</br>size: 40</br>sixeref: 0.2', 'B</br>size: 60</br>sixeref: 0.2', 'C</br>size: 80</br>sixeref: 0.2', 'D</br>size: 100</br>sixeref: 0.2'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    //setting 'sizeref' to lower than 1 decreases the rendered size
    sizeref: 2,
    sizemode: 'area'
  }
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [20, 21, 22, 23],
  text: ['A</br>size: 40</br>sixeref: 2', 'B</br>size: 60</br>sixeref: 2', 'C</br>size: 80</br>sixeref: 2', 'D</br>size: 100</br>sixeref: 2'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    //setting 'sizeref' to less than 1, increases the rendered marker sizes
    sizeref: 0.2,
    sizemode: 'area'
  }
};

// sizeref using above forumla
var desired_maximum_marker_size = 40;
var size = [400, 600, 800, 1000];
var trace4 = {
  x: [1, 2, 3, 4],
  y: [26, 27, 28, 29],
  text: ['A</br>size: 40</br>sixeref: 1.25', 'B</br>size: 60</br>sixeref: 1.25', 'C</br>size: 80</br>sixeref: 1.25', 'D</br>size: 100</br>sixeref: 1.25'],
  mode: 'markers',
  marker: {
    size: size,
    //set 'sizeref' to an 'ideal' size given by the formula sizeref = 2. * max(array_of_size_values) / (desired_maximum_marker_size ** 2)
    sizeref: 2.0 * Math.max(...size) / (desired_maximum_marker_size**2),
    sizemode: 'area'
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Bubble Chart Size Scaling',
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv6', data, layout);
 
Marker Size, Color, and Symbol as an Array
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

var trace1 = {
          x: [1, 2, 3, 4],
          y: [10, 11, 12, 13],
          mode: 'markers',
          marker: {
            color: ['hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'],
            size: [12, 22, 32, 42],
            opacity: [0.6, 0.7, 0.8, 0.9]
          },
          type: 'scatter'
        };
        
        var trace2 = {
          x: [1, 2, 3, 4],
          y: [11, 12, 13, 14],
          mode: 'markers',
          marker: {
            color: 'rgb(31, 119, 180)',
            size: 18,
            symbol: ['circle', 'square', 'diamond', 'cross']
          },
          type: 'scatter'
        };
        
        var trace3 = {
          x: [1, 2, 3, 4],
          y: [12, 13, 14, 15],
          mode: 'markers',
          marker: {
            size: 18,
            line: {
              color: ['rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'],
              width: [2, 2, 6, 2]
            }
          },
          type: 'scatter'
        };
        
        var data = [trace1, trace2, trace3];
        
        var layout = {showlegend: false};
        
        Plotly.newPlot('myDiv7', data, layout);
 
Cateogrical dot plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
       var country = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)', 'United States (2012)', 'Slovenia (2014)', 'Canada (2011)', 'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)'];
        
        var votingPop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6];
        
        var regVoters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9];
        
        var trace1 = {
          type: 'scatter',
          x: votingPop,
          y: country,
          mode: 'scatter',
          name: 'Percent of estimated voting age population',
          marker: {
            color: 'rgba(156, 165, 196, 0.95)',
            line: {
              color: 'rgba(156, 165, 196, 1.0)',
              width: 1,
            },
            symbol: 'circle',
            size: 16
          }
        };
        
        var trace2 = {
          x: regVoters,
          y: country,
          mode: 'scatter',
          name: 'Percent of estimated registered voters',
          marker: {
            color: 'rgba(204, 204, 204, 0.95)',
            line: {
              color: 'rgba(217, 217, 217, 1.0)',
              width: 1,
            },
            symbol: 'circle',
            size: 16
          }
        };
        
        var data = [trace1, trace2];
        
        var layout = {
          title: 'Votes cast for ten lowest voting age population in OECD countries',
          xaxis: {
            showgrid: false,
            showline: true,
            linecolor: 'rgb(102, 102, 102)',
            titlefont: {
              font: {
                color: 'rgb(204, 204, 204)'
              }
            },
            tickfont: {
              font: {
                color: 'rgb(102, 102, 102)'
              }
            },
            autotick: false,
            dtick: 10,
            ticks: 'outside',
            tickcolor: 'rgb(102, 102, 102)'
          },
          margin: {
            l: 140,
            r: 40,
            b: 50,
            t: 80
          },
          legend: {
            font: {
              size: 10,
            },
            yanchor: 'middle',
            xanchor: 'right'
          },
          width: 600,
          height: 600,
          paper_bgcolor: 'rgb(254, 247, 234)',
          plot_bgcolor: 'rgb(254, 247, 234)',
          hovermode: 'closest'
        };
        
        Plotly.newPlot('myDiv8', data, layout);
 
 
 
file chart.html
{
Filled Area Plots in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic Overlaid Area Chart
 
             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
        var trace1 = {
          x: [1, 2, 3, 4],
          y: [0, 2, 3, 5],
          fill: 'tozeroy',
          type: 'scatter'
        };
        
        var trace2 = {
          x: [1, 2, 3, 4],
          y: [3, 5, 1, 7],
          fill: 'tonexty',
          type: 'scatter'
        };
        
        var data = [trace1, trace2];
        
        Plotly.newPlot('myDiv9', data);
        
        
Overlaid Area Chart Without Boundary Lines
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var trace1 = {
  x: [1, 2, 3, 4],
  y: [0, 2, 3, 5],
  fill: 'tozeroy',
  type: 'scatter',
  mode: 'none'
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [3, 5, 1, 7],
  fill: 'tonexty',
  type: 'scatter',
  mode: 'none'
};

var layout = {
  title: 'Overlaid Chart Without Boundary Lines'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv10', data, layout);
      
Stacked Area Chart

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

var plotDiv = document.getElementById('plot');
var traces = [
	{x: [1,2,3], y: [2,1,4], stackgroup: 'one'},
	{x: [1,2,3], y: [1,1,2], stackgroup: 'one'},
	{x: [1,2,3], y: [3,0,2], stackgroup: 'one'}
];

Plotly.newPlot(plotDiv, traces, {title: 'stacked and filled line chart'});
      
      
Select Hover Points
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [
  {
    x: [0,0.5,1,1.5,2],
    y: [0,1,2,1,0],
    fill: 'toself',
    fillcolor: '#ab63fa',
    hoveron: 'points+fills',
    line: {
      color: '#ab63fa'
    },
    text: "Points + Fills",
    hoverinfo: 'text'
  },
  {
    x: [3,3.5,4,4.5,5],
    y: [0,1,2,1,0],
    fill: 'toself',
    fillcolor: '#e763fa',
    hoveron: 'points',
    line: {
      color: '#e763fa'
    },
    text: "Points only",
    hoverinfo: 'text'
  }]

var layout = {
  title: 'Hover on <i>points</i> or <i>fill</i>',
  xaxis: {
    range: [0,5]
  },
  yaxis: {
    range: [0,3]
  }
}

Plotly.plot('graph', data, layout)
      
 
Select Hover Points
            .___
            [__]
        .___    .___
      | [__]    [__]  |

 
 var data = [
  {
    x: [0,0.5,1,1.5,2],
    y: [0,1,2,1,0],
    fill: 'toself',
    fillcolor: '#ab63fa',
    hoveron: 'points+fills',
    line: {
      color: '#ab63fa'
    },
    text: "Points + Fills",
    hoverinfo: 'text'
  },
  {
    x: [3,3.5,4,4.5,5],
    y: [0,1,2,1,0],
    fill: 'toself',
    fillcolor: '#e763fa',
    hoveron: 'points',
    line: {
      color: '#e763fa'
    },
    text: "Points only",
    hoverinfo: 'text'
  }]

var layout = {
  title: 'Hover on <i>points</i> or <i>fill</i>',
  xaxis: {
    range: [0,5]
  },
  yaxis: {
    range: [0,3]
  }
}

Plotly.plot('graph', data, layout)
 
 
 
Horizontal Bar Charts in plotly.js

            .__
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Basic Horizontal Bar Chart
 
             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [{
  type: 'bar',
  x: [20, 14, 23],
  y: ['giraffes', 'orangutans', 'monkeys'],
  orientation: 'h'
}];

Plotly.newPlot('myDiv', data);



Colored Bar Chart


             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
        var trace1 = {
          x: [20, 14, 23],
          y: ['giraffes', 'orangutans', 'monkeys'],
          name: 'SF Zoo',
          orientation: 'h',
          marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
          },
          type: 'bar'
        };
        
        var trace2 = {
          x: [12, 18, 29],
          y: ['giraffes', 'orangutans', 'monkeys'],
          name: 'LA Zoo',
          orientation: 'h',
          type: 'bar',
          marker: {
            color: 'rgba(255,153,51,0.6)',
            width: 1
          }
        };
        
        var data = [trace1, trace2];
        
        var layout = {
          title: 'Colored Bar Chart',
          barmode: 'stack'
        };
        
        Plotly.newPlot('myDiv14', data, layout);
      
      

Bar Chart with Line Plot


             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var xSavings = [1.3586, 2.2623000000000002, 4.9821999999999997, 6.5096999999999996,
  7.4812000000000003, 7.5133000000000001, 15.2148, 17.520499999999998
];

var xNetworth = [93453.919999999998, 81666.570000000007, 69889.619999999995, 78381.529999999999, 141395.29999999999, 92969.020000000004, 66090.179999999993, 122379.3];

var ySavings = ['Japan', 'United Kingdom', 'Canada', 'Netherlands', 'United States', 'Belgium', 'Sweden', 'Switzerland'];

var yNetworth = ['Japan', 'United Kingdom', 'Canada', 'Netherlands', 'United States', 'Belgium', 'Sweden', 'Switzerland'];

var trace1 = {
  x: xSavings,
  y: ySavings,
  xaxis: 'x1',
  yaxis: 'y1',
  type: 'bar',
  marker: {
    color: 'rgba(50,171,96,0.6)',
    line: {
      color: 'rgba(50,171,96,1.0)',
      width: 1
    }
  },
  name: 'Household savings, percentage of household disposable income',
  orientation: 'h'
};

var trace2 = {
  x: xNetworth,
  y: yNetworth,
  xaxis: 'x2',
  yaxis: 'y1',
  mode: 'lines+markers',
  line: {
    color: 'rgb(128,0,128)'
  },
  name: 'Household net worth, Million USD/capita'
};

var data = [trace1, trace2];

var layout = {
  title: 'Household Savings & Net Worth for Eight OECD Countries',
  xaxis1: {
    range: [0, 20],
    domain: [0, 0.5],
    zeroline: false,
    showline: false,
    showticklabels: true,
    showgrid: true
  },
  xaxis2: {
    range: [25000, 150000],
    domain: [0.5, 1],
    zeroline: false,
    showline: false,
    showticklabels: true,
    showgrid: true,
    side: 'top',
    dtick: 25000
  },
  legend: {
    x: 0.029,
    y: 1.238,
    font: {
      size: 10
    }
  },
  margin: {
    l: 100,
    r: 20,
    t: 200,
    b: 70
  },
  width: 600,
  height: 600,
  paper_bgcolor: 'rgb(248,248,255)',
  plot_bgcolor: 'rgb(248,248,255)',
  annotations: [
    {
      xref: 'paper',
      yref: 'paper',
      x: -0.2,
      y: -0.109,
      text: 'OECD ' + '(2015), Household savings (indicator), ' + 'Household net worth (indicator). doi: ' + '10.1787/cfc6f499-en (Accessed on 05 June 2015)',
      showarrow: false,
      font:{
        family: 'Arial',
        size: 10,
        color: 'rgb(150,150,150)'
      }
    }
  ]
};

for ( var i = 0 ; i &lt; xSavings.length ; i++ ) {
  var result = {
    xref: 'x1',
    yref: 'y1',
    x: xSavings[i]+2.3,
    y: ySavings[i],
    text: xSavings[i] + '%',
    font: {
      family: 'Arial',
      size: 12,
      color: 'rgb(50, 171, 96)'
    },
     showarrow: false,
  };
  var result2 = {
    xref: 'x2',
    yref: 'y1',
    x: xNetworth[i] - 20000,
    y: yNetworth[i],
    text: xNetworth[i] + ' M',
    font: {
      family: 'Arial',
      size: 12,
      color: 'rgb(128, 0, 128)'
    },
     showarrow: false
  };
  layout.annotations.push(result, result2);
}

Plotly.newPlot('myDiv', data, layout);
      
      
      
Waterfall Charts in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
       
      

Basic Waterfall Chart


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var gd = document.getElementById('graphDiv');
var data = [
        {
            name: "2018",
            type: "waterfall",
            orientation: "v",
            measure: [
                "relative",
                "relative",
                "total",
                "relative",
                "relative",
                "total"
            ],
            x: [
                "Sales",
                "Consulting",
                "Net revenue",
                "Purchases",
                "Other expenses",
                "Profit before tax"
            ],
            textposition: "outside",
            text: [
                "+60",
                "+80",
                "",
                "-40",
                "-20",
                "Total"
            ],
            y: [
                60,
                80,
                0,
                -40,
                -20,
                0
            ],
            connector: {
              line: {
                color: "rgb(63, 63, 63)"
              }
            },
        }
    ];
 layout = {
        title: {
            text: "Profit and loss statement 2018"
        },
        xaxis: {
            type: "category"
        },
        yaxis: {
            type: "linear"
        },
        autosize: true,
        showlegend: true
    };
Plotly.newPlot(gd, data, layout);
      
      

Horizontal Waterfall Chart



             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [
                {
                    name: "2018",
                    type: "waterfall",
                    orientation: "h",
                    measure: [
                        "relative",
                        "relative",
                        "relative",
                        "relative",
                        "total",
                        "relative",
                        "relative",
                        "relative",
                        "relative",
                        "total",
                        "relative",
                        "relative",
                        "total",
                        "relative",
                        "total"
                    ],
                    y: [
                        "Sales",
                        "Consulting",
                        "Maintenance",
                        "Other revenue",
                        "Net revenue",
                        "Purchases",
                        "Material expenses",
                        "Personnel expenses",
                        "Other expenses",
                        "Operating profit",
                        "Investment income",
                        "Financial income",
                        "Profit before tax",
                        "Income tax (15%)",
                        "Profit after tax"
                    ],
                    x: [
                        375,
                        128,
                        78,
                        27,
                        null,
                        -327,
                        -12,
                        -78,
                        -12,
                        null,
                        32,
                        89,
                        null,
                        -45,
                        null
                    ],
                    connector: {
                        mode: "between",
                        line: {
                            width: 4,
                            color: "rgb(0, 0, 0)",
                            dash: 0
                        }
                    }
                }
            ];
var layout = {title: {
            text: "Profit and loss statement 2018<br>waterfall chart displaying positive and negative"
        },
        yaxis: {
            type: "category",
            autorange: "reversed"
        },
        xaxis: {
            type: "linear"
        },
        margin: { l: 150 },
        showlegend: true
    }
Plotly.newPlot('myDiv19', data, layout);
      

Style Waterfall Chart


             .___
            [__]
        .___    .___
      | [__]    [__]  |
                            
                            
var gd = document.getElementById('graphDiv');
var data = [
    {
      type: "waterfall",
      x: [
        ["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial", "q1", "q2", "q3", "total", "q1", "q2", "q3", "total" ]
      ],
      measure: ["absolute", "relative", "relative", "relative", "total", "relative", "relative", "relative", "total"],
      y: [10, 20, 30, -10, null, 10, 20, -40, null],
      base: 300,
    decreasing: { marker: { color: "Maroon" , line:{color : "red", width :2}}},
    increasing: { marker: { color: "Teal"} },
    totals: { marker: { color: "deep sky blue", line:{color:'blue',width:3}} }
    }];
var layout = {title: {
            text: "Profit and loss statement"
        },
    waterfallgap : 0.3,
    xaxis: {
      title: "",
      tickfont: {size: 15},
      ticks: "outside"
    }
  }
Plotly.newPlot(gd, data, layout);


Sunburst Charts in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                              
Basic Sunburst Chart


             .___
            [__]
        .___    .___
      | [__]    [__]  |
                            
                            
var data = [{
  type: "sunburst",
  labels: ["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
  parents: ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
  values:  [10, 14, 12, 10, 2, 6, 6, 4, 4],
  outsidetextfont: {size: 20, color: "#377eb8"},
  leaf: {opacity: 0.4},
  marker: {line: {width: 2}},
}];

var layout = {
  margin: {l: 0, r: 0, b: 0, t: 0},
  width: 500,
  height: 500
};


Plotly.newPlot('myDiv', data, layout);


Sunburst with Repeated Labels
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                            
var data = [{
  type: "sunburst",
  ids: [
    "North America", "Europe", "Australia", "North America - Football", "Soccer",
    "North America - Rugby", "Europe - Football", "Rugby",
    "Europe - American Football","Australia - Football", "Association",
    "Australian Rules", "Autstralia - American Football", "Australia - Rugby",
    "Rugby League", "Rugby Union"
  ],
  labels: [
    "North<br>America", "Europe", "Australia", "Football", "Soccer", "Rugby",
    "Football", "Rugby", "American<br>Football", "Football", "Association",
    "Australian<br>Rules", "American<br>Football", "Rugby", "Rugby<br>League",
    "Rugby<br>Union"
  ],
  parents: [
    "", "", "", "North America", "North America", "North America", "Europe",
    "Europe", "Europe","Australia", "Australia - Football", "Australia - Football",
    "Australia - Football", "Australia - Football", "Australia - Rugby",
    "Australia - Rugby"
  ],
  outsidetextfont: {size: 20, color: "#377eb8"},
  // leaf: {opacity: 0.4},
  marker: {line: {width: 2}},
}];

var layout = {
  margin: {l: 0, r: 0, b: 0, t:0},
  sunburstcolorway:["#636efa","#ef553b","#00cc96"],
};


Plotly.newPlot('myDiv', data, layout);
                            
Large Number of Slices


             .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv', function(err, rows){
  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var data = [
    {
      type: "sunburst",
      maxdepth: 3,
      ids: unpack(rows, 'ids'),
      labels: unpack(rows, 'labels'),
      parents:unpack(rows, 'parents')
    }
  ];

var layout = {
  margin: {l: 0, r: 0, b: 0, t:0},
  sunburstcolorway:[
    "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
    "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
  ],
  extendsunburstcolorway: true
};


Plotly.newPlot('myDiv', data, layout, {showSendToCloud: true});
})

}

Gauge charts
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Circular Gauge Chart
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

// Enter a speed between 0 and 180
var level = 175;

// Trig to calc meter point
var degrees = 180 - level,
     radius = .5;
var radians = degrees * Math.PI / 180;
var x = radius * Math.cos(radians);
var y = radius * Math.sin(radians);

// Path: may have to change to create a better triangle
var mainPath = 'M -.0 -0.025 L .0 0.025 L ',
     pathX = String(x),
     space = ' ',
     pathY = String(y),
     pathEnd = ' Z';
var path = mainPath.concat(pathX,space,pathY,pathEnd);

var data = [{ type: 'scatter',
   x: [0], y:[0],
    marker: {size: 28, color:'850000'},
    showlegend: false,
    name: 'speed',
    text: level,
    hoverinfo: 'text+name'},
  { values: [50/6, 50/6, 50/6, 50/6, 50/6, 50/6, 50],
  rotation: 90,
  text: ['TOO FAST!', 'Pretty Fast', 'Fast', 'Average',
            'Slow', 'Super Slow', ''],
  textinfo: 'text',
  textposition:'inside',
  marker: {colors:['rgba(14, 127, 0, .5)', 'rgba(110, 154, 22, .5)',
                         'rgba(170, 202, 42, .5)', 'rgba(202, 209, 95, .5)',
                         'rgba(210, 206, 145, .5)', 'rgba(232, 226, 202, .5)',
                         'rgba(255, 255, 255, 0)']},
  labels: ['151-180', '121-150', '91-120', '61-90', '31-60', '0-30', ''],
  hoverinfo: 'label',
  hole: .5,
  type: 'pie',
  showlegend: false
}];

var layout = {
  shapes:[{
      type: 'path',
      path: path,
      fillcolor: '850000',
      line: {
        color: '850000'
      }
    }],
  title: '<b>Gauge</b> <br> Speed 0-100',
  height: 1000,
  width: 1000,
  xaxis: {zeroline:false, showticklabels:false,
             showgrid: false, range: [-1, 1]},
  yaxis: {zeroline:false, showticklabels:false,
             showgrid: false, range: [-1, 1]}
};

Plotly.newPlot('myDiv', data, layout);


Sankey Diagrams in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic Sankey Diagram
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = {
  type: "sankey",
  orientation: "h",
  node: {
    pad: 15,
    thickness: 30,
    line: {
      color: "black",
      width: 0.5
    },
   label: ["A1", "A2", "B1", "B2", "C1", "C2"],
   color: ["blue", "blue", "blue", "blue", "blue", "blue"]
      },

  link: {
    source: [0,1,0,2,3,3],
    target: [2,3,3,4,4,5],
    value:  [8,4,2,8,4,2]
  }
}

var data = [data]

var layout = {
  title: "Basic Sankey",
  font: {
    size: 10
  }
}

Plotly.react('myDiv', data, layout)



Create Sankey Canvas
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = {
  type: "sankey",
  domain: {
    x: [0,1],
    y: [0,1]
  },
  orientation: "h",
  valueformat: ".0f",
  valuesuffix: "TWh"
}

var data = [data]

var layout = {
  title: "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
  width: 1118,
  height: 772,
  font: {
    size: 10
  }
}
      
      
      
Create Sankey Canvas
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = {
  type: "sankey",
  domain: {
    x: [0,1],
    y: [0,1]
  },
  orientation: "h",
  valueformat: ".0f",
  valuesuffix: "TWh"
}

var data = [data]

var layout = {
  title: "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
  width: 1118,
  height: 772,
  font: {
    size: 10
  }
}



Add Nodes
      
        .___
        [__]
             .___
              [__]
              
Plotly.d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json', function(fig){

var data = {
  type: "sankey",
  domain: {
    x: [0,1],
    y: [0,1]
  },
  orientation: "h",
  valueformat: ".0f",
  valuesuffix: "TWh",

  node: {
    pad: 15,
    thickness: 15,
    line: {
      color: "black",
      width: 0.5
    },
   label: fig.data[0].node.label,
   color: fig.data[0].node.color
      }
}

var data = [data]

var layout = {
  title: "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
  width: 1118,
  height: 772,
  font: {
    size: 10
  }
}

});

Add Links

        .___
        [__]
             .___
              [__]
              
Plotly.d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json', function(fig){

var data = {
  type: "sankey",
  domain: {
    x: [0,1],
    y: [0,1]
  },
  orientation: "h",
  valueformat: ".0f",
  valuesuffix: "TWh",
  node: {
    pad: 15,
    thickness: 15,
    line: {
      color: "black",
      width: 0.5
    },
   label: fig.data[0].node.label,
   color: fig.data[0].node.color
      },

  link: {
    source: fig.data[0].link.source,
    target: fig.data[0].link.target,
    value: fig.data[0].link.value,
    label: fig.data[0].link.label
  }
}

var data = [data]

var layout = {
  title: "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
  width: 1118,
  height: 772,
  font: {
    size: 10
  }
}

Plotly.plot('plotly-div', data, layout)
});


Style Sankey Diagram
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json', function(fig){

var data = {
  type: "sankey",
  domain: {
    x: [0,1],
    y: [0,1]
  },
  orientation: "h",
  valueformat: ".0f",
  valuesuffix: "TWh",
  node: {
    pad: 15,
    thickness: 15,
    line: {
      color: "black",
      width: 0.5
    },
   label: fig.data[0].node.label,
   color: fig.data[0].node.color
      },
  link: {
    source: fig.data[0].link.source,
    target: fig.data[0].link.target,
    value: fig.data[0].link.value,
    label: fig.data[0].link.label
  }
}

var data = [data]

var layout = {
  title: "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
  width: 1118,
  height: 772,
  font: {
    size: 10,
    color: 'white'
  },
  plot_bgcolor: 'black',
  paper_bgcolor: 'black'
}

Plotly.plot('plotly-div', data, layout)
});



Point Cloud in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 
      
Basic Point Cloud

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var myPlot = document.getElementById('myDiv');
var xy = new Float32Array([1,2,3,4,5,6,0,4]);

data = [{ xy: xy,  type: 'pointcloud' }];
layout = { };

Plotly.newPlot('myDiv', data, layout);


Styled Point Cloud

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var trace1 = {
  type: "pointcloud",
  mode: "markers",
  marker: {
    sizemin: 0.5,
    sizemax: 100,
    arearatio: 0,
    color: "rgba(255, 0, 0, 0.6)"
  },
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
  y: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
}

var trace2 = {
  type: "pointcloud",
  mode: "markers",
  marker: {
    sizemin: 0.5,
    sizemax: 100,
    arearatio: 0,
    color: "rgba(0, 0, 255, 0.9)",
    opacity: 0.8,
    blend: true
  },
  opacity: 0.7,
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
  y: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

var trace3 = {
  type: "pointcloud",
  mode: "markers",
  marker: {
    sizemin: 0.5,
    sizemax: 100,
    border: {
      color: "rgb(0, 0, 0)",
      arearatio: 0.7071
    },
    color: "green",
    opacity: 0.8,
    blend: true
  },
  opacity: 0.7,
  x: [3, 4.5, 6],
  y: [9, 9, 9]
}

var data = [trace1, trace2,trace3];

var layout = {
  title: "Basic Point Cloud",
  xaxis: {
    type: "linear",
    range: [
      -2.501411175139456,
      43.340777299865266],
    autorange: true
  },
  yaxis: {
    type: "linear",
    range: [4,6],
    autorange: true
  },
  height: 598,
  width: 1080,
  autosize: true,
  showlegend: false
}

Plotly.newPlot('myDiv', data, layout);
            
Advanced Point Cloud
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            

var graphDiv = document.getElementById("graphDiv")
var canvas = document.getElementById("canvas")
var ctx = canvas.getContext("2d")

var pointCount = 1e6
var scaleX = 2000
var scaleY = 1000
var speed = 0.3

// some non-uniform distribution
function pseudogaussian() {return (Math.random() + Math.random() + Math.random() + Math.random() + Math.random() + Math.random()) - 3}

// dataset xy array generator
function gaussian(sd) {
  var result = new Float32Array(2 * pointCount)
  var f = 20 / 360 * 2 * Math.PI
  var sin = Math.sin(f)
  var cos = Math.cos(f)
  var i, x, y
  for(i = 0; i < pointCount; i++) {
    x = scaleX * pseudogaussian() * sd
    y = scaleY * pseudogaussian() * sd * 0.75
    result[i * 2] = x * cos - y * sin + scaleX * 0.5
    result[i * 2 + 1] = x * sin + y * cos + scaleY * 0.5
  }

  return result
}

// generate initial dataset
var geom = gaussian(1/5)

var plotData = {
  data: [
    {
      type: 'pointcloud',
      marker: {
        sizemin: 0.05,
        sizemax: 30,
        color: 'darkblue',
        opacity: 1,
        blend: true
      },
      opacity: 1,
      xy: geom, // instead of separate x and y arrays
      indices: new Int32Array(pointCount).map(function(d, i) {return i;}),
      xbounds: [0, scaleX],
      ybounds: [0, scaleY]
    }
  ],
  layout: {
    title: 'Point Cloud - updating 1 million points in every single frame',
    autosize: false,
    width: 1000,
    height: 600,
    hovermode: false,
    dragmode: "pan"
  }
}

function reds (imageData) {
  // uses the red channel for simplicity
  var result = []
  var data = imageData.data
  var width = imageData.width
  var height = imageData.height
  var i, j
  for(j =0; j < height; j++)
    for(i = 0; i < width; i++)
      if(data[4 * (i + width * j)])
        result.push([i, j])
  return result
}

function fillGeom(pixels, width, height) {
  var result = new Float32Array(2 * pointCount)
  var i
  var pixel
  var pixLength = pixels.length
  for(i = 0; i < pointCount; i++) {
    pixel = pixels[i % pixLength] // recycling and jittering points
    result[2 * i] = scaleX * (pixel[0] + Math.random()) / width
    result[2 * i + 1] = scaleY * (1 - (pixel[1] + Math.random()) / height)
  }
  return result
}

function recurrenceRelationGeom(target, geom, speed, maxVelo, fraction) {
  // non-one fraction is for glitch effects
  var i, ii, diff
  var geomPointCount = geom.length
  var changedCount = Math.round(geomPointCount * fraction)
  var from = Math.floor(Math.random() * geomPointCount)
  var to = from + changedCount
  for(ii = from; ii < to; ii++) {
    i = ii % geomPointCount
    diff = speed * (target[i] - geom[i])
    geom[i] += Math.min(maxVelo, diff) // capping for glitch effect
  }
}

function clearCanvas(ctx, width, height) {
  ctx.fillStyle = "black"
  ctx.fillRect(0, 0, width, height)
  ctx.fillStyle = "red"
}

function plotlyTextGeom(ctx, width, height) {

  clearCanvas(ctx, width, height)
  ctx.font = "bold 260px 'Open sans',verdana,arial,sans-serif"
  ctx.textAlign = "center"
  ctx.textBaseline = "middle"
  ctx.fillText("Plotly", width / 2, height / 2)
  var imageData = ctx.getImageData(0, 0, width, height)
  var filledPixels = reds(imageData)

  return fillGeom(filledPixels, width, height)
}

function pointcloudTextGeom(ctx, width, height) {

  clearCanvas(ctx, width, height)
  ctx.font = "bold 240px 'Open sans',verdana,arial,sans-serif"
  ctx.textAlign = "center"
  ctx.textBaseline = "alphabetic"
  ctx.fillText("Point", width / 2, height / 2)
  ctx.textBaseline = "hanging"
  ctx.fillText("Cloud", width / 2, height / 2)
  var imageData = ctx.getImageData(0, 0, width, height)
  var filledPixels = reds(imageData)

  return fillGeom(filledPixels, width, height)
}

function oneMillionTextGeom(ctx, width, height) {

  clearCanvas(ctx, width, height)
  ctx.font = "bold 144px 'Open sans',verdana,arial,sans-serif"
  ctx.textAlign = "center"
  ctx.textBaseline = "bottom"
  ctx.fillText("1 million", width / 2, height / 2)
  ctx.textBaseline = "top"
  ctx.fillText("live points", width / 2, height / 2)
  var imageData = ctx.getImageData(0, 0, width, height)
  var filledPixels = reds(imageData)

  return fillGeom(filledPixels, width, height)
}

function initializeCanvas(plotArea) {
  canvas.style.left = plotArea.left + "px"
  canvas.style.top = plotArea.top + "px"
  canvas.setAttribute("width", plotArea.width)
  canvas.setAttribute("height", plotArea.height)
}


// 'Open sans',verdana,arial,sans-serif
Plotly.plot(graphDiv, plotData.data, plotData.layout).then(function() {

  var plotArea = document.querySelector('.gl-container div').getBoundingClientRect()

  var width = plotArea.width
  var height = plotArea.height

  initializeCanvas(plotArea)

  var targetPlotly = {
    geom: plotlyTextGeom(ctx, width, height),
    color: "blue",
    speed: 2 - speed,
    maxVelo: Infinity,
    fraction: 1
  }
  var targetPointcloud = {
    geom: pointcloudTextGeom(ctx, width, height),
    color: "darkgreen",
    speed: speed,
    maxVelo: 100,
    fraction: 0.6
  }
  var targetOneMillion = {
    geom: oneMillionTextGeom(ctx, width, height),
    color: "darkpurple",
    speed: speed,
    maxVelo: 200,
    fraction: 0.6
  }
  var targetGaussian = {
    geom: gaussian(1/5),
    color: "darkblue",
    speed: 5 * speed,
    maxVelo: 50,
    fraction: 1
  }
  var targetGaussian2 = {
    geom: gaussian(100),
    color: "darkblue",
    speed: 0.2 * speed,
    maxVelo: 1000,
    fraction: 1
  }

  var currentIndex = 0
  var targets = [targetPlotly, targetPointcloud, targetOneMillion, targetGaussian, targetGaussian2]

  window.setInterval(function() {
    currentIndex = (currentIndex + 1) % targets.length
  }, 3000)

  function getIndex() {
    return currentIndex
  }

  window.requestAnimationFrame(function refresh() {
    var target = targets[getIndex()]
    recurrenceRelationGeom(target.geom, geom, target.speed, target.maxVelo, target.fraction)
    Plotly.restyle(graphDiv, {marker:{color: target.color}/*,xy: geom*/}, 0) // /*no need to include xy: geom*/
    window.requestAnimationFrame(refresh)
  })
})
                    
            
Tables in plotly.js
 

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
  
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
                                    
                                    
Basic Table

            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var values = [
      ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'],
      [1200000, 20000, 80000, 2000, 12120000],
      [1300000, 20000, 70000, 2000, 130902000],
      [1300000, 20000, 120000, 2000, 131222000],
      [1400000, 20000, 90000, 2000, 14102000]]

var data = [{
  type: 'table',
  header: {
    values: [["<b>EXPENSES</b>"], ["<b>Q1</b>"],
				 ["<b>Q2</b>"], ["<b>Q3</b>"], ["<b>Q4</b>"]],
    align: "center",
    line: {width: 1, color: 'black'},
    fill: {color: "grey"},
    font: {family: "Arial", size: 12, color: "white"}
  },
  cells: {
    values: values,
    align: "center",
    line: {color: "black", width: 1},
    font: {family: "Arial", size: 11, color: ["black"]}
  }
}]

Plotly.plot('graph', data);
            


 
Styled table
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
            var values = [
                  ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'],
                  [1200000, 20000, 80000, 2000, 12120000],
                  [1300000, 20000, 70000, 2000, 130902000],
                  [1300000, 20000, 120000, 2000, 131222000],
                  [1400000, 20000, 90000, 2000, 14102000]]
            
            var data = [{
              type: 'table',
              header: {
                values: [["<b>EXPENSES</b>"], ["<b>Q1</b>"],
            				 ["<b>Q2</b>"], ["<b>Q3</b>"], ["<b>Q4</b>"]],
                align: ["left", "center"],
                line: {width: 1, color: '#506784'},
                fill: {color: '#119DFF'},
                font: {family: "Arial", size: 12, color: "white"}
              },
              cells: {
                values: values,
                align: ["left", "center"],
                line: {color: "#506784", width: 1},
            	 fill: {color: ['#25FEFD', 'white']},
                font: {family: "Arial", size: 11, color: ["#506784"]}
              }
            }]
            
            Plotly.plot('myDiv32', data);
            
Table From a CSV

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

  var headerNames = Plotly.d3.keys(rows[0]);

  var headerValues = [];
  var cellValues = [];
  for (i = 0; i < headerNames.length; i++) {
    headerValue = [headerNames[i]];
    headerValues[i] = headerValue;
    cellValue = unpack(rows, headerNames[i]);
    cellValues[i] = cellValue;
  }

  // clean date
  for (i = 0; i < cellValues[1].length; i++) {
  var dateValue = cellValues[1][i].split(' ')[0]
  cellValues[1][i] = dateValue
  }


var data = [{
  type: 'table',
  columnwidth: [200,500,600,600,400,400,600,600,600],
  columnorder: [0,1,2,3,4,5,6,7,8,9],
  header: {
    values: headerValues,
    align: "center",
    line: {width: 1, color: 'rgb(50, 50, 50)'},
    fill: {color: ['rgb(235, 100, 230)']},
    font: {family: "Arial", size: 11, color: "white"}
  },
  cells: {
    values: cellValues,
    align: ["center", "center"],
    line: {color: "black", width: 1},
    fill: {color: ['rgba(228, 222, 249, 0.65)','rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']},
    font: {family: "Arial", size: 10, color: ["black"]}
  }
}]

var layout = {
  title: "Bitcoin mining stats for 180 days"
}

Plotly.plot('graph', data, layout);
});
            
            
            
            
            

Changing Size of Rows and Columns
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var values = [
      ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL<br>EXPENSES</b>'],
	["Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad",
	 "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad",
	 "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad",
	 "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad",
	"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad"]]

var data = [{
  type: 'table',
  columnorder: [1,2],
  columnwidth: [80,400],
  header: {
    values: [["<b>EXPENSES</b><br>as of July 2017"], ["<b>DESCRIPTION</b>"]],
	 align: ["left", "center"],
	 height: 40,
    line: {width: 1, color: '#506784'},
    fill: {color: '#119DFF'},
    font: {family: "Arial", size: 12, color: "white"}
  },
  cells: {
    values: values,
    align: ["left", "center"],
	 height: 30,
    line: {color: "#506784", width: 1},
	 fill: {color: ['#25FEFD', 'white']},
    font: {family: "Arial", size: 11, color: ["#506784"]}
  }
}]

Plotly.plot('graph', data);
            
            
Alternating Row Colors
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var values = [
      ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'],
      [1200000, 20000, 80000, 2000, 12120000],
      [1300000, 20000, 70000, 2000, 130902000],
      [1300000, 20000, 120000, 2000, 131222000],
      [1400000, 20000, 90000, 2000, 14102000]]

var headerColor = "grey";
var rowEvenColor = "lightgrey";
var rowOddColor = "white";

var data = [{
  type: 'table',
  header: {
    values: [["<b>EXPENSES</b>"], ["<b>Q1</b>"],
				 ["<b>Q2</b>"], ["<b>Q3</b>"], ["<b>Q4</b>"]],
    align: "center",
    line: {width: 1, color: 'black'},
    fill: {color: headerColor},
    font: {family: "Arial", size: 12, color: "white"}
  },
  cells: {
    values: values,
    align: "center",
    line: {color: "black", width: 1},
    fill: {color: [[rowOddColor,rowEvenColor,rowOddColor,
						  rowEvenColor,rowOddColor]]},
    font: {family: "Arial", size: 11, color: ["black"]}
  }
}]

Plotly.plot('graph', data);


Table Subplots in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
            
Table and Chart Subplot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

  // header values
  var headerNames = Plotly.d3.keys(rows[0]);
  var headerValues = [headerNames[1],headerNames[2],
                      headerNames[3],headerNames[4]];

  // cell values
  var cellValues = [];
  for (i = 0; i < headerValues.length; i++) {
    cellValue = unpack(rows, headerValues[i]);
    cellValues[i] = cellValue;
  }

  // clean date
  for (i = 0; i < cellValues[0].length; i++) {
  var dateValue = cellValues[0][i].split(' ')[0]
  cellValues[0][i] = dateValue
  }

  // create table
  var table = {
    type: 'table',
    columnwidth: [150,200,200,150],
    columnorder: [0,1,2,3],
    header: {
      values: headerValues,
      align: "center",
      line: {width: 1, color: 'rgb(50, 50, 50)'},
      fill: {color: ['rgb(235, 100, 230)']},
      font: {family: "Arial", size: 11, color: "white"}
    },
    cells: {
      values: cellValues,
      align: ["center", "center"],
      line: {color: "black", width: 1},
      fill: {color: ['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']},
      font: {family: "Arial", size: 10, color: ["black"]}
    },
    xaxis: 'x',
    yaxis: 'y',
    domain: {x: [0,0.4], y: [0,1]}
  }

  // create 1st plot
  var trace1 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Hash-rate'),
    xaxis: 'x1',
    yaxis: 'y1',
    mode: 'lines',
    line: {width: 2, color: '#9748a1'},
    name: 'hash-rate-TH/s'
  }
  // create 2nd plot
  var trace2 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Mining-revenue-USD'),
    xaxis: 'x2',
    yaxis: 'y2',
    mode: 'lines',
    line: {width: 2, color: '#b04553'},
    name: 'Mining-revenue-USD'
  }

  // create 3rd plot
  var trace3 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Transaction-fees-BTC'),
    xaxis: 'x3',
    yaxis: 'y3',
    mode: 'lines',
    line: {width: 2, color: '#af7bbd'},
    name: 'Transaction-fees-BTC'
  }

  var data = [table,trace1,trace2,trace3]

  // define subplot axes
  var axis = {
    showline: true,
    zeroline: false,
    showgrid: true,
    mirror:true,
    ticklen: 4,
    gridcolor: '#ffffff',
    tickfont: {size: 10},
  }

  var axis1 = {domain: [0.5, 1], anchor: 'y1', showticklabels: false}
  var axis2 = {domain: [0.5, 1], anchor: 'y2', showticklabels: false}
  var axis3 = {domain: [0.5, 1], anchor: 'y3'}
  var axis4 = {domain: [0.66, 0.98], anchor: 'x1', hoverformat: '.2f'}
  var axis5 = {domain: [0.34, 0.64], anchor: 'x2', tickprefix: '$', hoverformat: '.2f'}
  var axis6 = {domain: [0.0, 0.32], anchor: 'x3', tickprefix: '\u20BF', hoverformat: '.2f'}

  // define layout
  var layout = {
    title: "Bitcoin mining stats for 180 days",
    plot_bgcolor: 'rgba(228, 222, 249, 0.65)',
    showlegend: false,
    xaxis1: Object.assign(axis1,axis),
    xaxis2: Object.assign(axis2,axis),
    xaxis3: Object.assign(axis3,axis),
    yaxis1: Object.assign(axis4,axis),
    yaxis2: Object.assign(axis5,axis),
    yaxis3: Object.assign(axis6,axis)
  }

  Plotly.plot('graph', data, layout);

});
            
                                    
                                    
Multiple Chart Types in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
            
A Contour and Scatter Plot of the Method of Steepest Descent
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var trace1 = {
  z: [[1.5, 1.23469387755, 1.01020408163, 0.826530612245, 0.683673469388, 0.581632653061, 0.520408163265, 0.5, 0.520408163265, 0.581632653061, 0.683673469388, 0.826530612245, 1.01020408163, 1.23469387755, 1.5], [1.36734693878, 1.10204081633, 0.877551020408, 0.69387755102, 0.551020408163, 0.448979591837, 0.387755102041, 0.367346938776, 0.387755102041, 0.448979591837, 0.551020408163, 0.69387755102, 0.877551020408, 1.10204081633, 1.36734693878], [1.25510204082, 0.989795918367, 0.765306122449, 0.581632653061, 0.438775510204, 0.336734693878, 0.275510204082, 0.255102040816, 0.275510204082, 0.336734693878, 0.438775510204, 0.581632653061, 0.765306122449, 0.989795918367, 1.25510204082], [1.16326530612, 0.897959183673, 0.673469387755, 0.489795918367, 0.34693877551, 0.244897959184, 0.183673469388, 0.163265306122, 0.183673469388, 0.244897959184, 0.34693877551, 0.489795918367, 0.673469387755, 0.897959183673, 1.16326530612], [1.09183673469, 0.826530612245, 0.602040816327, 0.418367346939, 0.275510204082, 0.173469387755, 0.112244897959, 0.0918367346939, 0.112244897959, 0.173469387755, 0.275510204082, 0.418367346939, 0.602040816327, 0.826530612245, 1.09183673469], [1.04081632653, 0.775510204082, 0.551020408163, 0.367346938776, 0.224489795918, 0.122448979592, 0.0612244897959, 0.0408163265306, 0.0612244897959, 0.122448979592, 0.224489795918, 0.367346938776, 0.551020408163, 0.775510204082, 1.04081632653], [1.01020408163, 0.744897959184, 0.520408163265, 0.336734693878, 0.19387755102, 0.0918367346939, 0.030612244898, 0.0102040816327, 0.030612244898, 0.0918367346939, 0.19387755102, 0.336734693878, 0.520408163265, 0.744897959184, 1.01020408163], [1.0, 0.734693877551, 0.510204081633, 0.326530612245, 0.183673469388, 0.0816326530612, 0.0204081632653, 0.0, 0.0204081632653, 0.0816326530612, 0.183673469388, 0.326530612245, 0.510204081633, 0.734693877551, 1.0], [1.01020408163, 0.744897959184, 0.520408163265, 0.336734693878, 0.19387755102, 0.0918367346939, 0.030612244898, 0.0102040816327, 0.030612244898, 0.0918367346939, 0.19387755102, 0.336734693878, 0.520408163265, 0.744897959184, 1.01020408163], [1.04081632653, 0.775510204082, 0.551020408163, 0.367346938776, 0.224489795918, 0.122448979592, 0.0612244897959, 0.0408163265306, 0.0612244897959, 0.122448979592, 0.224489795918, 0.367346938776, 0.551020408163, 0.775510204082, 1.04081632653], [1.09183673469, 0.826530612245, 0.602040816327, 0.418367346939, 0.275510204082, 0.173469387755, 0.112244897959, 0.0918367346939, 0.112244897959, 0.173469387755, 0.275510204082, 0.418367346939, 0.602040816327, 0.826530612245, 1.09183673469], [1.16326530612, 0.897959183673, 0.673469387755, 0.489795918367, 0.34693877551, 0.244897959184, 0.183673469388, 0.163265306122, 0.183673469388, 0.244897959184, 0.34693877551, 0.489795918367, 0.673469387755, 0.897959183673, 1.16326530612], [1.25510204082, 0.989795918367, 0.765306122449, 0.581632653061, 0.438775510204, 0.336734693878, 0.275510204082, 0.255102040816, 0.275510204082, 0.336734693878, 0.438775510204, 0.581632653061, 0.765306122449, 0.989795918367, 1.25510204082], [1.36734693878, 1.10204081633, 0.877551020408, 0.69387755102, 0.551020408163, 0.448979591837, 0.387755102041, 0.367346938776, 0.387755102041, 0.448979591837, 0.551020408163, 0.69387755102, 0.877551020408, 1.10204081633, 1.36734693878], [1.5, 1.23469387755, 1.01020408163, 0.826530612245, 0.683673469388, 0.581632653061, 0.520408163265, 0.5, 0.520408163265, 0.581632653061, 0.683673469388, 0.826530612245, 1.01020408163, 1.23469387755, 1.5]],
  x: [-1.0, -0.857142857143, -0.714285714286, -0.571428571429, -0.428571428571, -0.285714285714, -0.142857142857, 0.0, 0.142857142857, 0.285714285714, 0.428571428571, 0.571428571429, 0.714285714286, 0.857142857143, 1.0],
  y: [-1.0, -0.857142857143, -0.714285714286, -0.571428571429, -0.428571428571, -0.285714285714, -0.142857142857, 0.0, 0.142857142857, 0.285714285714, 0.428571428571, 0.571428571429, 0.714285714286, 0.857142857143, 1.0],
  ncontours: 30,
  showscale: false,
  type: 'contour'
};

var trace2 = {
  x: [-0.8, -0.48, -0.288, -0.1728, -0.10368, -0.062208, -0.0373248, -0.02239488, -0.013436928, -0.0080621568, -0.00483729408, -0.002902376448, -0.0017414258688, -0.00104485552128, -0.000626913312768, -0.000376147987661],
  y: [-0.9, -0.72, -0.576, -0.4608, -0.36864, -0.294912, -0.2359296, -0.18874368, -0.150994944, -0.1207959552, -0.09663676416, -0.077309411328, -0.0618475290624, -0.0494780232499, -0.0395824185999, -0.0316659348799],
  mode: 'markers+lines',
  name: 'steepest',
  line: {color: 'black'},
  type: 'scatter'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data);
            
            
Line Chart and a Bar Chart


 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            

var trace1 = {
  x: [0, 1, 2, 3, 4, 5],
  y: [1.5, 1, 1.3, 0.7, 0.8, 0.9],
  type: 'scatter'
};

var trace2 = {
  x: [0, 1, 2, 3, 4, 5],
  y: [1, 0.5, 0.7, -1.2, 0.3, 0.4],
  type: 'bar'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv39', data);
            
            
Statistical Charts
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Error Bars in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
                         
 Basic Symmetric Error Bars
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [
  {
    x: [0, 1, 2],
    y: [6, 10, 2],
    error_y: {
      type: 'data',
      array: [1, 2, 3],
      visible: true
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);
      


Bar Chart with Error Bars
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var trace1 = {
  x: ['Trial 1', 'Trial 2', 'Trial 3'],
  y: [3, 6, 4],
  name: 'Control',
  error_y: {
    type: 'data',
    array: [1, 0.5, 1.5],
    visible: true
  },
  type: 'bar'
};
var trace2 = {
  x: ['Trial 1', 'Trial 2', 'Trial 3'],
  y: [4, 7, 3],
  name: 'Experimental',
  error_y: {
    type: 'data',
    array: [0.5, 1, 2],
    visible: true
  },
  type: 'bar'
};
var data = [trace1, trace2];
var layout = {barmode: 'group'};
Plotly.newPlot('myDiv', data, layout);


            
            
Horizontal Error Bars
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_x: {
      type: 'percent',
      value: 10
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);
            
            
Asymmetric Error Bars
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_y: {
      type: 'data',
      symmetric: false,
      array: [0.1, 0.2, 0.1, 0.1],
      arrayminus: [0.2, 0.4, 1, 0.2]
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);
            
                                    
Colored and Styled Error Bars

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var linspace = require('linspace')
x_theo = linspace(-4, 4, 100)
sincx = Math.sin(x_theo) / x_theo
var x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]
var y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]

var trace1 = {
  x: x_theo,
  y: sincx,
  name: 'sinc(x)',
  type: 'scatter'
};
var trace2 = {
  x: x,
  y: y,
  mode: 'markers',
  name: 'measured',
  error_y: {
    type: 'constant',
    value: 0.1,
    color: '#85144B',
    thickness: 1.5,
    width: 3,
    opacity: 1
  },
  error_x: {
    type: 'constant',
    value: 0.2,
    color: '#85144B',
    thickness: 1.5,
    width: 3,
    opacity: 1
  },
  marker: {
    color: '#85144B',
    size: 8
  },
  type: 'scatter'
};
var data = [trace1, trace2];
Plotly.newPlot('myDiv', data);
            
            
Error Bars as a Percentage of the y-Value
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [
  {
    x: [0, 1, 2],
    y: [6, 10, 2],
    error_y: {
      type: 'percent',
      value: 50,
      visible: true
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);
            
            
            
Asymmetric Error Bars with a Constant Offset


 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            

var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_y: {
      type: 'percent',
      symmetric: false,
      value: 15,
      valueminus: 25
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);

Continuous Error Bars in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Filled Lines

            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var trace1 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
  y: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
  fill: "tozerox",
  fillcolor: "rgba(0,100,80,0.2)",
  line: {color: "transparent"},
  name: "Fair",
  showlegend: false,
  type: "scatter"
};
var trace2 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
  y: [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5, 4.75, 5, 4, 7, 2, 4, 7, 4.4, 2, 4.5],
  fill: "tozerox",
  fillcolor: "rgba(0,176,246,0.2)",
  line: {color: "transparent"},
  name: "Premium",
  showlegend: false,
  type: "scatter"
};
var trace3 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
  y: [11, 9, 7, 5, 3, 1, 3, 5, 3, 1, -1, 1, 3, 1, -0.5, 1, 3, 5, 7, 9],
  fill: "tozerox",
  fillcolor: "rgba(231,107,243,0.2)",
  line: {color: "transparent"},
  name: "Fair",
  showlegend: false,
  type: "scatter"
};
var trace4 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
  y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
  line: {color: "rgb(0,100,80)"},
  mode: "lines",
  name: "Fair",
  type: "scatter"
};
var trace5 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
  y: [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5],
  line: {color: "rgb(0,176,246)"},
  mode: "lines",
  name: "Premium",
  type: "scatter"
};
var trace6 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
  y: [10, 8, 6, 4, 2, 0, 2, 4, 2, 0],
  line: {color: "rgb(231,107,243)"},
  mode: "lines",
  name: "Ideal",
  type: "scatter"
};
var data = [trace1, trace2, trace3, trace4, trace5, trace6];
var layout = {
  paper_bgcolor: "rgb(255,255,255)",
  plot_bgcolor: "rgb(229,229,229)",
  xaxis: {
    gridcolor: "rgb(255,255,255)",
    range: [1, 10],
    showgrid: true,
    showline: false,
    showticklabels: true,
    tickcolor: "rgb(127,127,127)",
    ticks: "outside",
    zeroline: false
  },
  yaxis: {
    gridcolor: "rgb(255,255,255)",
    showgrid: true,
    showline: false,
    showticklabels: true,
    tickcolor: "rgb(127,127,127)",
    ticks: "outside",
    zeroline: false
  }
};
Plotly.plot('plotly-div', data, layout);
            
            
Continuous Error Bars in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic 2D Histogram Contour
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var x = [];
var y = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
	y[i] = Math.random() + 1;
}

var data = [
  {
    x: x,
    y: y,
    type: 'histogram2dcontour'
  }
];
Plotly.newPlot('myDiv7', data);






2D Histogram Contour Colorscale
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var x = [];
var y = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
	y[i] = Math.random() + 1;
}

var data = [
  {
    x: x,
    y: y,
    colorscale: 'Blues',
    type: 'histogram2dcontour'
  }
];
Plotly.newPlot('myDiv8', data);



                                             
Styled 2D Histogram Contour
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var x = [];
var y = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
	y[i] = Math.random() + 1;
}

var data = [
  {
    x: x,
    y: y,
    colorscale: 'Blues',
    type: 'histogram2dcontour',
    contours: {
      showlabels: true,
      labelfont: {
        family: 'Raleway',
        color: 'white'
      }
    },
    hoverlabel: {
      bgcolor: 'white',
      bordercolor: 'black',
      font: {
        family: 'Raleway',
        color: 'black'
      }
    }
  }
];
Plotly.newPlot('graph', data);
            
Treemaps in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


            
Treemaps (not working)

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
// declaring arrays
var shapes = [];
var annotations = [];
var counter = 0;

// For Hover Text
var x_trace = [];
var y_trace = [];
var text = [];

//colors
var colors = ['rgb(166,206,227)', 'rgb(31,120,180)', 'rgb(178,223,138)', 'rgb(51,160,44)', 'rgb(251,154,153)', 'rgb(227,26,28)', 'rgb(253,191,111)', 'rgb(255,127,0)', 'rgb(202,178,214)', 'rgb(106,61,154)', 'rgb(255,255,153)', 'rgb(177,89,40)'];

// Generate Rectangles using Treemap-Squared
var values = [500, 433, 78, 25, 25, 7];
var rectangles = Treemap.generate(values, 100, 100);

for (var i in rectangles) {
	var shape = {
	        		type: 'rect',
					x0: rectangles[i][0],
					y0: rectangles[i][1],
					x1: rectangles[i][2],
					y1: rectangles[i][3],
					line: {
							width: 2
						},
					fillcolor: colors[counter]
			};
	shapes.push(shape);
	var annotation = {
	    				x: (rectangles[i][0] + rectangles[i][2]) / 2,
						y: (rectangles[i][1] + rectangles[i][3]) / 2,
						text: String(values[counter]),
						showarrow: false
			};
	annotations.push(annotation);
	
	// For Hover Text
	x_trace.push((rectangles[i][0] + rectangles[i][2]) / 2);
	y_trace.push((rectangles[i][1] + rectangles[i][3]) / 2);
	text.push(String(values[counter]));
			
	// Incrementing Counter
	counter++;
}

// Generating Trace for Hover Text
var trace0 = {
			x: x_trace,
			y: y_trace,
			text: text,
			mode: 'text',
			type: 'scatter'
    };

var layout = {
			height: 700,
			width: 700,
			shapes: shapes,
			hovermode: 'closest',
			annotations: annotations,
			xaxis: {
						showgrid: false,
						zeroline: false
			},
			yaxis: {
						showgrid: false,
						zeroline: false
			}
};

var data = {
			data: [trace0]
};

Plotly.newPlot('myDiv', [trace0], layout);
            
            
SPC Control Charts in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


            
Basic SPC Control Chart

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var Data = {
  type: 'scatter',
  x: [1,2,3,4,5,6,7,8,9],
  y: [4,2,-1,4,-5,-7,0,3,8],
  mode: 'lines+markers',
  name: 'Data',
  showlegend: true,
  hoverinfo: 'all',
  line: {
    color: 'blue',
    width: 2
  },
  marker: {
    color: 'blue',
    size: 8,
    symbol: 'circle'
  }
}

var Viol = {
  type: 'scatter',
  x: [6,9],
  y: [-7,8],
  mode: 'markers',
  name: 'Violation',
  showlegend: true,
  marker: {
    color: 'rgb(255,65,54)',
    line: {width: 3},
    opacity: 0.5,
    size: 12,
    symbol: 'circle-open'
  }
}

var CL = {
  type: 'scatter',
  x: [0.5, 10, null, 0.5, 10],
  y: [-5, -5, null, 5, 5],
  mode: 'lines',
  name: 'LCL/UCL',
  showlegend: true,
  line: {
    color: 'red',
    width: 2,
    dash: 'dash'
  }
}

var Centre = {
  type: 'scatter',
  x: [0.5, 10],
  y: [0, 0],
  mode: 'lines',
  name: 'Centre',
  showlegend: true,
  line: {
    color: 'grey',
    width: 2
  }
}

var data = [Data,Viol,CL,Centre]

var layout = {
  title: 'Basic SPC Chart',
  xaxis: {
    zeroline: false
  },
  yaxis: {
    range: [-10,10],
    zeroline: false
  }
}

Plotly.plot('myDiv', data,layout);
      
            
            
            
SPC Control Chart & Distribution

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var Data = {
  type: 'scatter',
  x: [1,2,3,4,5,6,7,8,9],
  y: [4,2,-1,4,-5,-7,0,3,8],
  mode: 'lines+markers',
  name: 'Data',
  showlegend: true,
  hoverinfo: 'all',
  line: {
    color: 'blue',
    width: 2
  },
  marker: {
    color: 'blue',
    size: 8,
    symbol: 'circle'
  }
}

var Viol = {
  type: 'scatter',
  x: [6,9],
  y: [-7,8],
  mode: 'markers',
  name: 'Violation',
  showlegend: true,
  marker: {
    color: 'rgb(255,65,54)',
    line: {width: 3},
    opacity: 0.5,
    size: 12,
    symbol: 'circle-open'
  }
}

var CL = {
  type: 'scatter',
  x: [0.5, 10, null, 0.5, 10],
  y: [-5, -5, null, 5, 5],
  mode: 'lines',
  name: 'LCL/UCL',
  showlegend: true,
  line: {
    color: 'red',
    width: 2,
    dash: 'dash'
  }
}

var Centre = {
  type: 'scatter',
  x: [0.5, 10],
  y: [0, 0],
  mode: 'lines',
  name: 'Centre',
  showlegend: true,
  line: {
    color: 'grey',
    width: 2
  }
}

var histo = {
  type: 'histogram',
  x: [1,2,3,4,5,6,7,8,9],
  y: [4,2,-1,4,-5,-7,0,3,8],
  name: 'Distribution',
  orientation: 'h',
  marker: {
    color: 'blue',
    line: {
      color: 'white',
      width: 1
    }
  },
  xaxis: 'x2',
  yaxis: 'y2'
}

var data = [Data,Viol,CL,Centre,histo]

// layout
var layout = {
  title: 'Basic SPC Chart',
  xaxis: {
    domain: [0, 0.7], // 0 to 70% of width
    zeroline: false
  },
  yaxis: {
    range: [-10,10],
    zeroline: false
  },
  xaxis2: {
    domain: [0.8, 1] // 70 to 100% of width
  },
  yaxis2: {
    anchor: 'x2',
    showticklabels: false
  }
}

Plotly.plot('myDiv', data,layout);



Violin Plot in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


            
Basic Violin plot  (WRONG)

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

var data = [{
  type: 'violin',
  y: unpack(rows, 'total_bill'),
  points: 'none',
  box: {
    visible: true
  },
  boxpoints: false,
  line: {
    color: 'black'
  },
  fillcolor: '#8dd3c7',
  opacity: 0.6,
  meanline: {
    visible: true
  },
  x0: "Total Bill"
}]

var layout = {
  title: "",
  yaxis: {
    zeroline: false
  }
}

Plotly.plot('graph', data, layout);
});
      
      
Multiple Traces Violin Plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

var data = [{
  type: 'violin',
  x: unpack(rows, 'day'),
  y: unpack(rows, 'total_bill'),
  points: 'none',
  box: {
    visible: true
  },
  line: {
    color: 'green',
  },
  meanline: {
    visible: true
  },
  transforms: [{
  	 type: 'groupby',
	 groups: unpack(rows, 'day'),
	 styles: [
		{target: 'Sun', value: {line: {color: 'blue'}}},
		{target: 'Sat', value: {line: {color: 'orange'}}},
		{target: 'Thur', value: {line: {color: 'green'}}},
		{target: 'Fri', value: {line: {color: 'red'}}}
	 ]
	}]
}]

var layout = {
  title: "Multiple Traces Violin Plot",
  yaxis: {
    zeroline: false
  }
}

Plotly.plot('graph', data, layout);
});
                                                                        
            
Grouped Violin Plot


 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

// need to fix data

Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

var data = [{
  type: 'violin',
  x: unpack(rows, 'day'),
  y: unpack(rows, 'total_bill'),
  legendgroup: 'M',
  scalegroup: 'M',
  name: 'M',
  box: {
    visible: true
  },
  line: {
    color: 'blue',
  },
  meanline: {
    visible: true
  }
}, {
  type: 'violin',
  x: unpack(rows, 'day'),
  y: unpack(rows, 'total_bill'),
  legendgroup: 'F',
  scalegroup: 'F',
  name: 'F',
  box: {
    visible: true
  },
  line: {
    color: 'pink',
  },
  meanline: {
    visible: true
  }
}]

var layout = {
  title: "Grouped Violin Plot",
  yaxis: {
    zeroline: false
  },
  violinmode: 'group'
}

Plotly.plot('graph', data, layout);
});
            
            
Horizontal Violin Plot (incorrect)

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

var data = [{
  type: 'violin',
  x: unpack(rows, 'total_bill'),
  points: 'none',
  box: {
    visible: true
  },
  boxpoints: false,
  line: {
    color: 'black'
  },
  fillcolor: '#8dd3c7',
  opacity: 0.6,
  meanline: {
    visible: true
  },
  y0: "Total Bill"
}]

var layout = {
  title: "Basic Horizontal Violin Plot",
  xaxis: {
    zeroline: false
  }
}

Plotly.plot('graph', data, layout);
});
                                                                                                                                                                      
Split Violin Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

var data = [{
  type: 'violin',
  x: unpack(rows, 'day'),
  y: unpack(rows, 'total_bill'),
  legendgroup: 'Yes',
  scalegroup: 'Yes',
  name: 'Yes',
  side: 'negative',
  box: {
    visible: true
  },
  line: {
    color: 'blue',
    width: 2
  },
  meanline: {
    visible: true
  }
}, {
  type: 'violin',
  x: unpack(rows, 'day'),
  y: unpack(rows, 'total_bill'),
  legendgroup: 'No',
  scalegroup: 'No',
  name: 'No',
  side: 'positive',
  box: {
    visible: true
  },
  line: {
    color: 'green',
    width: 2
  },
  meanline: {
    visible: true
  }
}]

var layout = {
  title: "Split Violin Plot",
  yaxis: {
    zeroline: false
  },
  violingap: 0,
  violingroupgap: 0,
  violinmode: "overlay",
}

Plotly.plot('graph', data, layout);
});
            
            
            
            
Advanced Violin Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                           
var trace1 = {
            text: "sample length: 32",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "F",
            scalegroup: "F",
            points: "all",
            pointpos: 1,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#bebada"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "positive",
            type: "violin",
            name: "F",
            span: [
                0
            ],
            line: {
                color: "#bebada"
            },
            y0: "Thursday",
            x: [
                10.07,
                34.83,
                10.65,
                12.43,
                24.08,
                13.42,
                12.48,
                29.8,
                14.52,
                11.38,
                20.27,
                11.17,
                12.26,
                18.26,
                8.51,
                10.33,
                14.15,
                13.16,
                17.47,
                27.05,
                16.43,
                8.35,
                18.64,
                11.87,
                19.81,
                43.11,
                13.0,
                12.74,
                13.0,
                16.4,
                16.47,
                18.78
            ],
            orientation: "h"
        }


var trace2 = {
            text: "sample length: 30",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "M",
            scalegroup: "M",
            points: "all",
            pointpos: -0.6,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#8dd3c7"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "negative",
            type: "violin",
            name: "M",
            span: [
                0
            ],
            line: {
                color: "#8dd3c7"
            },
            y0: "Thursday",
            x: [
                27.2,
                22.76,
                17.29,
                19.44,
                16.66,
                32.68,
                15.98,
                13.03,
                18.28,
                24.71,
                21.16,
                11.69,
                14.26,
                15.95,
                8.52,
                22.82,
                19.08,
                16.0,
                34.3,
                41.19,
                9.78,
                7.51,
                28.44,
                15.48,
                16.58,
                7.56,
                10.34,
                13.51,
                18.71,
                20.53
            ],
            orientation: "h"
        }

var trace3 = {
            text: "sample length: 9",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "F",
            scalegroup: "F",
            points: "all",
            pointpos: 0.4,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#bebada"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "positive",
            type: "violin",
            name: "F",
            span: [
                0
            ],
            line: {
                color: "#bebada"
            },
            y0: "Friday",
            x: [
                5.75,
                16.32,
                22.75,
                11.35,
                15.38,
                13.42,
                15.98,
                16.27,
                10.09
            ],
            orientation: "h"
        }


var trace4= {
            text: "sample length: 10",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "M",
            scalegroup: "M",
            points: "all",
            pointpos: -0.3,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#8dd3c7"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "negative",
            type: "violin",
            name: "M",
            span: [
                0
            ],
            line: {
                color: "#8dd3c7"
            },
            y0: "Friday",
            x: [
                28.97,
                22.49,
                40.17,
                27.28,
                12.03,
                21.01,
                12.46,
                12.16,
                8.58,
                13.42
            ],
            orientation: "h"
        }

var trace5 = {
            text: "sample length: 28",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "F",
            scalegroup: "F",
            points: "all",
            pointpos: 0.55,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#bebada"
                },
                symbol: "line-ns"
            },
            showlegend: true,
            side: "positive",
            type: "violin",
            name: "F",
            span: [
                0
            ],
            line: {
                color: "#bebada"
            },
            y0: "Saturday",
            x: [
                20.29,
                15.77,
                19.65,
                15.06,
                20.69,
                16.93,
                26.41,
                16.45,
                3.07,
                17.07,
                26.86,
                25.28,
                14.73,
                44.3,
                22.42,
                20.92,
                14.31,
                7.25,
                10.59,
                10.63,
                12.76,
                13.27,
                28.17,
                12.9,
                30.14,
                22.12,
                35.83,
                27.18
            ],
            orientation: "h"
        }

var trace4 = {
            text: "sample length: 59",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "M",
            scalegroup: "M",
            points: "all",
            pointpos: -1.1,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#8dd3c7"
                },
                symbol: "line-ns"
            },
            showlegend: true,
            side: "negative",
            type: "violin",
            name: "M",
            span: [
                0
            ],
            line: {
                color: "#8dd3c7"
            },
            y0: "Saturday",
            x: [
                20.65,
                17.92,
                39.42,
                19.82,
                17.81,
                13.37,
                12.69,
                21.7,
                9.55,
                18.35,
                17.78,
                24.06,
                16.31,
                18.69,
                31.27,
                16.04,
                38.01,
                11.24,
                48.27,
                20.29,
                13.81,
                11.02,
                18.29,
                17.59,
                20.08,
                20.23,
                15.01,
                12.02,
                10.51,
                17.92,
                15.36,
                20.49,
                25.21,
                18.24,
                14.0,
                50.81,
                15.81,
                26.59,
                38.73,
                24.27,
                30.06,
                25.89,
                48.33,
                28.15,
                11.59,
                7.74,
                20.45,
                13.28,
                24.01,
                15.69,
                11.61,
                10.77,
                15.53,
                10.07,
                12.6,
                32.83,
                29.03,
                22.67,
                17.82
            ],
            orientation: "h"
        }

var trace6 = {
            text: "sample length: 18",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "F",
            scalegroup: "F",
            points: "all",
            pointpos: 0.45,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#bebada"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "positive",
            type: "violin",
            name: "F",
            span: [
                0
            ],
            line: {
                color: "#bebada"
            },
            y0: "Sunday",
            x: [
                16.99,
                24.59,
                35.26,
                14.83,
                10.33,
                16.97,
                10.29,
                34.81,
                25.71,
                17.31,
                29.85,
                25.0,
                13.39,
                16.21,
                17.51,
                9.6,
                20.9,
                18.15
            ],
            orientation: "h"
        }

var trace7 = {
            text: "sample length: 58",
            hoveron: "points+kde",
            meanline: {
                visible: true
            },
            legendgroup: "M",
            scalegroup: "M",
            points: "all",
            pointpos: -0.9,
            box: {
                visible: true
            },
            jitter: 0,
            scalemode: "count",
            marker: {
                line: {
                    width: 2,
                    color: "#8dd3c7"
                },
                symbol: "line-ns"
            },
            showlegend: false,
            side: "negative",
            type: "violin",
            name: "M",
            span: [
                0
            ],
            line: {
                color: "#8dd3c7"
            },
            y0: "Sunday",
            x: [
                10.34,
                21.01,
                23.68,
                25.29,
                8.77,
                26.88,
                15.04,
                14.78,
                10.27,
                15.42,
                18.43,
                21.58,
                16.29,
                17.46,
                13.94,
                9.68,
                30.4,
                18.29,
                22.23,
                32.4,
                28.55,
                18.04,
                12.54,
                9.94,
                25.56,
                19.49,
                38.07,
                23.95,
                29.93,
                14.07,
                13.13,
                17.26,
                24.55,
                19.77,
                48.17,
                16.49,
                21.5,
                12.66,
                13.81,
                24.52,
                20.76,
                31.71,
                7.25,
                31.85,
                16.82,
                32.9,
                17.89,
                14.48,
                34.63,
                34.65,
                23.33,
                45.35,
                23.17,
                40.55,
                20.69,
                30.46,
                23.1,
                15.69
            ],
            orientation: "h"
        }

var data = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]

var layout = {
        hovermode: "closest",
        width: 400,
        yaxis: {
            showgrid: true
        },
        title: "Total bill distribution<br><i>scaled by number of bills per gender",
        legend: {
            tracegroupgap: 0
        },
        violingap: 0,
        violingroupgap: 0,
        violinmode: "overlay",
        height: 700
    }

Plotly.plot(graphDiv, data, layout)



Parallel Categories Diagram in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
             
this uses rectanges to represent one trait and ribbons to represent shared traits in a target group, helps visualize which single traint or trait combo has the highest mode in the target group
             
Basic Parallel Categories Diagram

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var trace1 = {
  type: 'parcats',
  dimensions: [
    {label: 'Hair',
     values: ['Black', 'Black', 'Black', 'Brown',
              'Brown', 'Brown', 'Red', 'Brown']},
    {label: 'Eye',
     values: ['Brown', 'Brown', 'Brown', 'Brown',
              'Brown', 'Blue', 'Blue', 'Blue']},
    {label: 'Sex',
     values: ['Female', 'Female', 'Female', 'Male',
              'Female', 'Male', 'Male', 'Male']}]
};

var data = [ trace1 ];

var layout = {width: 600};

Plotly.newPlot('myDiv', data, layout);


Basic Parallel Categories Diagram with Counts

 if the frquency is know this can be specifed with the counts property
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                            
                            
var trace1 = {
  type: 'parcats',
  dimensions: [
    {label: 'Hair',
     values: ['Black', 'Brown', 'Brown', 'Brown', 'Red']},
    {label: 'Eye',
     values: ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},
    {label: 'Sex',
     values: ['Female', 'Male', 'Female', 'Male', 'Male']}],
  counts: [6, 10, 40, 23, 7]
};

var data = [ trace1 ];

var layout = {width: 600};

Plotly.newPlot('myDiv', data, layout);
                                                                        
                                                                        
Mutli-Color Parallel Categories Diagram

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
use color and colorScale to make meaningful differations in your chart
when arragement = 'freeform' you can move the rectangles arround for different views

var gd = document.getElementById('myDiv');

Plotly.d3.csv(
  "https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv",
  function(titanicData) {
    var classDim = {
      values: titanicData.map(function(row) {return row['Pclass']}),
      categoryorder: 'category ascending',
      label: "Class"
    };

    var genderDim = {
      values: titanicData.map(function(row) {return row['Sex']}),
      label: "Gender"
    };

    var survivalDim = {
      values: titanicData.map(function(row) {return row['Survived']}),
      label: "Outcome",
      categoryarray: [0, 1],
      ticktext: ['perished', 'survived'],
    };

    var color = survivalDim.values;
    var colorscale = [[0, 'lightsteelblue'], [1, 'mediumseagreen']];

    // Build Traces
    var traces = [
      {type: 'parcats',
       dimensions: [classDim, genderDim, survivalDim],
       line: {color: color,
              colorscale: colorscale},
       hoveron: 'color',
       hoverinfo: 'count+probability',
       labelfont: {size: 14},
       arrangement: 'freeform'
      }
    ];

    var layout = {width: 600};

    // Make plot
    Plotly.newPlot(gd, traces, layout);
  });
            
            
Parallel Categories Linked Brushing
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
so to have 2 or more charts in traces, you must have the objects one next to another in an array
                                                                        
var gd = document.getElementById('myDiv');
var categoricalDimensionLabels = [
  'body-style',
  'drive-wheels',
  'fuel-type'
];

Plotly.d3.csv(
  'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv',
  function(carsData) {
    // Preprocess Data
    var mpg = carsData.map(function(row) { return row['highway-mpg'] });
    var horsepower = carsData.map(function(row) { return row['horsepower'] });

    var categoricalDimensions = categoricalDimensionLabels.map(
      function(dimLabel) {
        // Extract column
        var values = carsData.map(function(row) {
          return row[dimLabel]
        });

        return {
          values: values,
          label: dimLabel
        };
      });

    // Colors
    var color = new Int8Array(carsData.length);
    var colorscale = [[0, 'gray'], [1, 'firebrick']];

    // Layout
    var layout = {
      width: 600,
      height: 800,
      xaxis: {title: 'Horsepower'},
      yaxis: {domain: [0.6, 1], title: 'MPG'},
      dragmode: 'lasso',
      hovermode: 'closest'
    };

    // Build Traces
    var traces = [
      {type: 'scatter',
       x: horsepower,
       y: mpg,
       marker: {color: 'gray'},
       mode: 'markers',
       selected: {'marker': {'color': 'firebrick'}},
       unselected: {'marker': {'opacity': 0.3}}
      },
      {type: 'parcats',
       domain: {y: [0, 0.4]},
       dimensions:categoricalDimensions,
       line: {
         colorscale: colorscale,
         cmin: 0,
         cmax: 1,
         color: color,
         shape: 'hspline'},
       labelfont: {size: 14}
      }
    ];

    // Make plot
    Plotly.newPlot(gd, traces, layout);

    // Update color on selection and click
    var update_color = function(points_data) {
      var new_color = new Int8Array(carsData.length);
      var selection = []
      for(var i = 0; i < points_data.points.length; i++) {
        new_color[points_data.points[i].pointNumber] = 1;
        selection.push(points_data.points[i].pointNumber);
      }

      // Update selected points in scatter plot
      Plotly.restyle(gd, {'selectedpoints': [selection]}, 0)

      // Update color of selected paths in parallel categories diagram
      Plotly.restyle(gd, {'line.color': [new_color]}, 1)
    };

    gd.on('plotly_selected', update_color);
    gd.on('plotly_click', update_color);
  });
            


Parallel Categories with Multi-Color Linked Brushing (incorrect radio buttons are not working properly)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
This example extends the previous example to support brushing with multiple colors. The radio buttons above may be used to select the active color, and this color will be applied when points are selected in the scatter trace and when categories or ribbons are clicked in the parcats trace.


you jave to apply functions and the radio boxes theirselves
var gd = document.getElementById('myDiv');
var categoricalDimensionLabels = [
  'body-style',
  'drive-wheels',
  'fuel-type'
];

Plotly.d3.csv(
  'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv',
  function(carsData) {
    // Preprocess Data
    var mpg = carsData.map(function(row) { return row['highway-mpg'] });
    var horsepower = carsData.map(function(row) { return row['horsepower'] });

    var categoricalDimensions = categoricalDimensionLabels.map(
      function(dimLabel) {
        // Extract column
        var values = carsData.map(function(row) {
          return row[dimLabel]
        });

        return {
          values: values,
          label: dimLabel
        };
      }
    );

    // Colors
    var color = new Int8Array(carsData.length);
    var colorscale = [[0, 'gray'], [0.33, 'gray'],
                      [0.33, 'firebrick'], [0.66, 'firebrick'],
                      [0.66, 'blue'], [1.0, 'blue']];

    // Layout
    var layout = {
      width: 600,
      height: 800,
      xaxis: {title: 'Horsepower'},
      yaxis: {domain: [0.6, 1], title: 'MPG'},
      dragmode: 'lasso',
      hovermode: 'closest'
    };

    // Build Traces
    var traces = [
      {type: 'scatter',
       x: horsepower,
       y: mpg,
       marker: {color: color,
                colorscale: colorscale,
                cmin: -0.5,
                cmax: 2.5,
                showscale: true,
                colorbar: {tickvals: [0, 1, 2],
                           ticktext: ['None', 'Red', 'Blue']}},
       mode: 'markers',
      },
      {type: 'parcats',
       domain: {y: [0, 0.4]},
       dimensions:categoricalDimensions,
       line: {
         colorscale: colorscale,
         cmin: -0.5,
         cmax: 2.5,
         color: color,
         shape: 'hspline'},
       labelfont: {size: 14}
      }
    ];

    // Make plot
    Plotly.newPlot(gd, traces, layout);

    // Update color on selection and click
    var update_color = function(points_data) {
      var new_color = color;
      var color_value = document.querySelector('input[name="rate"]:checked').value;
      console.log(color_value);
      var selection = []
      for(var i = 0; i < points_data.points.length; i++) {
        new_color[points_data.points[i].pointNumber] = color_value;
        selection.push(points_data.points[i].pointNumber);
      }

      // Update selected points in scatter plot
      Plotly.restyle(gd, {'marker.color': [new_color]}, 0)

      // Update color of selected paths in parallel categories diagram
      Plotly.restyle(gd,
                     {'line.color': [new_color]}, 1)
    };

    document.querySelector('#myDiv23').on('plotly_selected', update_color);
    document.querySelector('#myDiv23').on('plotly_click', update_color);
  });
            
Splom in plotly.js

 uncommon uses multiple scatterplots to determine the correlation (if any) between a series of variables.
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Splom of Iris Dataset
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
                             
var x = [];
var y = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
	y[i] = Math.random() + 1;
}

var data = [
  {
    x: x,
    y: y,
    type: 'histogram2dcontour'
  }
];
Plotly.newPlot('graph', data);

            
Splom of Diabetes Dataset
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    text = []
    for (i=0; i < unpack(rows, 'Outcome').length; i++) {
      if (unpack(rows, 'Outcome')[i] == "0") {
        text.push("Diabetic")
      } else {
        text.push("Non-Diabetic")
      }
    }

    var pl_colorscale=[
      [0.0, '#119dff'],
      [0.5, '#119dff'],
      [0.5, '#ef553b'],
      [1, '#ef553b']
    ]

    var axis = () => ({
      showline:false,
      zeroline:false,
      gridcolor:'#ffff',
      ticklen:2,
      tickfont:{size:10},
      titlefont:{size:12}
    })

    var data = [{
      type: 'splom',
      dimensions: [
        {label:'Pregnancies', values:unpack(rows, 'Pregnancies')},
        {label:'Glucose', values:unpack(rows, 'Glucose')},
        {label:'BloodPressure', values:unpack(rows, 'BloodPressure')},
        {label:'SkinThickness', values:unpack(rows, 'SkinThickness')},
        {label:'Insulin', values:unpack(rows, 'Insulin')},
        {label:'BMI', values:unpack(rows, 'BMI')},
        {label:'DiabPedigreeFun', values:unpack(rows, 'DiabetesPedigreeFunction')},
        {label:'Age', values:unpack(rows, 'Age')}
      ],
      text:text,
      marker: {
        color: unpack(rows, 'Outcome'),
        colorscale:pl_colorscale,
        size: 5,
        line: {
          color: 'white',
          width: 0.5
        }
      }
    }]

    var layout = {
      title:"Scatterplot Matrix (SPLOM) for Diabetes Dataset<br>Data source: <a href='https://www.kaggle.com/uciml/pima-indians-diabetes-database/data'>[1]</a>",
      height: 1000,
      width: 1000,
      autosize: false,
      hovermode:'closest',
      dragmode:'select',
      plot_bgcolor:'rgba(240,240,240, 0.95)',
      xaxis:axis(),
      yaxis:axis(),
      xaxis2:axis(),
      xaxis3:axis(),
      xaxis4:axis(),
      xaxis5:axis(),
      xaxis6:axis(),
      xaxis7:axis(),
      xaxis8:axis(),
      yaxis2:axis(),
      yaxis3:axis(),
      yaxis4:axis(),
      yaxis5:axis(),
      yaxis6:axis(),
      yaxis7:axis(),
      yaxis8:axis()
    }

    Plotly.react('graph', data, layout);

});
            

Scientifc Charts
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Log Plots in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Logarithmic Axes

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],
  type: 'scatter'
};

var trace2 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  type: 'scatter'
};

var data = [trace1, trace2];

var layout = {
  xaxis: {
    type: 'log',
    autorange: true
  },
  yaxis: {
    type: 'log',
    autorange: true
  }
};

Plotly.newPlot('myDiv0', data, layout);
                                                                        
Contour Plots in plotly.js

countor maps are used to highlight elevations
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Simple Contour Plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |

var size = 100, x = new Array(size), y = new Array(size), z = new Array(size), i, j;

for(var i = 0; i &lt; size; i++) {
	x[i] = y[i] = -2 * Math.PI + 4 * Math.PI * i / size;
  	z[i] = new Array(size);
}

for(var i = 0; i &lt; size; i++) {
  	for(j = 0; j < size; j++) {
    	var r2 = x[i]*x[i] + y[j]*y[j];
    	z[i][j] = Math.sin(x[i]) * Math.cos(y[j]) * Math.sin(r2) / Math.log(r2+1);
 	}
}

var data = [ {
		z: z,
		x: x,
		y: y,
		type: 'contour'
	}
];

Plotly.newPlot('myDiv', data);

            
Basic Contour Plot

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [ {
		z: [[10, 10.625, 12.5, 15.625, 20],
    [5.625, 6.25, 8.125, 11.25, 15.625],
    [2.5, 3.125, 5.0, 8.125, 12.5],
    [0.625, 1.25, 3.125, 6.25, 10.625],
    [0, 0.625, 2.5, 5.625, 10]],
		type: 'contour'
	}
];

var layout = {
  title: 'Basic Contour Plot'
}

Plotly.newPlot('myDiv', data, layout);
            
            
            
Setting X and Y Coordinates in a Contour Plot

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
var data = [{
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  x: [-9, -6, -5 , -3, -1],
  y: [0, 1, 4, 5, 7],
  type: 'contour'
}];

var layout = {
  title: 'Setting the X and Y Coordinates in a Contour Plot'
};

Plotly.newPlot('myDiv', data, layout);
                                                                                                                                                          
                                                                                                                                                                      
Colorscale for Contour Plot

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var data = [{
  z: [[10, 10.625, 12.5, 15.625, 20],
     [5.625, 6.25, 8.125, 11.25, 15.625],
     [2.5, 3.125, 5., 8.125, 12.5],
     [0.625, 1.25, 3.125, 6.25, 10.625],
     [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
}];

var layout = {
  title: 'Colorscale for Contour Plot'
};

Plotly.newPlot('myDiv', data, layout);



Customizing Size and Range of a Contour Plot's Contours
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
  autocontour: false,
  contours: {
    start: 0,
    end: 8,
    size: 2
  }
}];

var layout = {
  title: 'Customizing Size and Range of Contours'
};

Plotly.newPlot('myDiv', data, layout);

            
Customizing Spacing Between X and Y Ticks

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [{
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  x: [-4, -3, -5 , -3, -1],
  y: [0, 1, 4, 5, 5],
  type: 'contour'
}];

var layout = {
  title: 'Setting the X and Y Coordinates in a Contour Plot'
};

Plotly.newPlot('myDiv', data, layout);

Connect the Gaps between Null Values in the Z Matrix
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
var trace1 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  type: 'contour',
  showscale: false,
  xaxis: 'x1',
  yaxis: 'y1'
};

var trace2 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  connectgaps: true,
  type: 'contour',
  showscale: false,
  xaxis: 'x2',
  yaxis: 'y2'
};

var trace3 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  zsmooth: 'best',
  type: 'heatmap',
  showscale: false,
  xaxis: 'x3',
  yaxis: 'y3'
};

var trace4 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  zsmooth: 'best',
  type: 'heatmap',
  showscale: false,
  connectgaps: true,
  xaxis: 'x4',
  yaxis: 'y4'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Connect the Gaps Between Null Values in the Z Matrix',
  xaxis: {domain: [0, 0.45],
    anchor: 'y1'},
  yaxis: {domain: [0.55, 1],
    anchor: 'x1'},
  xaxis2: {domain: [0.55, 1],
    anchor: 'y2'},
  yaxis2: {domain: [0.55, 1],
    anchor: 'x2'},
  xaxis3: {domain: [0, 0.45],
    anchor: 'y3'},
  yaxis3: {domain: [0, 0.45],
    anchor: 'x3'},
  xaxis4: {domain: [0.55, 1],
    anchor: 'y4'},
  yaxis4: {domain: [0, 0.45],
    anchor: 'x4'}
};

Plotly.newPlot('myDiv', data, layout);
                                                                        
            
Smoothing Contour Lines

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
var data = [ {
  z: [[2, 4, 7, 12, 13, 14, 15, 16],
   [3, 1, 6, 11, 12, 13, 16, 17],
   [4, 2, 7, 7, 11, 14, 17, 18],
   [5, 3, 8, 8, 13, 15, 18, 19],
   [7, 4, 10, 9, 16, 18, 20, 19],
   [9, 10, 5, 27, 23, 21, 21, 21],
   [11, 14, 17, 26, 25, 24, 23, 22]],
  type: 'contour',
  line:{
    smoothing: 0
  },
  xaxis: 'x1',
  yaxis: 'y1'
},
{
  z: [[2, 4, 7, 12, 13, 14, 15, 16],
   [3, 1, 6, 11, 12, 13, 16, 17],
   [4, 2, 7, 7, 11, 14, 17, 18],
   [5, 3, 8, 8, 13, 15, 18, 19],
   [7, 4, 10, 9, 16, 18, 20, 19],
   [9, 10, 5, 27, 23, 21, 21, 21],
   [11, 14, 17, 26, 25, 24, 23, 22]],
  type: 'contour',
  line:{
    smoothing: 0.85
  },
  xaxis: 'x2',
  yaxis: 'y2'
}];

var layout = {
  title: 'Smoothing Contour Lines',
  xaxis: {domain: [0, 0.45],
     anchor: 'y1'},
  yaxis: {domain: [0, 1],
         anchor: 'x1'},
  xaxis2: {domain: [0.55, 1],
         anchor: 'y2'},
  yaxis2: {domain: [0, 1],
         anchor: 'x2'}
};

Plotly.newPlot('myDiv', data, layout);
            
            
Smooth Contour Coloring
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  contours: {
    coloring: 'heatmap'
  }
}];

var layout = {
  title: 'Smooth Contour Coloring'
};

Plotly.newPlot('myDiv', data, layout);
 

Contour Lines
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
  contours:{
    coloring: 'lines'
  }
}];

var layout = {
  title: 'Contour Lines'
};

Plotly.newPlot('myDiv', data, layout);


            
Contour Line Labels
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
      [5.625, 6.25, 8.125, 11.25, 15.625],
      [2.5, 3.125, 5.0, 8.125, 12.5],
      [0.625, 1.25, 3.125, 6.25, 10.625],
      [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  contours: {
    coloring: 'heatmap',
    showlabels: true,
    labelfont: {
      family: 'Raleway',
      size: 12,
      color: 'white',
    }
  }
}];

var layout = {
  title: 'Contour with Labels'
}

Plotly.newPlot('myDiv', data, layout);
                                                                        
                                                                        
            
Custom Colorscale for Contour Plot

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: [[0, 'rgb(166,206,227)'], [0.25, 'rgb(31,120,180)'], [0.45, 'rgb(178,223,138)'], [0.65, 'rgb(51,160,44)'], [0.85, 'rgb(251,154,153)'], [1, 'rgb(227,26,28)']]
}
];

var layout = {
  title: 'Custom Contour Plot Colorscale'
};

Plotly.newPlot('myDiv', data, layout);


            
Color Bar Title
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorbar:{
    title: 'Color Bar Title',
    titleside: 'right',
    titlefont: {
      size: 14,
      family: 'Arial, sans-serif'
    }
  }
}];

var layout = {
  title: 'Colorbar with a Title'
};

Plotly.newPlot('myDiv13', data, layout);
                                                                        

            
Color Bar Size

            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorbar:{
    thickness: 75,
    thicknessmode: 'pixels',
    len: 0.9,
    lenmode: 'fraction',
    outlinewidth: 0
  }
}];

var layout = {
  title: 'Colorbar Size for Contour Plots'
};

Plotly.newPlot('myDiv', data, layout);


            
Heatmaps in plotly.js
            
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
Heatmap with Unequal Block Sizes

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                  
            
//number of spiral loops

var nspiral = 2;

// angle

var th = numeric.linspace(((-Math.PI) / 13), (2 * Math.PI * nspiral), 1000);

//Empty Value Containers

var xValues = [];
var yValues = [];
var yShift = [];
var finalX = [];
var finalY = [];

//spiral

for(var i = 0; i &lt;th.length; i++){
  var a = 1.120529;
  var b = 0.306349;
  var r = a * Math.exp((-b) * th[i]);
  var xResult = (r * Math.cos(th[i]));
  var yResult = (r * Math.sin(th[i]));
  xValues.push(xResult);
  yValues.push(yResult);
}

function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
};

function getMinOfArray(numArray) {
  return Math.min.apply(null, numArray);
};

//Shift spiral north so that it is centered

var yShift = (1.6 - (getMaxOfArray(yValues) - getMinOfArray(yValues))) / 2;

var spiralTrace = {
  x: xValues.map(function(xi) { return -(xi) + xValues[0]; }),
  y: yValues.map(function(yi) { return yi - yValues[0] + yShift; }),
  type: 'scatter',
  line: {
    color: 'white',
    width: 3
  }
};

//Build the rectangles as a heatmap and specify the edges of the heatmap squares

var phi = (1 + Math.sqrt(5)) / 2;
var xe = [0, 1, (1 + (1 / Math.pow(phi,4))), 1 + (1 / Math.pow(phi,3)), phi];
var ye = [0, (1 / Math.pow(phi,3)), (1 / Math.pow(phi,3)) + (1 / Math.pow(phi,4)), (1 / Math.pow(phi,2)), 1];

var zValues = [
  [13, 3, 3, 5],
  [13, 2, 1, 5],
  [13, 10, 11, 12],
  [13, 8, 8, 8]
];

var hm = {
  x: xe,
  y: ye.map(function(yi) { return yi + yShift; }),
  z: zValues,
  type: 'heatmap',
  colorscale: 'Viridis'
};

var axisTemplate = {
  range: [0, 1.6],
  autorange: false,
  showgrid: false,
  zeroline: false,
  linecolor: 'black',
  showticklabels: false,
  ticks: ''
};

var data = [spiralTrace, hm];

var layout = {
  title: 'Heatmap with Unequal Block Sizes',
  margin: {
    t: 200,
    r: 200,
    b: 200,
    l: 200
  },
  xaxis: axisTemplate,
  yaxis: axisTemplate,
  showlegend: false,
  with: 700,
  height: 700,
  autosize: false
};

Plotly.newPlot('myDiv', data, layout);


Basic Heatmap
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
var data = [
  {
    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],
    type: 'heatmap'
  }
];

Plotly.newPlot('myDiv', data);
            


Annotated Heatmap
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var xValues = ['A', 'B', 'C', 'D', 'E'];

var yValues = ['W', 'X', 'Y', 'Z'];

var zValues = [
  [0.00, 0.00, 0.75, 0.75, 0.00],
  [0.00, 0.00, 0.75, 0.75, 0.00],
  [0.75, 0.75, 0.75, 0.75, 0.75],
  [0.00, 0.00, 0.00, 0.75, 0.00]
];

var colorscaleValue = [
  [0, '#3D9970'],
  [1, '#001f3f']
];

var data = [{
  x: xValues,
  y: yValues,
  z: zValues,
  type: 'heatmap',
  colorscale: colorscaleValue,
  showscale: false
}];

var layout = {
  title: 'Annotated Heatmap',
  annotations: [],
  xaxis: {
    ticks: '',
    side: 'top'
  },
  yaxis: {
    ticks: '',
    ticksuffix: ' ',
    width: 700,
    height: 700,
    autosize: false
  }
};

for ( var i = 0; i &lt; yValues.length; i++ ) {
  for ( var j = 0; j < xValues.length; j++ ) {
    var currentValue = zValues[i][j];
    if (currentValue != 0.0) {
      var textColor = 'white';
    }else{
      var textColor = 'black';
    }
    var result = {
      xref: 'x1',
      yref: 'y1',
      x: xValues[j],
      y: yValues[i],
      text: zValues[i][j],
      font: {
        family: 'Arial',
        size: 12,
        color: 'rgb(50, 171, 96)'
      },
      showarrow: false,
      font: {
        color: textColor
      }
    };
    layout.annotations.push(result);
  }
}

Plotly.newPlot('myDiv', data, layout);
            



Heatmap with Categorical Axis Labels

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
var data = [
  {
    z: [[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
    x: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    y: ['Morning', 'Afternoon', 'Evening'],
    type: 'heatmap'
  }
];

Plotly.newPlot('myDiv', data);
                                                                                                                                                          

WebGL Heatmaps in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 WebGL Heatmaps
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function HeatmapGLfromImage() {
    var img = new Image();
    img.setAttribute(
        "src",
        processdata(
            "https://images.plot.ly/plotly-documentation/images/heatmap-galaxy.jpg")
    );
}
function processdata(url) {
    var canvas = document.getElementById("canvas");
    var img = new Image();
    img.crossOrigin = "anonymous";
    img.src = url;
    var context = canvas.getContext("2d");
    context.drawImage(img, 0, 0);
    var w = img.width; var h = img.height;
    var l = w * h;
    var arr = context.getImageData(0, 0, w, h).data;

    var zdata = [];
    for (var i = 0; i < l; i++) {
        // get color of pixel
        var r = arr[i * 4]; // Red
        var g = arr[i * 4 + 1]; // Green
        var b = arr[i * 4 + 2]; // Blue
        var a = arr[i * 4 + 3]; // Alpha
        zdata.push(r + g + b + a);
    }
    var createGroupedArray = function(arr, chunkSize) {
        var groups = [],
            i;
        for (i = 0; i < arr.length; i += chunkSize) {
            groups.push(arr.slice(i, i + chunkSize));
        }
        return groups;
    };
    // Grouping zdata into 500x500
    var zdata = createGroupedArray(zdata, 500);

    var data = [
        {
            z: zdata,
            type: "heatmapgl",
            colorscale: "Picnic"
        }
    ];

    Plotly.plot("myDiv", data);
}

HeatmapGLfromImage();
      
Wind Rose Charts in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Wind Rose Chart
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var trace1 = {
  r: [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],
  t: ['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
  name: '11-14 m/s',
  marker: {color: 'rgb(106,81,163)'},
  type: 'barpolar'
};

var trace2 = {
  r: [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],
  t: ['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
  name: '8-11 m/s',
  marker: {color: 'rgb(158,154,200)'},
  type: 'barpolar'
};

var trace3 = {
  r: [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],
  t: ['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
  name: '5-8 m/s',
  marker: {color: 'rgb(203,201,226)'},
  type: 'barpolar'
};

var trace4 = {
  r: [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],
  t: ['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
  name: '&lt; 5 m/s',
  marker: {color: 'rgb(242,240,247)'},
  type: 'barpolar'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: 'Wind Speed Distribution in Laurel, NE',
  font: {size: 16},
  legend: {font: {size: 16}},
  radialaxis: {ticksuffix: '%'},
  orientation: 270
};

Plotly.newPlot('myDiv', data, layout);
            



Ternary Plots in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
            
Basic Ternary Plot with Markers
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var rawData = [
    {journalist:75,developer:25,designer:0,label:'point 1'},
    {journalist:70,developer:10,designer:20,label:'point 2'},
    {journalist:75,developer:20,designer:5,label:'point 3'},
    {journalist:5,developer:60,designer:35,label:'point 4'},
    {journalist:10,developer:80,designer:10,label:'point 5'},
    {journalist:10,developer:90,designer:0,label:'point 6'},
    {journalist:20,developer:70,designer:10,label:'point 7'},
    {journalist:10,developer:20,designer:70,label:'point 8'},
    {journalist:15,developer:5,designer:80,label:'point 9'},
    {journalist:10,developer:10,designer:80,label:'point 10'},
    {journalist:20,developer:10,designer:70,label:'point 11'},
];

Plotly.plot('graph', [{
    type: 'scatterternary',
    mode: 'markers',
    a: rawData.map(function(d) { return d.journalist; }),
    b: rawData.map(function(d) { return d.developer; }),
    c: rawData.map(function(d) { return d.designer; }),
    text: rawData.map(function(d) { return d.label; }),
    marker: {
        symbol: 100,
        color: '#DB7365',
        size: 14,
        line: { width: 2 }
    },
}], {
    ternary: {
        sum: 100,
        aaxis: makeAxis('Journalist', 0),
        baxis: makeAxis('<br>Developer', 45),
        caxis: makeAxis('<br>Designer', -45),
        bgcolor: '#fff1e0'
    },
    annotations: [{
      showarrow: false,
      text: 'Replica of Tom Pearson\'s <a href="http://bl.ocks.org/tomgp/7674234">block</a>',
        x: 1.0,
        y: 1.3,
        font: { size: 15 }
    }],
    paper_bgcolor: '#fff1e0',
});

function makeAxis(title, tickangle) {
    return {
      title: title,
      titlefont: { size: 20 },
      tickangle: tickangle,
      tickfont: { size: 15 },
      tickcolor: 'rgba(0,0,0,0)',
      ticklen: 5,
      showline: true,
      showgrid: true
    };
}
                                                                        

            
Soil Types Ternary Plot

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
var url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json';

Plotly.d3.json(url, function(err, rawData) {
    if(err) throw err;

    plot(rawData);
});

function plot(rawData) {
    var data = Object.keys(rawData).map(function(k) {
        var pts = rawData[k];

        return {
            type: 'scatterternary',
            mode: 'lines',
            name: k,
            a: pts.map(function(d) { return d.clay }),
            b: pts.map(function(d) { return d.sand }),
            c: pts.map(function(d) { return d.silt }),
            line: { color: '#c00' }
        };
    });

    var layout = {
        ternary: {
            sum: 100,
            aaxis: makeAxis('Clay'),
            baxis: makeAxis('Sand'),
            caxis: makeAxis('Silt')
        },
        showlegend: false,
        width: 700,
        annotations: [{
            showarrow: false,
            text: 'Replica of Daven Quinn\'s <a href="http://bl.ocks.org/davenquinn/988167471993bc2ece29">block</a>',
            x: 0.15,
            y: 1.1
        }]
    };

    Plotly.plot('graph', data, layout);
}

function makeAxis(title) {
  return {
      title: title,
      ticksuffix: '%',
      min: 0.01,
      linewidth: 2,
      ticks: 'outside',
      ticklen: 8,
      showgrid: true,
  };
}

Ternary Contour Plots in plotly.js
            
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 Basic Filled Ternary Contour Plot


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json';

var colors = ['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f'];


Plotly.d3.json(url, function(err, rawData) {
    if(err) throw err;

    plot(rawData);
});

function plot(rawData) {
    var data = Object.keys(rawData).map(function(k, i) {
        var pts = rawData[k];
        pts = pts.concat(pts[0]);

        return {
            type: 'scatterternary',
            mode: 'lines',
            name: k,
            a: pts.map(function(d) { return d.clay }),
            b: pts.map(function(d) { return d.sand }),
            c: pts.map(function(d) { return d.silt }),
            line: { color: '#444' },
            fill: 'toself',
            fillcolor: colors[i],
            hoveron:'fills+points'
        };
    });

    var layout = {
        ternary: {
            sum: 100,
            aaxis: makeAxis('Clay'),
            baxis: makeAxis('Sand'),
            caxis: makeAxis('Silt')
        },
        showlegend: false,
        width: 700,
        annotations: [{
            showarrow: false,
            text: 'Soil Types Fill Plot',
            x: 0.15,
            y: 1.1
        }]
    };

    Plotly.plot('graph', data, layout);
}

function makeAxis(title) {
  return {
      title: title,
      ticksuffix: '%',
      min: 0.01,
      linewidth: 2,
      ticks: 'outside',
      ticklen: 8,
      showgrid: true,
  };
}
 
 
Radar Charts in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
       
Basic Radar Chart

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
data = [{
  type: 'scatterpolar',
  r: [39, 28, 8, 7, 28, 39],
  theta: ['A','B','C', 'D', 'E', 'A'],
  fill: 'toself'
}]

layout = {
  polar: {
    radialaxis: {
      visible: true,
      range: [0, 50]
    }
  },
  showlegend: false
}

Plotly.plot("myDiv", data, layout)
                                                                        
            
Multiple Trace Radar Chart

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
data = [
  {
  type: 'scatterpolar',
  r: [39, 28, 8, 7, 28, 39],
  theta: ['A','B','C', 'D', 'E', 'A'],
  fill: 'toself',
  name: 'Group A'
  },
  {
  type: 'scatterpolar',
  r: [1.5, 10, 39, 31, 15, 1.5],
  theta: ['A','B','C', 'D', 'E', 'A'],
  fill: 'toself',
  name: 'Group B'
  }
]

layout = {
  polar: {
    radialaxis: {
      visible: true,
      range: [0, 50]
    }
  }
}

Plotly.plot("myDiv", data, layout)
            
Parallel Coordinates Plot in plotly.js
          
          
Add Points and Contours
To add points and lines see Carpet Scatter Plots or to add contours see Carpet Contour Plots
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
Adding Dimensions
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                 
                 
var trace = {
  type: 'parcoords',
  line: {
    color: 'blue'
  },
  
  dimensions: [{
    range: [1, 5],
    constraintrange: [1, 2],
    label: 'A',
    values: [1,4]
  }, {
    range: [1,5],
    label: 'B',
    values: [3,1.5],
    tickvals: [1.5,3,4.5]
  }, {
    range: [1, 5],
    label: 'C',
    values: [2,4],
    tickvals: [1,2,4,5],
    ticktext: ['text 1','text 2','text 4','text 5']
  }, {
    range: [1, 5],
    label: 'D',
    values: [4,2]
  }]
};

var data = [trace]

Plotly.plot('graphDiv', data);
                 
                 
                 
                 
                 
                  
/* Basic Parallel Coordinates Plot*/ //{
{
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv', function(err, rows){
      
function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var data = [{
  type: 'parcoords',
  pad: [80,80,80,80],
  line: {
    color: unpack(rows, 'species_id'),
    colorscale: [[0, 'red'], [0.5, 'green'], [1, 'blue']]
  },

  dimensions: [{
    range: [2, 4.5],
    label: 'sepal_width',
    values: unpack(rows, 'sepal_width')
  }, {
    constraintrange: [5, 6],
    range: [4,8],
    label: 'sepal_length',
    values: unpack(rows, 'sepal_length')
  }, {
    label: 'petal_width',
    range: [0, 2.5],
    values: unpack(rows, 'petal_width')
  }, {
    label: 'petal_length',
    range: [1, 7],
    values: unpack(rows, 'petal_length')
  }]
}];

var layout = {
  width: 800
};

Plotly.plot('graphDiv', data, layout);
  
});

Carpet Plot in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Set X and Y Coordinates
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = {
    type: 'carpet',
    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
}

var data = [data]

Plotly.plot('plotly-div', data);

var data = {
    type: 'carpet',
    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
}

var data = [data]

Plotly.plot('plotly-div', data);
      
      
                                                                                                                                                                                                                                             
Add A and B axis

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            

var data = {
    type: 'carpet',
    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis: {
      tickprefix: 'a = ',
      ticksuffix: 'm',
      smoothing: 1,
      minorgridcount: 9
    },
    baxis: {
      tickprefix: 'b = ',
      ticksuffix: 'Pa',
      smoothing: 1,
      minorgridcount: 9
    }
}

var data = [data]

Plotly.plot('myDiv32', data);
            
            
            
            
            
Style A and B axis
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                
var trace1 = {
    type: "carpet",
    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis: {
        tickprefix: 'a = ',
        ticksuffix: 'm',
        smoothing: 1,
        minorgridcount: 9,
        minorgridcolor: 'white',
        gridcolor: 'white',
        color: 'white'
    },
    baxis: {
        tickprefix: 'b = ',
        ticksuffix: 'pa',
        smoothing: 1,
        minorgridcount: 9,
        minorgridcolor: 'white',
        gridcolor: 'white',
        color: 'white'
    }
}

var layout = {
  plot_bgcolor: 'black',
  paper_bgcolor: 'black'
}

Plotly.plot('myDiv33', [trace1], layout)
                                                                        
            
Carpet Contour Plot in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
Basic Carpet Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

var trace1  = {
    type: 'carpet',
    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x: [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y: [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis: {
      tickprefix: "a = ",
      smoothing: 0,
      minorgridcount: 9,
      type: 'linear'
},
    baxis: {
      tickprefix: "b = ",
      smoothing: 0,
      minorgridcount: 9,
      type: 'linear'
    }
}

var layout = {
    title: "Cheater plot with 1d input",
    margin: {
      t: 40, r: 30, b: 30, l: 30
    },
    yaxis: {
      range: [0.388,4.361]
    },
    xaxis: {
      range: [0.667,5.932]
    }
}

var data = [trace1]

Plotly.plot('plotly-div', data, layout)



                  
Add Contours
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var trace1 = {
    type: 'contourcarpet',
    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    z: [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],
    autocontour: false,
    contours: {
      start: 1,
      end: 14,
      size: 1
    },
    line: {
      width: 2,
      smoothing: 0
    },
    colorbar: {
      len: 0.4,
      y: 0.25
    }
}

var trace2  = {
    type: 'carpet',
    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x: [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y: [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis: {
      tickprefix: "a = ",
      smoothing: 0,
      minorgridcount: 9,
      type: 'linear'
},
    baxis: {
      tickprefix: "b = ",
      smoothing: 0,
      minorgridcount: 9,
      type: 'linear'
    }
}

var layout = {
    title: "Cheater plot with 1d input",
    margin: {
      t: 40, r: 30, b: 30, l: 30
    },
    yaxis: {
      range: [0.388,4.361]
    },
    xaxis: {
      range: [0.667,5.932]
    }
}

var data = [trace1,trace2]

Plotly.plot('plotly-div', data, layout)
            
            

Add Multiple Traces
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                        
function Get(url){
    var Httpreq = new XMLHttpRequest();
    Httpreq.open("GET",url,false);
    Httpreq.send(null);
    return Httpreq.responseText;
}

var json_obj = JSON.parse(Get("https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json"));

var trace1 = {
      a: json_obj[0].a,
      b: json_obj[0].b,
      baxis: {
        startline: false,
        endline: false,
        showticklabels: "none",
        smoothing: 0,
        showgrid: false
      },
      x: json_obj[0].x,
      y: json_obj[0].y,
      type: "carpet",
      aaxis:{
        startlinewidth: 2,
        startline: true,
        showticklabels: "none",
        endline: true,
        showgrid: false,
        endlinewidth: 2,
        smoothing: 0
      }
    }

 var trace2 = {
      autocolorscale: false,
      zmax: 1,
      name: "Pressure",
      colorscale: "Viridis",
      zmin: -8,
      colorbar: {
        y: 0,
        yanchor: "bottom",
        titleside: "right",
        len: 0.75,
        title: "Pressure coefficient, c<sub>p</sub>"
      },
      contours: {
        start: -1,
        size: 0.025,
        end: 1.000,
        showlines: false
      },
      line: {
        smoothing: 0
      },
      z: json_obj[1].z,
      type: "contourcarpet",
      autocontour: false,
      zauto: false
    }

 var trace3 = {
      opacity: 0.300,
      showlegend: true,
      name: "Streamlines",
      autocontour: true,
      ncontours: 50,
      contours: {
        coloring: "none"
      },
      line: {
        color: "white",
        width: 1
      },
      z: json_obj[2].z,
      type: "contourcarpet"
    }

 var trace4 = {
      showlegend: true,
      name: "Pressure<br>contours",
      autocontour: false,
      z: json_obj[3].z,
      type: "contourcarpet",
      line: {
        color: "rgba(0, 0, 0, 0.5)",
        smoothing: 1
      },
      contours: {
        size: 0.250,
        start: -4,
        coloring: "none",
        end: 1.000,
        showlines: true
      }
    }

 var trace5 = {
      legendgroup: "g1",
      name: "Surface<br>pressure",
      mode: "lines",
      hoverinfo: "skip",
      x: json_obj[4].x,
      y: json_obj[4].y,
      line: {
        color: "rgba(255, 0, 0, 0.5)",
        width: 1,
        shape: "spline",
        smoothing: 1
      },
      fill: "toself",
      type: "scatter",
      fillcolor: "rgba(255, 0, 0, 0.2)"
    }

 var trace6 = {
      showlegend: false,
      legendgroup: "g1",
      mode: "lines",
      hoverinfo: "skip",
      x: json_obj[5].x,
      y: json_obj[5].y,
      line: {
        color: "rgba(255, 0, 0, 0.3)",
        width: 1
      },
      type: "scatter"
    }

 var trace7 = {
      showlegend: false,
      legendgroup: "g1",
      name: "cp",
      text: json_obj[6].text,
      mode: "lines",
      hoverinfo: "text",
      x: json_obj[6].x,
      y: json_obj[6].y,
      line: {
        color: "rgba(255, 0, 0, 0.2)",
        width: 0
      },
      type: "scatter"
    }

data = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]

var layout = {
    yaxis: {
      zeroline: false,
      range: [-1.800,1.800],
      showgrid: false
    },
    dragmode: "pan",
    height: 700,
    xaxis: {
      zeroline: false,
      scaleratio: 1,
      scaleanchor: "y",
      range: [-3.800,3.800],
      showgrid: false
    },
    title: "Flow over a Karman-Trefftz airfoil",
    hovermode: "closest",
    margin: {
      r: 60,
      b: 40,
      l: 40,
      t: 80
    },
    width: 900
  }

Plotly.plot('plotly-div', data, layout);

            
Polar Charts in plotly.js

             .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Line Polar Plot
 
 Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

var trace1 = {
  r: unpack(rows, 'x1'),
  theta: unpack(rows, 'y'),
  mode: 'lines',
  name: 'Figure8',
  line: {color: 'peru'},
  type: 'scatterpolar'
};

var trace2 = {
  r: unpack(rows, 'x2'),
  theta: unpack(rows, 'y'),
  mode: 'lines',
  name: 'Cardioid',
  line: {color: 'darkviolet'},
  type: 'scatterpolar'
};

var trace3 = {
  r: unpack(rows, 'x3'),
  theta: unpack(rows, 'y'),
  mode: 'lines',
  name: 'Hypercardioid',
  line: {color: 'deepskyblue'},
  type: 'scatterpolar'
};

var trace4 = {

  r: unpack(rows, 'x4'),
  theta: unpack(rows, 'y'),
  mode: 'lines',
  name: 'Subcardioid',
  line: {color: 'orangered'},
  type: 'scatterpolar'
};

var trace5 = {

  r: unpack(rows, 'x5'),
  theta: unpack(rows, 'y'),
  mode: 'lines',
  name: 'Supercardioid',
  marker: {
    color: 'none',
    line: {color: 'green'}
  },
  type: 'scatterpolar'
};

var data = [trace1, trace2, trace3, trace4, trace5];

var layout = {
  title: 'Mic Patterns',
  font: {
    family: 'Arial, sans-serif;',
    size: 12,
    color: '#000'
  },
  showlegend: true,
  orientation: -90
};
Plotly.plot('myDiv', data, layout);
});
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
            
Area Polar Chart


data = [
  {
    type: "scatterpolar",
    mode: "lines",
    r: [0, 1.5, 1.5, 0, 2.5, 2.5, 0],
    theta: [0, 10, 25, 0, 205, 215, 0],
    fill: "toself",
    fillcolor: '#709BFF',
    line: {
      color: 'black'
    }
  },
  {
    type: "scatterpolar",
    mode: "lines",
    r: [0, 3.5, 3.5, 0],
    theta: [0, 55, 75, 0],
    fill: "toself",
    fillcolor: '#E4FF87',
    line: {
      color: 'black'
    }
  },
  {
    type: "scatterpolar",
    mode: "lines",
    r: [0, 4.5, 4.5, 0, 4.5, 4.5, 0],
    theta: [0, 100, 120, 0, 305, 320, 0],
    fill: "toself",
    fillcolor: '#FFAA70',
    line: {
      color: 'black'
    }
  },
  {
    type: "scatterpolar",
    mode: "lines",
    r: [0, 4, 4, 0],
    theta: [0, 165, 195, 0],
    fill: "toself",
    fillcolor: '#FFDF70',
    line: {
      color: 'black'
    }
  },
  {
    type: "scatterpolar",
    mode: "lines",
    r: [0, 3, 3, 0],
    theta: [0, 262.5, 277.5, 0],
    fill: "toself",
    fillcolor: '#B6FFB4',
    line: {
      color: 'black'
    }
  }
]

layout = {
  polar: {
    radialaxis: {
      visible: true,
      range: [0, 5]
    }
  },
  showlegend: false
}

Plotly.newPlot('myDiv', data, layout)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
                                                                        
            
Categorical Polar Chart
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [
    {
      type: "scatterpolar",
      name: "angular categories",
      r: [5, 4, 2, 4, 5],
      theta: ["a", "b", "c", "d", "a"],
      fill: "toself"
    },
    {
      type: "scatterpolar",
      name: "radial categories",
      r: ["a", "b", "c", "d", "b", "f", "a"],
      theta: [1, 4, 2, 1.5, 1.5, 6, 5],
      thetaunit: "radians",
      fill: "toself",
      subplot: "polar2"
    },
    {
      type: "scatterpolar",
      name: "angular categories (w/ categoryarray)",
      r: [5, 4, 2, 4, 5],
      theta: ["a", "b", "c", "d", "a"],
      fill: "toself",
      subplot: "polar3"
    },
    {
      type: "scatterpolar",
      name: "radial categories (w/ category descending)",
      r: ["a", "b", "c", "d", "b", "f", "a", "a"],
      theta: [45, 90, 180, 200, 300, 15, 20, 45],
      fill: "toself",
      subplot: "polar4"
    },
    {
      type: "scatterpolar",
      name: "angular categories (w/ extra category)",
      r: [5, 4, 2, 4, 5, 5],
      theta: ["b", "c", "d", "e", "a", "b"],
      fill: "toself"
    }
  ]

var layout = {
    polar: {
      domain: {
        x: [0, 0.46],
        y: [0.56, 1]
      },
      radialaxis: {
        angle: 45
      },
      angularaxis: {
        direction: "clockwise",
        period: 6
      }
    },
    polar2: {
      domain: {
        x: [0, 0.46],
        y: [0, 0.44]
      },
      radialaxis: {
        angle: 180,
        tickangle: -180
      }
    },
    polar3: {
      domain: {
        x: [0.54, 1],
        y: [0.56, 1]
      },
      sector: [150, 400],
      radialaxis: {
        angle: -45
      },
      angularaxis: {
        categoryarray: ["d", "a", "c", "b"]
      }
    },
    polar4: {
      domain: {
        x: [0.54, 1],
        y: [0, 0.44]
      },
      radialaxis: {
        categoryorder: "category descending"
      },
      angularaxis: {
        thetaunit: "radians",
        dtick: 0.3141592653589793
      }
    }
  }

Plotly.newPlot('myDiv', data, layout)
            
            
            
Polar Chart Directions

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
var data = [
    {
      type: "scatterpolar",
      mode: "lines+markers",
      r: [1,2,3,4,5],
      theta: [0,90,180,360,0],
      line: {
        color: "#ff66ab"
      },
      marker: {
        color: "#8090c7",
        symbol: "square",
        size: 8
      },
      subplot: "polar"
    },
    {
      type: "scatterpolar",
      mode: "lines+markers",
      r: [1,2,3,4,5],
      theta: [0,90,180,360,0],
      line: {
        color: "#ff66ab"
      },
      marker: {
        color: "#8090c7",
        symbol: "square",
        size: 8
      },
      subplot: "polar2"
    }
  ]

var layout = {
    showlegend: false,
    polar: {
      domain: {
        x: [0,0.4],
        y: [0,1]
      },
      radialaxis: {
        tickfont: {
          size: 8
        }
      },
      angularaxis: {
        tickfont: {
          size: 8
        },
        rotation: 90,
        direction: "counterclockwise"
      }
    },
    polar2: {
      domain: {
        x: [0.6,1],
        y: [0,1]
      },
      radialaxis: {
        tickfont: {
          size: 8
        }
      },
      angularaxis: {
        tickfont: {
          size: 8
        },
        direction: "clockwise"
      }
    }
  }

Plotly.plot('myDiv', data, layout)
                                                                                                                                                          
                                                                                                                                                          
                                                                                                                                                                      
Polar Chart Sector

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
var data = [
    {
      type: "scatterpolar",
      mode: "lines+markers",
      r: [1,2,3,4,5],
      theta: [0,90,180,360,0],
      line: {
        color: "#ff66ab"
      },
      marker: {
        color: "#8090c7",
        symbol: "square",
        size: 8
      },
      subplot: "polar"
    },
    {
      type: "scatterpolar",
      mode: "lines+markers",
      r: [1,2,3,4,5],
      theta: [0,90,180,360,0],
      line: {
        color: "#ff66ab"
      },
      marker: {
        color: "#8090c7",
        symbol: "square",
        size: 8
      },
      subplot: "polar2"
    }
  ]

var layout = {
    showlegend: false,
    polar: {
		sector: [145,215],
      domain: {
        x: [0,0.4],
        y: [0,1]
      },
      radialaxis: {
        tickfont: {
          size: 8
        }
      },
      angularaxis: {
        tickfont: {
          size: 8
        }
      }
    },
    polar2: {
      domain: {
        x: [0.6,1],
        y: [0,1]
      },
      radialaxis: {
        tickfont: {
          size: 8
        }
      },
      angularaxis: {
        tickfont: {
          size: 8
        }
      }
    }
  }

Plotly.plot('myDiv', data, layout)
            
            
            
Polar Chart Subplots

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        

var data = [{
    type: "scatterpolargl",
    r: [1, 2, 3],
    theta: [50, 100, 200],
    marker: {symbol: "square"}
  }, {
    type: "scatterpolargl",
    r: [1, 2, 3],
    theta: [1, 2, 3],
    thetaunit: "radians"
  }, {
    type: "scatterpolargl",
    r: ["a", "b", "c", "b"],
    theta: ["D", "C", "B", "A"],
    subplot: "polar2"
  }, {
    type: "scatterpolargl",
    r: [50, 300, 900],
    theta: [0, 90, 180],
    subplot: "polar3"
  }, {
    type: "scatterpolargl",
    mode: "lines",
    r: [3, 3, 4, 3],
    theta: [0, 45, 90, 270],
    fill: "toself",
    subplot: "polar4"
  }]

var layout =  {
    polar: {
      domain: {
        x: [0, 0.46],
        y: [0.56, 1]
      },
      radialaxis: {
        range: [1, 4]
      },
      angularaxis: {
        thetaunit: "radians"
      }
    },
    polar2: {
      domain: {
        x: [0, 0.46],
        y: [0, 0.42]
      }
    },
    polar3: {
      domain: {
        x: [0.54, 1],
        y: [0.56, 1]
      },
      radialaxis: {
        type: "log",
        tickangle: 45
      },
      sector: [0, 180]
    },
    polar4: {
      domain: {
        x: [0.54, 1],
        y: [0, 0.44]
      },
      radialaxis: {
          visible: false,
          range: [0, 6]
      }
    },
    showlegend: false
  }


Plotly.newPlot('myDiv', data, layout);


Webgl Polar Chart
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

var data = [
    {
      type: "scatterpolargl",
      r: unpack(rows, 'trial_1_r'),
      theta: unpack(rows, 'trial_1_theta'),
      mode: "markers",
      name: "Trial 1",
      marker: {
        color: "rgb(27,158,119)",
        size: 15,
        line: {
          color: "white"
        },
        opacity: 0.7
      },
      cliponaxis: false
    },
    {
      type: "scatterpolargl",
      r: unpack(rows, "trial_2_r"),
      theta: unpack(rows, "trial_2_theta"),
      mode: "markers",
      name: "Trial 2",
      marker: {
        color: "rgb(217,95,2)",
        size: 20,
        line: {
          color: "white"
        },
        "opacity": 0.7
      },
      "cliponaxis": false
    },
    {
      type: "scatterpolargl",
      r: unpack(rows, "trial_3_r"),
      theta: unpack(rows, "trial_3_theta"),
      mode: "markers",
      name: "Trial 3",
      marker: {
        color: "rgb(117,112,179)",
        size: 12,
        line: {
          color: "white"
        },
        opacity: 0.7
      },
      cliponaxis: false
    },
    {
      type: "scatterpolargl",
      r: unpack(rows, "trial_4_r"),
      theta: unpack(rows, "trial_4_theta"),
      mode: "markers",
      name: "Trial 4",
      marker: {
        color: "rgb(231,41,138)",
        size: 22,
        line: {
          color: "white"
        },
        opacity: 0.7
      },
      cliponaxis: false
    },
    {
      type: "scatterpolargl",
      r: unpack(rows, "trial_5_r"),
      theta: unpack(rows, "trial_5_theta"),
      mode: "markers",
      name: "Trial 5",
      marker: {
        color: "rgb(102,166,30)",
        size: 19,
        line: {
          color: "white"
        },
        opacity: 0.7
      },
      cliponaxis: false
    },
    {
      type: "scatterpolargl",
      r: unpack(rows, "trial_6_r"),
      theta: unpack(rows, "trial_6_theta"),
      mode: "markers",
      name: "Trial 6",
      marker: {
        color: "rgb(230,171,2)",
        size: 10,
        line: {
          color: "white"
        },
        opacity: 0.7
      },
      cliponaxis: false
    }
  ]

var layout = {
    title: "Hobbs-Pearson Trials",
    font: {
      size: 15
    },
    showlegend: false,
    polar: {
      bgcolor: "rgb(223, 223, 223)",
      angularaxis: {
        tickwidth: 2,
        linewidth: 3,
        layer: "below traces"
      },
      radialaxis: {
        side: "counterclockwise",
        showline: true,
        linewidth: 2,
        tickwidth: 2,
        gridcolor: "white",
        gridwidth: 2
      }
    },
    paper_bgcolor: "rgb(223, 223, 223)",
  }

Plotly.plot('myDiv', data, layout);
})
            


Financial Charts


            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Date Strings


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
  

Date Strings
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                      
 var data = [
  {
    x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],
    y: [1, 3, 6],
    type: 'scatter'
  }
];

Plotly.newPlot('myDiv', data);
                                                                        
                                                                        
            
Basic Time Series

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            


Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL High',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL Low',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: 'Basic Time Series',
};

Plotly.newPlot('myDiv', data, layout);
})
            
            
Manually Set Range
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: 'Custom Range',
  xaxis: {
    range: ['2016-07-01', '2016-12-31'],
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [86.8700008333, 138.870004167],
    type: 'linear'
  }
};

Plotly.newPlot('myDiv', data, layout);
})








Time Series with Rangeslider


 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL High',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL Low',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: 'Time Series with Rangeslider',
  xaxis: {
    autorange: true,
    range: ['2015-02-17', '2017-02-16'],
    rangeselector: {buttons: [
        {
          count: 1,
          label: '1m',
          step: 'month',
          stepmode: 'backward'
        },
        {
          count: 6,
          label: '6m',
          step: 'month',
          stepmode: 'backward'
        },
        {step: 'all'}
      ]},
    rangeslider: {range: ['2015-02-17', '2017-02-16']},
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [86.8700008333, 138.870004167],
    type: 'linear'
  }
};

Plotly.newPlot('myDiv', data, layout);
})
            
            
            
            
OHLC Charts in plotly.js

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
Simple OHLC Chart

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

var trace1 = {
  
  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],
  
  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],
  
  decreasing: {line: {color: '#7F7F7F'}},
  
  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],
  
  increasing: {line: {color: '#17BECF'}},
  
  line: {color: 'rgba(31,119,180,1)'},
  
  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],
  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],
  
  type: 'ohlc',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},
    title: 'Date',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    type: 'linear'
  }
};

Plotly.plot('plotly-div', data, layout);
                                                                        
                                                                        
            

Customizing the Figure with Shapes and Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'ohlc',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    rangeslider: {
		 visible: false
	 }
  }
};

Plotly.plot('graph', data, layout);
});
            
            
Customise OHLC Chart Colors
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                          
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){
      
function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}
  
var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},
	
  type: 'ohlc',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];
  
var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    autorange: true,
    title: 'Date'
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv', data, layout);
});

            


Add Rangeselector
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'ohlc',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    autorange: true,
    title: 'Date',
	 rangeselector: {
        x: 0,
        y: 1.2,
        xanchor: 'left',
        font: {size:8},
        buttons: [{
            step: 'month',
            stepmode: 'backward',
            count: 1,
            label: '1 month'
        }, {
            step: 'month',
            stepmode: 'backward',
            count: 6,
            label: '6 months'
        }, {
            step: 'all',
            label: 'All dates'
        }]
      }
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv7', data, layout);
});



            
Candlestick Charts in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Simple Candlestick Chart
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
                                                       
var trace1 = {
  
  x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'],
  
  close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995],
  
  decreasing: {line: {color: '#7F7F7F'}},
  
  high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004],
  
  increasing: {line: {color: '#17BECF'}},
  
  line: {color: 'rgba(31,119,180,1)'},
  
  low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995],
  
  open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004],
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    domain: [0, 1],
    range: ['2017-01-03 12:00', '2017-02-15 12:00'],
    rangeslider: {range: ['2017-01-03 12:00', '2017-02-15 12:00']},
    title: 'Date',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    domain: [0, 1],
    range: [114.609999778, 137.410004222],
    type: 'linear'
  }
};

Plotly.plot('plotly-div', data, layout);
                                                                        
            
Candlestick Chart without Rangeslider

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    rangeslider: {
		 visible: false
	 }
  }
};

Plotly.plot('graph', data, layout);
});
            
            
Customise Candlestick Chart with Shapes and Annotations

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
var trace1 = {
  
  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],
  
  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],
  
  decreasing: {line: {color: '#7F7F7F'}},
  
  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],
  
  increasing: {line: {color: '#17BECF'}},
  
  line: {color: 'rgba(31,119,180,1)'},
  
  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],
  
  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},
    title: 'Date',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    type: 'linear'
  },
  
  annotations: [
    {
      x: '2017-01-31',
      y: 0.9,
      xref: 'x',
      yref: 'paper',
      text: 'largest movement',
      font: {color: 'magenta'},
      showarrow: true,
      xanchor: 'right',
      ax: -20,
      ay: 0
    }
  ],
  
  shapes: [
      {
          type: 'rect',
          xref: 'x',
          yref: 'paper',
          x0: '2017-01-31',
          y0: 0,
          x1: '2017-02-01',
          y1: 1,
          fillcolor: '#d3d3d3',
          opacity: 0.2,
          line: {
              width: 0
          }
      }
    ]
};

Plotly.plot('plotly-div', data, layout);
                                                                                                                                                                      
Customizing Candlestick Chart Colors
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){
      
function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}
  
var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];
  
var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    title: 'Date',
   range: ['2016-06-01 12:00', '2017-01-01 12:00']
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv', data, layout);
});
            
            
Add Rangeselector
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        

Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    autorange: true,
    title: 'Date',
	 rangeselector: {
        x: 0,
        y: 1.2,
        xanchor: 'left',
        font: {size:8},
        buttons: [{
            step: 'month',
            stepmode: 'backward',
            count: 1,
            label: '1 month'
        }, {
            step: 'month',
            stepmode: 'backward',
            count: 6,
            label: '6 months'
        }, {
            step: 'all',
            label: 'All dates'
        }]
      }
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv', data, layout);
});


Candlestick Charts in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Simple Candlestick Chart
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

var trace1 = {
  
  x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'],
  
  close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995],
  
  decreasing: {line: {color: '#7F7F7F'}},
  
  high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004],
  
  increasing: {line: {color: '#17BECF'}},
  
  line: {color: 'rgba(31,119,180,1)'},
  
  low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995],
  
  open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004],
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    domain: [0, 1],
    range: ['2017-01-03 12:00', '2017-02-15 12:00'],
    rangeslider: {range: ['2017-01-03 12:00', '2017-02-15 12:00']},
    title: 'Date',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    domain: [0, 1],
    range: [114.609999778, 137.410004222],
    type: 'linear'
  }
};

Plotly.plot('plotly-div', data, layout);
 
 
 
Candlestick Chart without Rangeslider
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    rangeslider: {
		 visible: false
	 }
  }
};

Plotly.plot('graph', data, layout);
});


            
Customise Candlestick Chart with Shapes and Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
var trace1 = {
  
  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],
  
  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],
  
  decreasing: {line: {color: '#7F7F7F'}},
  
  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],
  
  increasing: {line: {color: '#17BECF'}},
  
  line: {color: 'rgba(31,119,180,1)'},
  
  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],
  
  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},
    title: 'Date',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    type: 'linear'
  },
  
  annotations: [
    {
      x: '2017-01-31',
      y: 0.9,
      xref: 'x',
      yref: 'paper',
      text: 'largest movement',
      font: {color: 'magenta'},
      showarrow: true,
      xanchor: 'right',
      ax: -20,
      ay: 0
    }
  ],
  
  shapes: [
      {
          type: 'rect',
          xref: 'x',
          yref: 'paper',
          x0: '2017-01-31',
          y0: 0,
          x1: '2017-02-01',
          y1: 1,
          fillcolor: '#d3d3d3',
          opacity: 0.2,
          line: {
              width: 0
          }
      }
    ]
};

Plotly.plot('plotly-div', data, layout);
            


Customizing Candlestick Chart Colors
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |


Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){
      
function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}
  
var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},
  
  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];
  
var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    title: 'Date',
   range: ['2016-06-01 12:00', '2017-01-01 12:00']
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv', data, layout);
});
            
            
            
Add Rangeselector
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    autorange: true,
    title: 'Date',
	 rangeselector: {
        x: 0,
        y: 1.2,
        xanchor: 'left',
        font: {size:8},
        buttons: [{
            step: 'month',
            stepmode: 'backward',
            count: 1,
            label: '1 month'
        }, {
            step: 'month',
            stepmode: 'backward',
            count: 6,
            label: '6 months'
        }, {
            step: 'all',
            label: 'All dates'
        }]
      }
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.plot('myDiv', data, layout);
});
          
          
MAPS
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]



Choropleth Maps in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 World Choropleth Map (Robinson Projection)

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

    var data = [{
        type: 'choropleth',
        locationmode: 'country names',
        locations: unpack(rows, 'location'),
        z: unpack(rows, 'alcohol'),
        text: unpack(rows, 'location'),
        autocolorscale: true
    }];

    var layout = {
      title: 'Pure alcohol consumption<br>among adults (age 15+) in 2010',
      geo: {
          projection: {
              type: 'robinson'
          }
      }
    };

    Plotly.plot(myDiv, data, layout, {showLink: false});

});



USA Choropleth Map

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

      var data = [{
          type: 'choropleth',
          locationmode: 'USA-states',
          locations: unpack(rows, 'code'),
          z: unpack(rows, 'total exports'),
          text: unpack(rows, 'state'),
          zmin: 0,
          zmax: 17000,
          colorscale: [
              [0, 'rgb(242,240,247)'], [0.2, 'rgb(218,218,235)'],
              [0.4, 'rgb(188,189,220)'], [0.6, 'rgb(158,154,200)'],
              [0.8, 'rgb(117,107,177)'], [1, 'rgb(84,39,143)']
          ],
          colorbar: {
              title: 'Millions USD',
              thickness: 0.2
          },
          marker: {
              line:{
                  color: 'rgb(255,255,255)',
                  width: 2
              }
          }
      }];


      var layout = {
          title: '2011 US Agriculture Exports by State',
          geo:{
              scope: 'usa',
              showlakes: true,
              lakecolor: 'rgb(255,255,255)'
          }
      };

      Plotly.plot(myDiv, data, layout, {showLink: false});
});
      
            
            
            
Country GDP Choropleth Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

       var data = [{
            type: 'choropleth',
            locations: unpack(rows, 'CODE'),
            z: unpack(rows, 'GDP (BILLIONS)'),
            text: unpack(rows, 'COUNTRY'),
            colorscale: [
                [0,'rgb(5, 10, 172)'],[0.35,'rgb(40, 60, 190)'],
                [0.5,'rgb(70, 100, 245)'], [0.6,'rgb(90, 120, 245)'],
                [0.7,'rgb(106, 137, 247)'],[1,'rgb(220, 220, 220)']],
            autocolorscale: false,
            reversescale: true,
            marker: {
                line: {
                    color: 'rgb(180,180,180)',
                    width: 0.5
                }
            },
            tick0: 0,
            zmin: 0,
            dtick: 1000,
            colorbar: {
                autotic: false,
                tickprefix: '$',
                title: 'GDP<br>Billions US$'
            }
      }];

      var layout = {
          title: '2014 Global GDP<br>Source: <a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html"> CIA World Factbook</a>',
          geo:{
              showframe: false,
              showcoastlines: false,
              projection:{
                  type: 'mercator'
              }
          }
      };
      Plotly.plot(myDiv, data, layout, {showLink: false});
});
                                                                        
                                                                        
                                                                        
            
Choropleth Map of 2014 US Population by State

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv', function(err, rows){
                function unpack(rows, key) {
return rows.map(function(row) { return row[key]; });
}
var data = [{
    type: 'choropleth',
    locationmode: 'USA-states',
    locations: unpack(rows, 'Postal'),
    z: unpack(rows, 'Population'),
    text: unpack(rows, 'State'),
    autocolorscale: true
}];

var layout = {
title: '2014 US Popultaion by State',
    geo:{
        scope: 'usa',
        countrycolor: 'rgb(255, 255, 255)',
        showland: true,
        landcolor: 'rgb(217, 217, 217)',
        showlakes: true,
        lakecolor: 'rgb(255, 255, 255)',
        subunitcolor: 'rgb(255, 255, 255)',
        lonaxis: {},
        lataxis: {}
    }
};
Plotly.plot(myDiv, data, layout, {showLink: false});
});




Scatter Plots on Maps in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Canadian Cities Map
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function scattergeomarkers('myDiv') {
    // By default, geographic data is loaded asynchronously from
    // the topojson subdirectory located at the root of the plotlyjs directory.
    //
    // To remove this asynchronous step, include:
    // <script type='text/javascript' src='topojson/plotly-geo-assets.min.js'></script>
    // after 'plotly.min.js'.
    // Note that this bundle is quite large.
    // Serving it from a network is not recommended.
    //
    // If you choose to rename or move the topojson subdirectory, include
    // <script>PLOTLYENV={TOPOJSON_URL:'path/to/topojson/'};</script>
    // after 'plotly.min.js'

    var data = [{
        type: 'scattergeo',
        mode: 'markers+text',
        text: [
            'Montreal', 'Toronto', 'Vancouver', 'Calgary', 'Edmonton',
            'Ottawa', 'Halifax', 'Victoria', 'Winnepeg', 'Regina'
        ],
        lon: [
            -73.57, -79.24, -123.06, -114.1, -113.28,
            -75.43, -63.57, -123.21, -97.13, -104.6
        ],
        lat: [
            45.5, 43.4, 49.13, 51.1, 53.34, 45.24,
            44.64, 48.25, 49.89, 50.45
        ],
        marker: {
            size: 7,
            color: [
                '#bebada', '#fdb462', '#fb8072', '#d9d9d9', '#bc80bd',
                '#b3de69', '#8dd3c7', '#80b1d3', '#fccde5', '#ffffb3'
            ],
            line: {
                width: 1
            }
        },
        name: 'Canadian cities',
        textposition: [
            'top right', 'top left', 'top center', 'bottom right', 'top right',
            'top left', 'bottom right', 'bottom left', 'top right', 'top right'
        ],
    }];

    var layout = {
        title: 'Canadian cities',
        font: {
            family: 'Droid Serif, serif',
            size: 6
        },
        titlefont: {
            size: 16
        },
        geo: {
            scope: 'north america',
            resolution: 50,
            lonaxis: {
                'range': [-130, -55]
            },
            lataxis: {
                'range': [40, 70]
            },
            showrivers: true,
            rivercolor: '#fff',
            showlakes: true,
            lakecolor: '#fff',
            showland: true,
            landcolor: '#EAEAAE',
            countrycolor: '#d3d3d3',
            countrywidth: 1.5,
            subunitcolor: '#d3d3d3'
        }
    };

    Plotly.newPlot('myDiv', data, layout);
}
           
            
North America Precipitation Map
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                     
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

 scl = [[0, 'rgb(150,0,90)'],[0.125, 'rgb(0, 0, 200)'],[0.25,'rgb(0, 25, 255)'],[0.375,'rgb(0, 152, 255)'],[0.5,'rgb(44, 255, 150)'],[0.625,'rgb(151, 255, 0)'],[0.75,'rgb(255, 234, 0)'],[0.875,'rgb(255, 111, 0)'],[1,'rgb(255, 0, 0)']];

    var data = [{
        type: 'scattergeo',
        mode: 'markers',
        text: unpack(rows, 'Globvalue'),
        lon: unpack(rows, 'Lon'),
        lat: unpack(rows, 'Lat'),
        marker: {
          color: unpack(rows, 'Globvalue'),
          colorscale: scl,
          cmin: 0,
          cmax: 1.4,
          reversescale: true,
          opacity: 0.2,
          size: 2,
          colorbar:{
            thickness: 10,
            titleside: 'right',
            outlinecolor: 'rgba(68,68,68,0)',
            ticks: 'outside',
            ticklen: 3,
            shoticksuffix: 'last',
            ticksuffix: 'inches',
            dtick: 0.1
          }
        },
        name: 'NA Precipitation'
    }];

    var layout = {
      geo:{
        scope: 'north america',
        showland: true,
        landcolor: 'rgb(212,212,212)',
        subunitcolor: 'rgb(255,255,255)',
        countrycolor: 'rgb(255,255,255)',
        showlakes: true,
        lakecolor: 'rgb(255,255,255)',
        showsubunits: true,
        showcountries: true,
        resolution: 50,
        projection: {
          type: 'conic conformal',
          rotation: {
            long: -100
          }
        },
      },
      longaxis: {
        showgrid: true,
        gridwidth: 0.5,
        range: [ -140.0, -55.0 ],
        dtick: 5
      },
      lataxis: {
        showgrid: true,
        gridwidth: 0.5,
        range: [ 20.0, 60.0 ],
        dtick: 5
      },
      title: 'North America Precipitation',
      width: 600,
      height: 600
    };

    Plotly.newPlot('myDiv', data, layout);
  });
              
              
              
Bubble Maps in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 
Europe Bubble Map

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [{
    type: 'scattergeo',
    mode: 'markers',
    locations: ['FRA', 'DEU', 'RUS', 'ESP'],
    marker: {
        size: [20, 30, 15, 10],
        color: [10, 20, 40, 50],
        cmin: 0,
        cmax: 50,
        colorscale: 'Greens',
        colorbar: {
            title: 'Some rate',
            ticksuffix: '%',
            showticksuffix: 'last'
        },
        line: {
            color: 'black'
        }
    },
    name: 'europe data'
}];

var layout = {
    'geo': {
        'scope': 'europe',
        'resolution': 50
    }
};

Plotly.newPlot('myDiv', data, layout);
                    
              
                                                                        
USA Bubble Map
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var cityName = unpack(rows, 'name'),
        cityPop = unpack(rows, 'pop'),
        cityLat = unpack(rows, 'lat'),
        cityLon = unpack(rows, 'lon'),
        color = [,"rgb(255,65,54)","rgb(133,20,75)","rgb(255,133,27)","lightgrey"],
        citySize = [],
        hoverText = [],
        scale = 50000;

    for ( var i = 0 ; i < cityPop.length; i++) {
        var currentSize = cityPop[i] / scale;
        var currentText = cityName[i] + " pop: " + cityPop[i];
        citySize.push(currentSize);
        hoverText.push(currentText);
    }

    var data = [{
        type: 'scattergeo',
        locationmode: 'USA-states',
        lat: cityLat,
        lon: cityLon,
        hoverinfo: 'text',
        text: hoverText,
        marker: {
            size: citySize,
            line: {
                color: 'black',
                width: 2
            },
        }
    }];

    var layout = {
        title: '2014 US City Populations',
        showlegend: false,
        geo: {
            scope: 'usa',
            projection: {
                type: 'albers usa'
            },
            showland: true,
            landcolor: 'rgb(217, 217, 217)',
            subunitwidth: 1,
            countrywidth: 1,
            subunitcolor: 'rgb(255,255,255)',
            countrycolor: 'rgb(255,255,255)'
        },
    };

    Plotly.plot(myDiv, data, layout, {showLink: false});

});





Scatter Plots on Mapbox in pl

need mapbox token

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 Basic Example
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
3D
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


3D Line Plots in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
3D Line Plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
            
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-line1.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row)
          { return row[key]; }); }
          
var x = unpack(rows , 'x');
var y = unpack(rows , 'y');
var z = unpack(rows , 'z');
var c = unpack(rows , 'color');
Plotly.plot('graph', [{
  type: 'scatter3d',
  mode: 'lines',
  x: x,
  y: y,
  z: z,
  opacity: 1,
  line: {
    width: 6,
    color: c,
    reversescale: false
  }
}], {
  height: 640
});
});
 
 
                                             
                                                                        
3D Line + Markers Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var pointCount = 31;
var i, r;

var x = [];
var y = [];
var z = [];
var c = [];

for(i = 0; i < pointCount; i++)
{
   r = 10 * Math.cos(i / 10);
   x.push(r * Math.cos(i));
   y.push(r * Math.sin(i));
   z.push(i);
   c.push(i)
}

Plotly.plot('myDiv1', [{
  type: 'scatter3d',
  mode: 'lines+markers',
  x: x,
  y: y,
  z: z,
  line: {
    width: 6,
    color: c,
    colorscale: "Viridis"},
  marker: {
    size: 3.5,
    color: c,
    colorscale: "Greens",
    cmin: -20,
    cmax: 50
  }},
]);
                                                                        
                                                                        
3D Line Spiral Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var pointCount = 3142;
var i, r;

var x = [];
var y = [];
var z = [];
var c = [];

for(i = 0; i < pointCount; i++)
 {
     r = i * (pointCount - i);
     x.push(r * Math.cos(i / 30));
     y.push(r * Math.sin(i / 30));
     z.push(i);
     c.push(i)
 }

Plotly.plot('myDiv2', [{
     type: 'scatter3d',
     mode: 'lines',
     x: x,
     y: y,
     z: z,
     opacity: 0.7,
     line: {
       width: 10,
       color: c,
       colorscale: 'Viridis'}
    }]);
                                                                        
                                                                        
3D Random Walk Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |

Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/_3d-line-plot.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row)
          { return row[key]; });
      }

var trace1 = {
  x: unpack(rows, 'x1'),
  y: unpack(rows, 'y1'),
  z: unpack(rows, 'z1'),
  mode: 'lines',
  marker: {
    color: '#1f77b4',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: '#1f77b4',
    width: 1
  },
  type: 'scatter3d'
};

var trace2 = {
  x: unpack(rows, 'x2'),
  y: unpack(rows, 'y2'),
  z: unpack(rows, 'z2'),
  mode: 'lines',
  marker: {
    color: '#9467bd',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: 'rgb(44, 160, 44)',
    width: 1
  },
  type: 'scatter3d'
};

var trace3 = {
  x: unpack(rows, 'x3'),
  y: unpack(rows, 'y3'),
  z: unpack(rows, 'z3'),
  mode: 'lines',
  marker: {
    color: '#bcbd22',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: '#bcbd22',
    width: 1
  },
  type: 'scatter3d'
};

var data = [trace1, trace2, trace3];
var layout = {
  title: '3D Line Plot',
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 0,
    r: 0,
    b: 0,
    t: 65
  }
};
Plotly.newPlot('myDiv', data, layout);
});
                     
                     
                                                                        
3D Scatter Plots in plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 3D Scatter Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-scatter.csv', function(err, rows){
function unpack(rows, key) {
	return rows.map(function(row)
	{ return row[key]; });}

var trace1 = {
	x:unpack(rows, 'x1'), y: unpack(rows, 'y1'), z: unpack(rows, 'z1'),
	mode: 'markers',
	marker: {
		size: 12,
		line: {
		color: 'rgba(217, 217, 217, 0.14)',
		width: 0.5},
		opacity: 0.8},
	type: 'scatter3d'
};

var trace2 = {
	x:unpack(rows, 'x2'), y: unpack(rows, 'y2'), z: unpack(rows, 'z2'),
	mode: 'markers',
	marker: {
		color: 'rgb(127, 127, 127)',
		size: 12,
		symbol: 'circle',
		line: {
		color: 'rgb(204, 204, 204)',
		width: 1},
		opacity: 0.8},
	type: 'scatter3d'};

var data = [trace1, trace2];
var layout = {margin: {
	l: 0,
	r: 0,
	b: 0,
	t: 0
  }};
Plotly.newPlot('myDiv', data, layout);
});
                                                                        
                                                                        
                                                                        
Ribbon Plots in plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic Ribbon Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.json('https://raw.githubusercontent.com/plotly/datasets/master/3d-ribbon.json', function(figure){

  var trace1 = {
	  x:figure.data[0].x, y:figure.data[0].y, z:figure.data[0].z,
	  name: '',
      colorscale: figure.data[0].colorscale,
      showscale: false
  }
  var trace2 = {
	  x:figure.data[1].x, y:figure.data[1].y, z:figure.data[1].z,
	  name: '',
	  colorscale: figure.data[1].colorscale,
	  type: 'surface',
	  showscale: false
  }
  var trace3 = {
	  x:figure.data[2].x, y:figure.data[2].y, z:figure.data[2].z,
	  colorscale: figure.data[2].colorscale,
	  type: 'surface',
	  showscale: false
  }
  var trace4 = {
	  x:figure.data[3].x, y:figure.data[3].y, z:figure.data[3].z,
	  colorscale: figure.data[3].colorscale,
	  type: 'surface',
	  showscale: false
  }
  var trace5 = {
	  x:figure.data[4].x, y:figure.data[4].y, z:figure.data[4].z,
	  colorscale: figure.data[4].colorscale,
	  type: 'surface',
	  showscale: false
  }
  var trace6 = {
	  x:figure.data[5].x, y:figure.data[5].y, z:figure.data[5].z,
	  colorscale: figure.data[5].colorscale,
	  type: 'surface',
	  showscale: false
  }
  var trace7 = {
	  x:figure.data[6].x, y:figure.data[6].y, z:figure.data[6].z,
	  name: '',
	  colorscale: figure.data[6].colorscale,
	  type: 'surface',
	  showscale: false
  }
  
var data = [trace1, trace2, trace3, trace4, trace5, trace6, trace7];

var layout = {
  title: 'Ribbon Plot',
  showlegend: false,
  autosize: true,
  width: 600,
  height: 600,
  scene: {
    xaxis: {title: 'Sample #'},
    yaxis: {title: 'Wavelength'},
    zaxis: {title: 'OD'}
  }
};
Plotly.newPlot('myDiv', data, layout);
});
                                                                        


                                                                        
3D Surface Plots in plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Topographical 3D Surface Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}
  
var z_data=[ ]
for(i=0;i&lt;24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
           z: z_data,
           type: 'surface'
        }];
  
var layout = {
  title: 'Mt Bruno Elevation',
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 65,
    r: 50,
    b: 65,
    t: 90,
  }
};
Plotly.newPlot('myDiv', data, layout);
});
                                                  
                                                                        
 Surface Plot With Contours
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}
var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
  z: z_data,
  type: 'surface',
  contours: {
    z: {
      show:true,
      usecolormap: true,
      highlightcolor:"#42f462",
      project:{z: true}
    }
  }
}];

var layout = {
  title: 'Mt Bruno Elevation With Projected Contours',
  scene: {camera: {eye: {x: 1.87, y: 0.88, z: -0.64}}},
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 65,
    r: 50,
    b: 65,
    t: 90,
  }
};

Plotly.newPlot('myDiv', data, layout);
});
                                                                        
                                                                        
Multiple 3D Surface Plots
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
z1 = [
    [8.83,8.89,8.81,8.87,8.9,8.87],
    [8.89,8.94,8.85,8.94,8.96,8.92],
    [8.84,8.9,8.82,8.92,8.93,8.91],
    [8.79,8.85,8.79,8.9,8.94,8.92],
    [8.79,8.88,8.81,8.9,8.95,8.92],
    [8.8,8.82,8.78,8.91,8.94,8.92],
    [8.75,8.78,8.77,8.91,8.95,8.92],
    [8.8,8.8,8.77,8.91,8.95,8.94],
    [8.74,8.81,8.76,8.93,8.98,8.99],
    [8.89,8.99,8.92,9.1,9.13,9.11],
    [8.97,8.97,8.91,9.09,9.11,9.11],
    [9.04,9.08,9.05,9.25,9.28,9.27],
    [9,9.01,9,9.2,9.23,9.2],
    [8.99,8.99,8.98,9.18,9.2,9.19],
    [8.93,8.97,8.97,9.18,9.2,9.18]
];

z2 = [];
for (var i=0;i&lt;z1.length;i++ ) {
  z2_row = [];
    for(var j=0;j&lt;z1[i].length;j++) {
      z2_row.push(z1[i][j]+1);
    }
    z2.push(z2_row);
}

z3 = []
for (var i=0;i&lt;z1.length;i++ ) {
  z3_row = [];
    for(var j=0;j&lt;z1[i].length;j++) {
      z3_row.push(z1[i][j]-1);
    }
    z3.push(z3_row);
}
var data_z1 = {z: z1, type: 'surface'};
var data_z2 = {z: z2, showscale: false, opacity:0.9, type: 'surface'};
var data_z3 = {z: z3, showscale: false, opacity:0.9, type: 'surface'};



Plotly.newPlot('example', [data_z1, data_z2, data_z3]);
      
                                                                        
                                                                        
3D Mesh Plots in plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Simple 3D Mesh Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
// Generating random data..
a=[]; b=[]; c=[];
for(i=0;i&lt50;i++)
  {
    var a_ = Math.random();
    a.push(a_);
    
    var b_ = Math.random();
    b.push(b_);
    
    var c_ = Math.random();
    c.push(c_);
  }
// Plotting the mesh
var data=[
    {
      opacity:0.8,
      color:'rgb(300,100,200)',
      type: 'mesh3d',
      x: a,
      y: b,
      z: c,
    }
];
Plotly.newPlot('myDiv', data);
 
                                              
                                                                        
3D Mesh Plot with Alphahull
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
// Generating random data..
a=[]; b=[]; c=[];
for(i=0;i&lt50;i++)
  {
  var a_ = Math.random();
   a.push(a_);
  
  var b_ = Math.random();
   b.push(b_);
  
  var c_ = Math.random();
   c.push(c_);
  }
// Plotting the mesh
var data=[
  {
    alphahull:5,
    opacity:0.8,
    color:'rgb(200,100,300)',
    type: 'mesh3d',
    x: a,
    y: b,
    z: c,
  }
];
Plotly.newPlot('myDiv', data);





3D Mesh Tetrahedron
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [{
    type: "mesh3d",
    x: [0, 1, 2, 0],
    y: [0, 0, 1, 2],
    z: [0, 2, 0, 1],
    i: [0, 0, 0, 1],
    j: [1, 2, 3, 2],
    k: [2, 3, 1, 3],
    intensity: [0, 0.33, 0.66, 1],
    colorscale: [
      [0, 'rgb(255, 0, 0)'],
      [0.5, 'rgb(0, 255, 0)'],
      [1, 'rgb(0, 0, 255)']
    ]
  }
];

Plotly.plot('myDiv', data, {});
                                                                        
                                                                        
3D Mesh Cube
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                 
// have to import the numeric.js in order to call `numeric.linspace`

var intensity = numeric.linspace(0,1,8);

var data = [{
    type: "mesh3d",
    x: [0, 0, 1, 1, 0, 0, 1, 1],
    y: [0, 1, 1, 0, 0, 1, 1, 0],
    z: [0, 0, 0, 0, 1, 1, 1, 1],
    i: [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
    j: [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
    k: [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
    intensity: intensity,
    colorscale: [
      [0, 'rgb(255, 0, 255)'],
      [0.5, 'rgb(0, 255, 0)'],
      [1, 'rgb(0, 0, 255)']
    ]
  }
];

Plotly.plot('myDiv', data, {});
                                                                        
                                                                        
                                                                        
Tri-Surf Plots in plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic Trisurf Plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
function trisurf(Tri, X, Y, Z, C) {
  var data = {
    type: 'mesh3d',
    x: X,
    y: Y,
    z: Z,
    i: Tri.map(function(f) { return f[0] }),
    j: Tri.map(function(f) { return f[1] }),
    k: Tri.map(function(f) { return f[2] }),
    facecolor: C,
    flatshading: true,
  }
  
  Plotly.newPlot('myDiv', [data])
}


//Example usage
trisurf(
  [
    [0, 1, 2],
    [0, 2, 3],
    [0, 3, 1],
    [1, 2, 3]
  ],
  [0, 1, 0, 0],
  [0, 0, 1, 0],
  [0, 0, 0, 1],
  [
    'rgb(0, 0, 0)',
    'rgb(255, 0, 0)',
    'rgb(0, 255, 0)',
    'rgb(0, 0, 255)'
  ])
                                                                           
                                                                        
Trisurf Cube
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var x = [0, 0, 1, 1, 0, 0, 1, 1]
var y = [0, 1, 1, 0, 0, 1, 1, 0]
var z = [0, 0, 0, 0, 1, 1, 1, 1]
var i = [7, 0, 0, 0, 4, 4, 2, 6, 4, 0, 3, 7]
var j = [3, 4, 1, 2, 5, 6, 5, 5, 0, 1, 2, 2]
var k = [0, 7, 2, 3, 6, 7, 1, 2, 5, 5, 7, 6]

var facecolor = [
	'rgb(50, 200, 200)',
	'rgb(100, 200, 255)',
	'rgb(150, 200, 115)',
	'rgb(200, 200, 50)',
	'rgb(230, 200, 10)',
	'rgb(255, 140, 0)'
]

facecolor2 = new Array(facecolor.length * 2);

facecolor.forEach(function(x, i) {
	facecolor2[i * 2 + 1] = facecolor2[i * 2] = x;
});

var data = {
	x: x,
	y: y,
	z: z,
	i: i,
	j: j,
	k: k,
	facecolor: facecolor2,
	type: 'mesh3d'
}

Plotly.newPlot('myDiv', [data])
                                                                        
Extending the Cube Example for Boxes

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
// Note x, y, z define the vertices for a unit cube

var x = [0, 0, 1, 1, 0, 0, 1, 1];
var y = [0, 1, 1, 0, 0, 1, 1, 0];
var z = [0, 0, 0, 0, 1, 1, 1, 1];
var i = [7, 0, 0, 0, 4, 4, 2, 6, 4, 0, 3, 7];
var j = [3, 4, 1, 2, 5, 6, 5, 5, 0, 1, 2, 2];
var k = [0, 7, 2, 3, 6, 7, 1, 2, 5, 5, 7, 6];

var range_x = [-2, 2];
var range_y = [-3, 3];
var range_z = [-1, 1];

function rectangle(x, y, z, range_x, range_y, range_z) {

  if (range_x.length !== 2 || range_y.length !== 2 || range_z.length !== 2) {
    throw 'Ranges must contain 2 values';
  }
	// we will forego other checks for to limit the length of the example
	x = x.map(function(e, i) {
    return range_x[e];
  });

  y = y.map(function(e, i) {
    return range_y[e];
  });

  z = z.map(function(e, i) {
    return range_z[e];
  });

	return {x: x, y: y, z: z};
}

result = rectangle(x, y, z, range_x, range_y, range_z);

// x, y, z now represent the vertices for the rectangular box with
// the ranges specified above
x = result.x;
y = result.y;
z = result.z;

var facecolor = [
    'rgb(50, 200, 200)',
    'rgb(100, 200, 255)',
    'rgb(150, 200, 115)',
    'rgb(200, 200, 50)',
    'rgb(230, 200, 10)',
    'rgb(255, 140, 0)'
];

facecolor2 = new Array(facecolor.length * 2);
facecolor.forEach(function(x, i) {
    facecolor2[i * 2 + 1] = facecolor2[i * 2] = x;
});

var data = {
    x: x,
    y: y,
    z: z,
    i: i,
    j: j,
    k: k,
    facecolor: facecolor2,
    type: 'mesh3d'
};

Plotly.newPlot('myDiv', [data]);
                                                                        
                                                                        
3D Cluster Graph in plotly.js
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
3D Point Clustering
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                           
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/alpha_shape.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var data = [{
        x: unpack(rows, 'x'),
        y: unpack(rows, 'y'),
        z: unpack(rows, 'z'),
        mode: 'markers',
        type: 'scatter3d',
        marker: {
          color: 'rgb(23, 190, 207)',
          size: 2
        }
    },{
        alphahull: 7,
        opacity: 0.1,
        type: 'mesh3d',
        x: unpack(rows, 'x'),
        y: unpack(rows, 'y'),
        z: unpack(rows, 'z')
    }];

    var layout = {
        autosize: true,
        height: 480,
        scene: {
            aspectratio: {
                x: 1,
                y: 1,
                z: 1
            },
            camera: {
                center: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                eye: {
                    x: 1.25,
                    y: 1.25,
                    z: 1.25
                },
                up: {
                    x: 0,
                    y: 0,
                    z: 1
                }
            },
            xaxis: {
                type: 'linear',
                zeroline: false
            },
            yaxis: {
                type: 'linear',
                zeroline: false
            },
            zaxis: {
                type: 'linear',
                zeroline: false
            }
        },
        title: '3d point clustering',
        width: 477
    };

    Plotly.newPlot('myDiv', data, layout);

});
                 
3D Cone Plots in plotly.js
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
Basic 3D Cone
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                 
var data = [{
  type: "cone",
  x: [1], y: [1], z: [1],
  u: [1], v: [1], w: [0]
}]

var layout = {
  "scene": {
    "camera": {
      "eye": {x: -0.76, y: 1.8, z: 0.92}
    }
  }
}

Plotly.plot('graph',data,layout)
                 
                                                                        
Multiple 3D Cone
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [{
      type: "cone",
      x: [1, 2, 3],
      y: [1, 2, 3],
      z: [1, 2, 3],
      u: [1, 0, 0],
      v: [0, 3, 0],
      w: [0, 0, 2],
      sizemode: "absolute",
      sizeref: 2,
      anchor: "tip",
      colorbar: {
        x: 0,
        xanchor: "right",
        side: "left"
      }
}]

var layout = {
    scene: {
      domain: {x: [0, 1]},
      camera: {
        eye: {x: -1.57, y: 1.36, z: 0.58}
      }
    },
    width: 800
}

Plotly.plot('graph', data, layout)
                                                                        
                                                                        
3D Cone Lighting
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [{
    type: "cone",
    name: "base",
    x: [1, 1, 1],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false
  },
  {
    type: "cone",
    name: "opacity:0.3",
    x: [2, 2, 2],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    opacity: 0.3
  },
  {
    type: "cone",
    name: "lighting.ambient:0.3",
    x: [3, 3, 3],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lighting: {ambient: 0.3}
  },
  {
    type: "cone",
    name: "lighting.diffuse:0.3",
    x: [4, 4, 4],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lighting: {diffuse: 0.3}
  },
  {
    type: "cone",
    name: "lighting.specular:2",
    x: [5, 5, 5],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lighting: {specular: 2}
  },
  {
    type: "cone",
    name: "lighting.roughness:1",
    x: [6, 6, 6],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lighting: {roughness: 1}
  },
  {
    type: "cone",
    name: "lighting.fresnel:2",
    x: [7, 7, 7],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lighting: {fresnel: 2}
  },
  {
    type: "cone",
    name: "lighting.position x:0,y:0,z:1e5",
    x: [8, 8, 8],
    y: [1, 2, 3],
    z: [1, 1, 1],
    u: [1, 2, 3],
    v: [1, 1, 2],
    w: [4, 4, 1],
    hoverinfo: "u+v+w+name",
    showscale: false,
    lightposition: {x: 0, y: 0, z: 1e5}
}]

var layout = {
  scene: {
    aspectmode: "data",
    camera: {
      eye: {x: 0.05, y: -2.6, z: 2}
    }
  },
  width: 500,
  height: 500,
  margin: {t: 0, b: 0, l: 0, r: 0}
}

Plotly.plot('graph',data,layout)
                                                                        

3D Streamtube Plots in plotly.js



            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
Introduction
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
use starts to determine streamtube starting position
 maxdisplayed determines the maximum segments displayed in a streamtube.
                                                      
                                                                        
Basic Streamtube Plot
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                          
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var data = [{
      type: "streamtube",
      x: unpack(rows, 'x'),
      y: unpack(rows, 'y'),
      z: unpack(rows, 'z'),
      u: unpack(rows, 'u'),
      v: unpack(rows, 'v'),
      w: unpack(rows, 'w'),
      sizeref: 0.5,
      cmin: 0,
      cmax: 3
    }]

    var layout = {
      scene: {
        camera: {
          eye: {
          	x: -0.7243612458865182,
          	y: 1.9269804254717962,
          	z: 0.6704828299861716
          }
        }
      }
    }

    Plotly.newPlot('graph', data, layout)

});
                                                                        

Starting Position and Segments
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var data = [{
      type: 'streamtube',
      x: unpack(rows, 'x'),
      y: unpack(rows, 'y'),
      z: unpack(rows, 'z'),
      u: unpack(rows, 'u'),
      v: unpack(rows, 'v'),
      w: unpack(rows, 'w'),
      starts: {
        x: Array(16).fill(80),
        y: [20,30,40,50,20,30,40,50,20,30,40,50,20,30,40,50],
        z: [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]
      },
      sizeref: 0.3,
      colorscale: "Portland",
      showscale: false,
      maxdisplayed: 3000
    }]

    var layout = {
      scene: {
        aspectratio: {
          x: 2,
          y: 1,
          z: 0.3
        }
      },
      margin: {
        t: 20,
        b: 20,
        l: 20,
        r: 20
      },
      width: 600,
      height: 400
    }

    Plotly.newPlot('graph', data, layout);

});



3D Isosurface Plots in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Basic Isosurface Plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var data = [
    {
        type: "isosurface",
        x: [0,0,0,0,1,1,1,1],
        y: [0,1,0,1,0,1,0,1],
        z: [1,1,0,0,1,1,0,0],
        value: [1,2,3,4,5,6,7,8],
        isomin: 2,
        isomax: 6,
        colorscale: "Reds"
    }
];

var layout = {
    margin: {t:0, l:0, b:0},
    scene: {
        camera: {
            eye: {
                x: 1.88,
                y: -2.12,
                z: 0.96
            }
        }
    }
};

Plotly.newPlot(graphDiv, data, layout, {showSendToCloud: true});
                                                                              
                                                                        
Isosurface with Additional Slices
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/clebsch-cubic.csv', function(err, rows){
  function unpack(rows, key) {
  return rows.map(function(row) {return parseFloat(row[key]); });
}

var data = [
    {
        type: "isosurface",
        x: unpack(rows, 'x'),
        y: unpack(rows, 'y'),
        z: unpack(rows, 'z'),
        value: unpack(rows, 'value'),
        isomin: -100,
        isomax: 100,
        surface: {show: true, count: 1, fill: 0.8},
        slices: {z: {
          show: true, locations: [-0.3, 0.5]
        }},
        caps: {
            x: {show: false},
            y: {show: false},
            z: {show: false}
        },
    }
];

var layout = {
    margin: {t:0, l:0, b:0},
    scene: {
        camera: {
            eye: {
                x: 1.86,
                y: 0.61,
                z: 0.98
            }
        }
    }
};

Plotly.newPlot(graphDiv, data, layout, {showSendToCloud: true});
});
                                                                        
                                                                        
Multiple Isosurfaces with Caps
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/clebsch-cubic.csv', function(err, rows){
  function unpack(rows, key) {
  return rows.map(function(row) {return parseFloat(row[key]); });
}

var data = [
    {
        type: "isosurface",
        x: unpack(rows, 'x'),
        y: unpack(rows, 'y'),
        z: unpack(rows, 'z'),
        value: unpack(rows, 'value'),
        isomin: -10,
        isomax: 10,
        surface: {show: true, count: 4, fill: 1, pattern: 'odd'},
        caps: {
            x: {show: true},
            y: {show: true},
            z: {show: true}
        },
    }
];

var layout = {
    margin: {t:0, l:0, b:0},
    scene: {
        camera: {
            eye: {
                x: 1.86,
                y: 0.61,
                z: 0.98
            }
        }
    }
};

Plotly.newPlot('myDiv24', data, layout, {showSendToCloud: true});
});
 
 
Transforms
       
      
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]




Filter in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Basic Example

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      

        var resolveDiv0 = new Promise((resolve,reject) =>{
            var subject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']
            var score = [1,6,2,8,2,9,4,5,1,5,2,8]
            
            var data = [{
              type: 'scatter',
              x: subject,
              y: score,
              mode: 'markers',
              transforms: [{
                type: 'filter',
                target: 'y',
                operation: '>',
                value: 4
              }]
            }]
            
            var layout = {
            	title: 'Filter Scores > 4'
            }
            
            Plotly.plot('myDiv0', data, layout)
        })
          
            
Groupby in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Basic Example

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var subject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']
var score = [1,6,2,8,2,9,4,5,1,5,2,8]

var data = [{
  type: 'scatter',
  x: subject,
  y: score,
  mode: 'markers',
  transforms: [{
    type: 'groupby',
    groups: subject,
    styles: [
      {target: 'Moe', value: {marker: {color: 'blue'}}},
      {target: 'Larry', value: {marker: {color: 'red'}}},
      {target: 'Curly', value: {marker: {color: 'black'}}}
    ]
  }]
}]

Plotly.plot('graph', data)
                                                                        

            
Aggregations in plotly.js



            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Basic Aggregations

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var subject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']
var score = [1,6,2,8,2,9,4,5,1,5,2,8]

var data = [{
  type: 'scatter',
  x: subject,
  y: score,
  mode: 'markers',
  transforms: [{
    type: 'aggregate',
    groups: subject,
    aggregations: [
      {target: 'y', func: 'avg', enabled: true},
    ]
  }]
}]

Plotly.plot('graph', data)
      
      
Aggregate Functions
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var subject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']
var score = [1,6,2,8,2,9,4,5,1,5,2,8]

var data = [{
  type: 'scatter',
  x: subject,
  y: score,
  mode: 'markers',
  transforms: [{
    type: 'aggregate',
    groups: subject,
    aggregations: [
      {target: 'y', func: 'avg', enabled: true},
    ]
  }]
}]
layout = {
  title: '<b>Plotly Aggregations</b><br>use dropdown to change aggregation',
  xaxis: {title: 'Subject'},
  yaxis: {title: 'Score', range: [0,22]},
  height: 600,
  width: 900,
  updatemenus: [{
        x: 0.85,
        y: 1.15,
        xref: 'paper',
        yref: 'paper',
        yanchor: 'top',
        active: 0,
        showactive: false,
        buttons: [{
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'avg'],
            label: 'Avg'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'sum'],
            label: 'Sum'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'min'],
            label: 'Min'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'max'],
            label: 'Max'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'mode'],
            label: 'Mode'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'median'],
            label: 'Median'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'count'],
            label: 'Count'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'stddev'],
            label: 'Std.Dev'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'first'],
            label: 'First'
        }, {
            method: 'restyle',
            args: ['transforms[0].aggregations[0].func', 'last'],
            label: 'Last'
        }]
  }]
}

Plotly.plot('graph', data, layout)
                                                                        
                                                                        
Histogram Binning
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://plot.ly/~public.health/17.csv", function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

trace1 = {
  x: unpack(rows, 'date'),
  autobinx: false,
  autobiny: true,
  marker: {color: 'rgb(68, 68, 68)'},
  name: 'date',
  type: 'histogram',
  xbins: {
    end: '2016-12-31 12:00',
    size: 'M1',
    start: '1983-12-31 12:00'
  }
};

data = [trace1];

layout = {
  paper_bgcolor: 'rgb(240, 240, 240)',
  plot_bgcolor: 'rgb(240, 240, 240)',
  title: '',
  xaxis: {
    autorange: true,
    range: ['1984-07-01 06:00', '2016-07-30 18:00'],
    title: '',
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [0, 92.6315789474],
    title: 'Shootings incidents',
    type: 'linear'
  },
  updatemenus: [{
        x: 0.1,
        y: 1.15,
        xref: 'paper',
        yref: 'paper',
        yanchor: 'top',
        active: 0,
        showactive: true,
        buttons: [{
            args: ['xbins.size', 'M1'],
            label: 'Month',
            method: 'restyle',
        }, {
            args: ['xbins.size', 'M3'],
            label: 'Quater',
            method: 'restyle',
        }, {
            args: ['xbins.size', 'M6'],
            label: 'Half Year',
            method: 'restyle',
        }, {
            args: ['xbins.size', 'M12'],
            label: 'Year',
            method: 'restyle',
        }]
  }]
};

Plotly.plot('graph', data, layout);

});
                                                                        
                                                                        
Mapping with Aggregates
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
            Plotly.d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/worldhappiness.csv', function(err, rows){
                  function unpack(rows, key) {
                      return rows.map(function(row) { return row[key]; });
                  }
            
              var data = [{
                    type: 'choropleth',
                    locationmode: 'country names',
                    locations: unpack(rows, 'Country'),
                    z: unpack(rows, 'HappinessScore'),
                    autocolorscale: false,
                    reversescale: true,
                    colorscale: 'Portland',
                    transforms: [{
                      type: 'aggregate',
                      groups: unpack(rows, 'Country'),
                      aggregations: [
                        {target: 'z', func: 'avg', enabled: true},
                    ]
                }]
               }];
            
                var layout = {
                  title: '<b>World Happiness</b><br>2015 - 2017',
                  geo: {
                      showframe: false,
                      showcoastlines: false,
                      projection:{
                         type: 'orthographic'
                      }
                  },
                  updatemenus: [{
                    x: 0.85,
                    y: 1.15,
                    xref: 'paper',
                    yref: 'paper',
                    yanchor: 'top',
                    active: 0,
                    showactive: true,
                    buttons: [{
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'avg'],
                        label: 'Avg'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'sum'],
                        label: 'Sum'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'min'],
                        label: 'Min'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'max'],
                        label: 'Max'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'mode'],
                        label: 'Mode'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'median'],
                        label: 'Median'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'first'],
                        label: 'First'
                    }, {
                        method: 'restyle',
                        args: ['transforms[0].aggregations[0].func', 'last'],
                        label: 'Last'
                    }]
              }]
                };
            
                Plotly.plot('myDiv5', data, layout);
            
            });
                
                
                                                                        
Multiple Transforms in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
Filter and Group By

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var data = [{
      type: 'scatter',
      mode: 'markers',
      x: unpack(rows, 'lifeExp'),
      y: unpack(rows, 'gdpPercap'),
      text: unpack(rows, 'continent'),
      marker: {
        size: unpack(rows, 'pop'),
        sizemode: "area",
        sizeref: 200000
      },
      transforms: [
        {
        type: 'filter',
        target: unpack(rows, 'year'),
        operation: '=',
        value: '2007'
        }, {
        type: 'groupby',
        groups: unpack(rows, 'continent'),
        styles: [
          {target: 'Asia', value: {marker: {color: 'red'}}},
          {target: 'Europe', value: {marker: {color: 'blue'}}},
          {target: 'Americas', value: {marker: {color: 'orange'}}},
          {target: 'Africa', value: {marker: {color: 'green'}}},
          {target: 'Oceania', value: {marker: {color: 'purple'}}}
        ]
  }]
    }]

var layout = {
  yaxis: {
    type: 'log'
  }
}

Plotly.plot('graph', data, layout)
});
      
      
Filter and Aggregates
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var data = [{
      type: 'scatter',
      mode: 'markers',
      x: unpack(rows, 'lifeExp'),
      y: unpack(rows, 'gdpPercap'),
      text: unpack(rows, 'continent'),
      marker: {
        size: unpack(rows, 'pop'),
        sizemode: "area",
        sizeref: 200000
      },
      transforms: [
        {
          type: 'filter',
          target: unpack(rows, 'year'),
          operation: '=',
          value: '2007'
        }, {
          type: 'aggregate',
          groups: unpack(rows, 'continent'),
          aggregations: [
            {target: 'x', func: 'avg'},
            {target: 'y', func: 'avg'},
            {target: 'marker.size', func: 'sum'}
          ]
       }]
    }]

var layout = {
  yaxis: {
    type: 'log'
  }
}

Plotly.plot('graph', data, layout)
});
      
                                                                        
                                                                        
All Transforms
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                           
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var data = [{
      type: 'scatter',
      mode: 'markers',
      x: unpack(rows, 'lifeExp'),
      y: unpack(rows, 'gdpPercap'),
      text: unpack(rows, 'continent'),
      marker: {
        size: unpack(rows, 'pop'),
        sizemode: "area",
        sizeref: 200000
      },
      transforms: [
        {
          type: 'filter',
          target: unpack(rows, 'year'),
          operation: '=',
          value: '2007'
        }, {
          type: 'groupby',
          groups: unpack(rows, 'continent'),
          styles: [
            {target: 'Asia', value: {marker: {color: 'red'}}},
            {target: 'Europe', value: {marker: {color: 'blue'}}},
            {target: 'Americas', value: {marker: {color: 'orange'}}},
            {target: 'Africa', value: {marker: {color: 'green'}}},
            {target: 'Oceania', value: {marker: {color: 'purple'}}}
        ]
        }, {
          type: 'aggregate',
          groups: unpack(rows, 'continent'),
          aggregations: [
            {target: 'x', func: 'avg'},
            {target: 'y', func: 'avg'},
            {target: 'marker.size', func: 'sum'}
          ]
       }]
    }]

var layout = {
  title: '<b>Gapminder</b><br>2007 Average GDP Per Cap & Life Exp. by Continent',
  yaxis: {
    type: 'log'
  }
}

Plotly.plot('graph', data, layout)
});
               
Add Custom Controls

            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Dropdown Events in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
Add Two Dropdown Menus to a Chart with Plotly.js
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
function makeTrace(i) {
    return {
        y: Array.apply(null, Array(10)).map(() => Math.random()),
        line: {
            shape: 'spline' ,
            color: 'red'
        },
        visible: i === 0,
        name: 'Data set ' + i,
    };
}

Plotly.plot('graph', [0, 1, 2, 3].map(makeTrace), {
    updatemenus: [{
        y: 0.8,
        yanchor: 'top',
        buttons: [{
            method: 'restyle',
            args: ['line.color', 'red'],
            label: 'red'
        }, {
            method: 'restyle',
            args: ['line.color', 'blue'],
            label: 'blue'
        }, {
            method: 'restyle',
            args: ['line.color', 'green'],
            label: 'green'
        }]
    }, {
        y: 1,
        yanchor: 'top',
        buttons: [{
            method: 'restyle',
            args: ['visible', [true, false, false, false]],
            label: 'Data set 0'
        }, {
            method: 'restyle',
            args: ['visible', [false, true, false, false]],
            label: 'Data set 1'
        }, {
            method: 'restyle',
            args: ['visible', [false, false, true, false]],
            label: 'Data set 2'
        }, {
            method: 'restyle',
            args: ['visible', [false, false, false, true]],
            label: 'Data set 3'
        }]
    }],
});
      
Bind dropdown events to Plotly.js charts

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var allCountryNames = unpack(rows, 'country'),
        allYear = unpack(rows, 'year'),
        allGdp = unpack(rows, 'gdpPercap'),
        listofCountries = [],
        currentCountry,
        currentGdp = [],
        currentYear = [];

    for (var i = 0; i < allCountryNames.length; i++ ){
        if (listofCountries.indexOf(allCountryNames[i]) === -1 ){
            listofCountries.push(allCountryNames[i]);
        }
    }

    function getCountryData(chosenCountry) {
        currentGdp = [];
        currentYear = [];
        for (var i = 0 ; i < allCountryNames.length ; i++){
            if ( allCountryNames[i] === chosenCountry ) {
                currentGdp.push(allGdp[i]);
                currentYear.push(allYear[i]);
            }
        }
    };

    // Default Country Data
    setBubblePlot('Afghanistan');

    function setBubblePlot(chosenCountry) {
        getCountryData(chosenCountry);

        var trace1 = {
            x: currentYear,
            y: currentGdp,
            mode: 'lines+markers',
            marker: {
                size: 12,
                opacity: 0.5
            }
        };

        var data = [trace1];

        var layout = {
            title:'Line and Scatter Plot',
            height: 400,
            width: 480
        };

        Plotly.newPlot('plotdiv', data, layout);
    };

    var innerContainer = document.querySelector('[data-num="0"'),
        plotEl = innerContainer.querySelector('.plot'),
        countrySelector = innerContainer.querySelector('.countrydata');

    function assignOptions(textArray, selector) {
        for (var i = 0; i < textArray.length;  i++) {
            var currentOption = document.createElement('option');
            currentOption.text = textArray[i];
            selector.appendChild(currentOption);
        }
    }

    assignOptions(listofCountries, countrySelector);

    function updateCountry(){
        setBubblePlot(countrySelector.value);
    }

    countrySelector.addEventListener('change', updateCountry, false);
});
                                                                        
                                                                        
Button Events in plotly.js
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
Restyle Button Single Attribute

The restyle method should be used when modifying the data and data attributes of the graph
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
                                                                        
Restyle Button Multiple Attributes

This example demonstrates how to use a restyle button to update single attributes by passing a two element array to a button's args attribute or update multiple attributes at the same time by passing an array containing an object.
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var button_layer_1_height = 1.12
var button_layer_2_height = 1.0
var annotation_offset = 0.04

var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
        z: z_data,
        type:'surface',
        colorscale:'Viridis'
}]

var updatemenus=[
    {
        buttons: [
            {
                args: ['type', 'surface'],
                label: '3D Surface',
                method: 'restyle'
            },
            {
                args: ['type', 'heatmap'],
                label:'Heatmap',
                method:'restyle'
            },
            {
                args: ['type', 'contour'],
                label:'Contour',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: ['reversescale', true],
                label: 'Reverse',
                method: 'restyle'
            },
            {
                args: ['reversescale', false],
                label:'Undo Reverse',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.56,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: [{'contours.showlines':false, 'type':'contour'}],
                label: 'Hide lines',
                method: 'restyle'
            },
            {
                args: [{'contours.showlines':true, 'type':'contour'}],
                label:'Show lines',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.78,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: ['colorscale', 'Viridis'],
                label: 'Viridis',
                method: 'restyle'
            },
            {
                args: ['colorscale', 'Electric'],
                label:'Electric',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Earth'],
                label:'Earth',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Hot'],
                label:'Hot',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Jet'],
                label:'Jet',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Portland'],
                label:'Portland',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Rainbow'],
                label:'Rainbow',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Blackbody'],
                label:'Blackbody',
                method:'restyle'
            },

            {
                args: ['colorscale', 'Cividis'],
                label:'Cividis',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_1_height,
        yanchor: 'top'
    },
]

var annotations = [
    {
      text: 'Trace type:',
      x: 0,
      y: button_layer_2_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
    {
      text: 'Colorscale:',
      x: 0,
      y: button_layer_1_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
]

var layout = {
    margin: {t: 0, b: 0, l: 0, r: 0},
    updatemenus: updatemenus,
    annotations: annotations,
    scene: {
        xaxis:{
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor:'rgb(230, 230,230)'
        },
        yaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230, 230)'
        },
        zaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230,230)'
        },
        aspectratio: {x: 1, y: 1, z: 0.7},
        aspectmode: 'manual'
  }
}


Plotly.plot("myDiv", data, layout);

});
                                                                        
                                                                        
Relayout Button

The relayout method should be used when modifying the layout attributes of the graph.
theres a method for this
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/normal-clusters.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return parseFloat(row[key]); });
}

var button_layer_height = 1.2
var x0 = unpack(rows,'x0')
var x1 = unpack(rows,'x1')
var x2 = unpack(rows,'x2')
var y0 = unpack(rows,'y0')
var y1 = unpack(rows,'y1')
var y2 = unpack(rows,'y2')

var data = [{
    x: x0,
    y: y0,
    mode: 'markers',
    marker: {color: '#835AF1'}
  },
  {
    x: x1,
    y: y1,
    mode: 'markers',
    marker: {color: '#7FA6EE'}
  },
  {
    x: x2,
    y: y2,
    mode: 'markers',
    marker: {color: '#B8F7D4'}
  },

]

var cluster0 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x0), y0: Math.min(...y0),
                 x1: Math.max(...x0), y1: Math.max(...y0),
                 opacity: 0.25,
                 line: {color: '#835AF1'},
                 fillcolor: '#835AF1'}

var cluster1 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x1), y0: Math.min(...y1),
                 x1: Math.max(...x1), y1: Math.max(...y1),
                 opacity: 0.25,
                 line: {color: '#7FA6EE'},
                 fillcolor: '#7FA6EE'}

var cluster2 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x2), y0: Math.min(...y2),
                 x1: Math.max(...x2), y1: Math.max(...y2),
                 opacity: 0.25,
                 line: {color: '#B8F7D4'},
                 fillcolor: '#B8F7D4'}

var updatemenus=[
    {
        buttons: [
            {
                args: ['shapes', []],
                label: 'None',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster0]],
                label: 'Cluster 0',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster1]],
                label: 'Cluster 1',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster2]],
                label: 'Cluster 2',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster0, cluster1, cluster2]],
                label: 'All',
                method: 'relayout'
            },
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.1,
        xanchor: 'left',
        y: button_layer_height,
        yanchor: 'top'
    },

]

var layout = {
    updatemenus: updatemenus,
    showlegend: false
}


Plotly.plot("myDiv", data, layout);

});
                                                                        
                                                                        
Update Button
 
The update method should be used when modifying the data and layout sections of the graph.
impt
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

const arrAvg = arr => arr.reduce((a,b) => a + b, 0) / arr.length

var button_layer_2_height = 1.2
var high = unpack(rows, 'AAPL.High').map(x => parseFloat(x))
var low = unpack(rows, 'AAPL.Low').map(x => parseFloat(x))
var date = unpack(rows, 'Date')


var high_ave = arrAvg(high)
var high_max = Math.max(...high)
var low_ave = arrAvg(low)
var low_min = Math.min(...low)

var data = [{
    x: date,
    y: high,
    mode: 'lines',
    name: 'High',
    marker: {color: '#33CFA5'}
  },
  {
    x: date,
    y: date.map(a => high_ave),
    mode: 'lines',
    name: 'Low Average',
    line: {color: '#33CFA5', dash: 'dash'},
    visible: false
  },
  {
    x: date,
    y: low,
    name: 'Low',
    mode: 'lines',
    marker: {color: '#F06A6A'}
  },
  {
    x: date,
    y: date.map(a => low_ave),
    mode: 'lines',
    name: 'High Average',
    visible: false,
    line: {color: '#F06A6A', dash: 'dash'}
  },

]

var high_annotations = [
    {
      text: 'High Average:<br>' + high_ave.toFixed(2),
      x: '2016-03-01',
      y: high_ave,
      yref: 'y', xref: 'x',
      ay: -40, ax: 0
    },
    {
      text: 'High Max:<br>' + high_max.toFixed(2),
      x: date[high.indexOf(high_max)],
      y: high_max,
      yref: 'y', xref: 'x',
      ay: -40, ax: 0
    },
]

var low_annotations = [{
      text: 'Low Average:<br>' + low_ave.toFixed(2),
      x: '2015-05-01',
      y: low_ave,
      yref: 'y', xref: 'x',
      ay: 40, ax: 0
    },
    {
      text: 'Low Min:<br>' + low_min.toFixed(2),
      x: date[low.indexOf(low_min)],
      y: low_min,
      yref: 'y', xref: 'x',
      ay: 40, ax: 0
    }
 ]

var updatemenus=[
    {
        buttons: [
            {
                args: [{'visible': [true, true, false, false]},
                       {'title': 'Yahoo High',
                        'annotations': high_annotations}],
                label: 'High',
                method: 'update'
            },
            {
                args: [{'visible': [false, false, true, true,]},
                       {'title': 'Yahoo Low',
                        'annotations': low_annotations}],
                label: 'Low',
                method: 'update'
            },
            {
                args: [{'visible': [true, true, true, true,]},
                       {'title': 'Yahoo',
                        'annotations': [...low_annotations, ...high_annotations]}],
                label: 'Both',
                method: 'update'
            },
            {
                args: [{'visible': [true, false, true, false,]},
                       {'title': 'Yahoo',
                        'annotations': []}],
                label: 'Reset',
                method: 'update'
            },

        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.1,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },

]

var layout = {
    title: 'Yahoo',
    updatemenus: updatemenus,
    showlegend: false
}


Plotly.plot("myDiv", data, layout);

});
});
                                                                        
                                                                        
Style the Buttons
 
 When adding buttons to Plotly charts, users have the option of styling the color, font, padding, and position of the buttons.
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var button_layer_1_height = 1.12
var button_layer_2_height = 1.0
var annotation_offset = 0.04

var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
        z: z_data,
        type:'surface',
        colorscale:'Viridis'
}]

var updatemenus=[
    {
        buttons: [
            {
                args: ['type', 'surface'],
                label: '3D Surface',
                method: 'restyle'
            },
            {
                args: ['type', 'heatmap'],
                label:'Heatmap',
                method:'restyle'
            },
            {
                args: ['type', 'contour'],
                label:'Contour',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: ['reversescale', true],
                label: 'Reverse',
                method: 'restyle'
            },
            {
                args: ['reversescale', false],
                label:'Undo Reverse',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.56,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        active: 1,
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: [{'contours.showlines':false, 'type':'contour'}],
                label: 'Hide lines',
                method: 'restyle'
            },
            {
                args: [{'contours.showlines':true, 'type':'contour'}],
                label:'Show lines',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.78,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: ['colorscale', 'Viridis'],
                label: 'Viridis',
                method: 'restyle'
            },
            {
                args: ['colorscale', 'Electric'],
                label:'Electric',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Earth'],
                label:'Earth',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Hot'],
                label:'Hot',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Jet'],
                label:'Jet',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Portland'],
                label:'Portland',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Rainbow'],
                label:'Rainbow',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Blackbody'],
                label:'Blackbody',
                method:'restyle'
            },

            {
                args: ['colorscale', 'Cividis'],
                label:'Cividis',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_1_height,
        yanchor: 'top',
        active: 1,
        bgcolor: '#aaaaaa',
        bordercolor: '#FFFFFF'
    },
]

var annotations = [
    {
      text: 'Trace type:',
      x: 0,
      y: button_layer_2_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
    {
      text: 'Colorscale:',
      x: 0,
      y: button_layer_1_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
]

var layout = {
    paper_bgcolor: 'black',
    margin: {t: 0, b: 0, l: 0, r: 0},
    updatemenus: updatemenus,
    annotations: annotations,
    scene: {
        bgcolor: 'black',
        aspectratio: {x: 1, y: 1, z: 0.7},
        aspectmode: 'manual'
  }
}


Plotly.plot("myDiv", data, layout);

});
                                                                        

Slider Events in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]

 
Basic Slider

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.plot('graph', [{
  x: [1, 2, 3],
  y: [2, 1, 3]
}], {
  sliders: [{
    pad: {t: 30},
    currentvalue: {
      xanchor: 'right',
      prefix: 'color: ',
      font: {
        color: '#888',
        size: 20
      }
    },
    steps: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }]
});
      
                                                                              
Bind Components to the Appearance of a Plot

adding buttons to a plot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.plot('graph', [{
  x: [1, 2, 3],
  y: [2, 1, 3]
}], {
  sliders: [{
    pad: {t: 30},
    len: 0.5,
    x: 0.5,
    currentvalue: {
      xanchor: 'right',
      prefix: 'color: ',
      font: {
        color: '#888',
        size: 20
      }
    },
    // If all of a component's commands affect a single attribute, the component
    // will be bound to the plot and will automatically update to reflect changes.
    steps: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }],
  updatemenus: [{
    pad: {t: 60, r: 30},
    type: 'buttons',
    xanchor: 'left',
    yanchor: 'top',
    x: 00,
    y: 0,
    direction: 'right',
    buttons: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }]
});
                                                                        
                                                                        
Add a Play Button to Control a Slider
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.plot('graph', {
  data: [{
    x: [1, 2, 3],
    y: [2, 1, 3],
    line: {
      color: 'red',
      simplify: false,
    }
  }],
  layout: {
    sliders: [{
      pad: {t: 30},
      x: 0.05,
      len: 0.95,
      currentvalue: {
        xanchor: 'right',
        prefix: 'color: ',
        font: {
          color: '#888',
          size: 20
        }
      },
      transition: {duration: 500},
      // By default, animate commands are bound to the most recently animated frame:
      steps: [{
        label: 'red',
        method: 'animate',
        args: [['red'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }, {
        label: 'green',
        method: 'animate',
        args: [['green'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }, {
        label: 'blue',
        method: 'animate',
        args: [['blue'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }]
    }],
    updatemenus: [{
      type: 'buttons',
      showactive: false,
      x: 0.05,
      y: 0,
      xanchor: 'right',
      yanchor: 'top',
      pad: {t: 60, r: 20},
      buttons: [{
        label: 'Play',
        method: 'animate',
        args: [null, {
          fromcurrent: true,
          frame: {redraw: false, duration: 1000},
          transition: {duration: 500}
        }]
      }]
    }]
  },
  // The slider itself does not contain any notion of timing, so animating a slider
  // must be accomplished through a sequence of frames. Here we'll change the color
  // and the data of a single trace:
  frames: [{
    name: 'red',
    data: [{
      y: [2, 1, 3],
      'line.color': 'red'
    }]
  }, {
    name: 'green',
    data: [{
      y: [3, 2, 1],
      'line.color': 'green'}]
  }, {
    name: 'blue',
    data: [{
      y: [1, 3, 2],
      'line.color': 'blue'}]
  }]
});
      
Lasso Selection
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
Lasso Selection
            .___
            [__]
        .___    .___
      | [__]    [__]  |

var graphDiv = document.getElementById('graph');
var N = 1000;
var color1 = '#7b3294';
var color1Light = '#c2a5cf';
var colorX = '#ffa7b5';
var colorY = '#fdae61';

function randomArray() {
  var out = new Array(N);
  for(var i = 0; i < N; i++) {
    out[i] = Math.random();
  }
  return out;
}
var x = randomArray();
var y = randomArray();

Plotly.plot(graphDiv, [{
  type: 'scatter',
  mode: 'markers',
  x: x,
  y: y,
  xaxis: 'x',
  yaxis: 'y',
  name: 'random data',
  marker: {color: color1, size: 10}
}, {
  type: 'histogram',
  x: x,
  xaxis: 'x2',
  yaxis: 'y2',
  name: 'x coord dist.',
  marker: {color: colorX}
}, {
  type: 'histogram',
  x: y,
  xaxis: 'x3',
  yaxis: 'y3',
  name: 'y coord dist.',
  marker: {color: colorY}
}], {
  title: 'Lasso around the scatter points to see sub-distributions',
  dragmode: 'lasso',
  xaxis: {
    zeroline: false,
  },
  yaxis: {
    domain: [0.55, 1],
  },
  xaxis2: {
    domain: [0, 0.45],
    anchor: 'y2',
  },
  yaxis2: {
    domain: [0, 0.45],
    anchor: 'x2'
  },
  xaxis3: {
    domain: [0.55, 1],
    anchor: 'y3'
  },
  yaxis3: {
    domain: [0, 0.45],
    anchor: 'x3'
  }
});

graphDiv.on('plotly_selected', function(eventData) {
  var x = [];
  var y = [];

  var colors = [];
  for(var i = 0; i < N; i++) colors.push(color1Light);

  console.log(eventData.points)

  eventData.points.forEach(function(pt) {
    x.push(pt.x);
    y.push(pt.y);
    colors[pt.pointNumber] = color1;
  });

  Plotly.restyle(graphDiv, {
    x: [x, y],
    xbins: {}
  }, [1, 2]);

  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);
});


Range Slider and Selector in plotly.js

            .__
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 Basic Range Slider on Time Series
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var rawDataURL = 'https://raw.githubusercontent.com/plotly/datasets/master/2016-weather-data-seattle.csv';
var xField = 'Date';
var yField = 'Mean_TemperatureC';

var selectorOptions = {
    buttons: [{
        step: 'month',
        stepmode: 'backward',
        count: 1,
        label: '1m'
    }, {
        step: 'month',
        stepmode: 'backward',
        count: 6,
        label: '6m'
    }, {
        step: 'year',
        stepmode: 'todate',
        count: 1,
        label: 'YTD'
    }, {
        step: 'year',
        stepmode: 'backward',
        count: 1,
        label: '1y'
    }, {
        step: 'all',
    }],
};

Plotly.d3.csv(rawDataURL, function(err, rawData) {
    if(err) throw err;

    var data = prepData(rawData);
    var layout = {
        title: 'Time series with range slider and selectors',
        xaxis: {
            rangeselector: selectorOptions,
            rangeslider: {}
        },
        yaxis: {
            fixedrange: true
        }
    };

    Plotly.plot('graph', data, layout);
});

function prepData(rawData) {
    var x = [];
    var y = [];

    rawData.forEach(function(datum, i) {

        x.push(new Date(datum[xField]));
        y.push(datum[yField]);
    });

    return [{
        mode: 'lines',
        x: x,
        y: y
    }];
}

Custom Chart Events

file chartEvents.html
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Click Events in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Click Event Data & Binding to Click Events
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      

  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point
    pointNumber: 2,  // index of the selected point
    x: 5,        // x value
    y: 600,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.plot associated with the selected point
    fullData: {/* */},   // ref to the trace including all the defaults
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
var myPlot = document.getElementById('myDiv0'),
    d3 = Plotly.d3,
    N = 16,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y, type:'scatter',
            mode:'markers', marker:{size:16} } ],
    layout = {
        hovermode:'closest',
        title:'Click on Points'
     };

Plotly.newPlot( myPlot, data, layout);

myPlot.on('plotly_click', function(data){
    var pts = '';
    for(var i=0; i &lt; data.points.length; i++){
        pts = 'x = '+data.points[i].x +'\ny = '+
            data.points[i].y.toPrecision(4) + '\n\n';
    }
    alert('Closest point clicked:\n\n'+pts);
});
                                                                              
                                                                              
Create annotation on click event
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

var resolveDiv1 = new Promise((resolve,reject)=>{
var myPlot = document.getElementById('myDiv1'),
    d3 = Plotly.d3,
    N = 100,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal(-2) ),
    y3 = d3.range(N).map( d3.random.normal(2) ),
    trace1 = { x:x, y:y1, type:'scatter', mode:'lines', name:'Jeff' },
    trace2 = { x:x, y:y2, type:'scatter', mode:'lines', name:'Terren' },
    trace3 = { x:x, y:y3, type:'scatter', mode:'lines', name:'Arthur' },
    data = [ trace1, trace2, trace3 ],
    layout = {
        hovermode:'closest',
        title:'Click on Points to add an Annotation on it'
     };

Plotly.newPlot(myPlot, data, layout);

myPlot.on('plotly_click', function(data){
    var pts = '';
    for(var i=0; i &lt; data.points.length; i++){
        annotate_text = 'x = '+data.points[i].x +
                      'y = '+data.points[i].y.toPrecision(4);

        annotation = {
          text: annotate_text,
          x: data.points[i].x,
          y: parseFloat(data.points[i].y.toPrecision(4))
        }
ultraObject.propertyUndefined({
        target:self,
        expected:ultraObject.iterify({iterify:["layout","annotations"]}),
//         stack:'true'
        noVal:{'a':'b'}
})

 var objI_0_i = ultraObject.scope.add(   {value:ultraObject.objIO.abelast[   ultraObject.objIO.abelast.length-1   ]}   )

if(   ultraObject.isPrimitive(   {type:ultraObject.objIO[   ultraObject.scope[objI_0_i]   ].result}   )   ){
    
    annotations = self.layout.annotations

}

else if(   !ultraObject.isPrimitive(   {type:ultraObject.objIO[   ultraObject.scope[objI_0_i]   ].result}   )   ){
    
    if(   ultraObject.objIO[   ultraObject.scope[objI_0_i]   ].result['a'] === 'b'   ){
        annotations = []
    }
    
    else if(   !ultraObject.objIO[   ultraObject.scope[objI_0_i]   ].result['a'] === 'b'   ){
        annotations = self.layout.annotations
    }
    
}

        annotations.push(annotation);
        Plotly.relayout(myPlot,{annotations: annotations})
    }
});
        })
                          '


Hover Events in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Capturing Hover Events: Data
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
{
        

        var resolveDiv2 = new Promise((resolve,reject)=>{
            
  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point
    pointNumber: 2,  // index of the selected point
    x: 5,        // x value
    y: 600,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.plot associated with the selected point
    fullData: {/* */},   // ref to the trace including all the defaults
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
            var element12 = document.createElement("div")
            document.body.appendChild(element12)
            var node12 = document.querySelectorAll("div")[document.querySelectorAll("div").length-1]
            var id12 = document.createAttribute("id")
            id12.value = 'hoverinfo'
            element12.setAttributeNode(id12)
            
var myPlot = document.getElementById('myDiv2'),
    hoverInfo = document.getElementById('hoverinfo'),
    d3 = Plotly.d3,
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16} },
        { x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16} } ];
    layout = {
        hovermode:'closest',
        title:'Hover on Points'
     };

Plotly.plot(myPlot, data, layout);

myPlot.on('plotly_hover', function(data){
    var infotext = data.points.map(function(d){
      return (d.data.name+': x= '+d.x+', y= '+d.y.toPrecision(3));
    });

    hoverInfo.innerHTML = infotext.join('<br/>');
})
 .on('plotly_unhover', function(data){
    hoverInfo.innerHTML = '';
});
        })
    }
      
                                                                              
Capturing Hover Events: Pixels
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
 {
        var resolveDiv3 = new Promise((resolve,reject)=>{
            var element12 = document.createElement("div")
            document.body.appendChild(element12)
            var node12 = document.querySelectorAll("div")[document.querySelectorAll("div").length-1]
            var id12 = document.createAttribute("id")
            id12.value = 'hoverinfo'
            element12.setAttributeNode(id12)
var myPlot = document.getElementById('myDiv3'),
    hoverInfo = document.getElementById('hoverinfo'),
    d3 = Plotly.d3,
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map(d3.random.normal()),
    y2 = d3.range(N).map(d3.random.normal()),
    data = [{x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16}},
        {x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16}}],
    layout = {hovermode:'closest',
              title:'Hover on Points to see<br>Pixel Coordinates'};

Plotly.plot(myPlot, data, layout);

myPlot.on('plotly_hover', function(data){
    var xaxis = data.points[0].xaxis,
        yaxis = data.points[0].yaxis;
    var infotext = data.points.map(function(d){
      return ('width: '+xaxis.l2p(d.x)+', height: '+yaxis.l2p(d.y));
    });

    hoverInfo.innerHTML = infotext.join('<br/>');
})
 .on('plotly_unhover', function(data){
    hoverInfo.innerHTML = '';
});
        })
    }
                                                                        

Triggering Hover Events
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
{
        var resolveDiv4 = new Promise((resolve,reject)=>{
            var element12 = document.createElement("button")
            document.body.appendChild(element12)
            var node12 = document.querySelectorAll("button")[document.querySelectorAll("button").length-1]
            var id12 = document.createAttribute("id")
            id12.value = 'hoverbutton'
            element12.setAttributeNode(id12)
            var text12 = document.createTextNode("Go");
            element12.appendChild(text12)
            
var myPlot = document.getElementById('myDiv4'),
    hoverButton = document.getElementById('hoverbutton'),
    d3 = Plotly.d3,
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16} },
        { x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16} } ];
    layout = {
        hovermode:'closest',
        title:'Click "Go" button to trigger hover'
     };

Plotly.plot(myPlot, data, layout);

myPlot.on('plotly_beforehover',function(){
    return false;
});

hoverButton.addEventListener('click', function(){
    var curve1 = Math.floor(Math.random()*2),
        curve2 = Math.floor(Math.random()*2),
        point1 = Math.floor(Math.random()*14),
        point2 = Math.floor(Math.random()*14);
    Plotly.Fx.hover(myPlot,[
        {curveNumber:curve1, pointNumber:point1},
        {curveNumber:curve2, pointNumber:point2}
    ]);
});
            
        })
    }
                                                                        
                                                                        
Coupled Hover Events
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
{
        var resolveDiv5 = new Promise((resolve,reject)=>{
            
var myPlot = document.getElementById('myDiv5'),
    d3 = Plotly.d3,
    N = 12,
    x1 = d3.range(N).map( d3.random.normal() ),
    x2 = d3.range(N).map( d3.random.normal() ),
    x3 = d3.range(N).map( d3.random.normal() ),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    y3 = d3.range(N).map( d3.random.normal() ),
    months = ['January', 'February', 'March', 'April',
              'May', 'June', 'July', 'August',
              'September', 'October', 'November', 'December']
    data = [{ x: x1, y: y1, text: months, type: 'scatter', name: '2014', hoverinfo: 'text+x+y',
              mode: 'markers', marker: {color: 'rgba(200, 50, 100, .7)', size: 16}
            },
            { x: x2, y: y2, text: months, type: 'scatter', name: '2015', hoverinfo: 'text+x+y',
             mode: 'markers', marker: {color: 'rgba(120, 20, 130, .7)', size: 16}
            },
            { x: x3, y: y3, text: months, type: 'scatter', name: '2016', hoverinfo: 'text+x+y',
             mode: 'markers', marker: {color: 'rgba(10, 180, 180, .8)', size: 16}
            }];
    layout = {
        hovermode:'closest',
        title:'Display Hover Info for Related Points',
        xaxis:{zeroline:false, hoverformat: '.2r'},
        yaxis:{zeroline:false, hoverformat: '.2r'}
     };

Plotly.newPlot(myPlot, data, layout);

myPlot.on('plotly_hover', function (eventdata){
    var points = eventdata.points[0],
        pointNum = points.pointNumber;

    Plotly.Fx.hover(myPlot,[
        { curveNumber:0, pointNumber:pointNum },
        { curveNumber:1, pointNumber:pointNum },
        { curveNumber:2, pointNumber:pointNum },
    ]);
});
        })
    }
                                                                        
                                                                        
Combined Click and Hover Events
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
https://codepen.io/plotly/pen/eJOyej
      
      
Zoom Events in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


Binding to Zoom Events
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var myDiv = document.getElementById('myDiv');

var d3 = Plotly.d3,
    N = 40,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y } ];
    layout = { title:'Click-drag to zoom' };

Plotly.plot(myDiv, data, layout);

myDiv.on('plotly_relayout',
    function(eventdata){
        alert( 'ZOOM!' + '\n\n' +
            'Event data:' + '\n' +
             JSON.stringify(eventdata) + '\n\n' +
            'x-axis start:' + eventdata['xaxis.range[0]'] + '\n' +
            'x-axis end:' + eventdata['xaxis.range[1]'] );
    });

               
Disable Zoom Events in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Disabling Zoom Events for X Axis
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function makeplot() {
    Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );

};

function processData(allRows) {

    console.log(allRows);
    var x = [], y = [], standard_deviation = [];

    for (var i=0; i&lt;allRows.length; i++) {
        row = allRows[i];
        x.push( row['AAPL_x'] );
        y.push( row['AAPL_y'] );
    }
    console.log( 'X',x, 'Y',y, 'SD',standard_deviation );
    makePlotly( x, y, standard_deviation );
}

function makePlotly( x, y, standard_deviation ){
    var plotDiv = document.getElementById("plot");
    var traces = [{
        x: x,
        y: y
    }];

    var layout = { xaxis:
                          {
                            fixedrange: true
                          }
                };

    Plotly.newPlot('myDiv', traces, layout,
        {title: 'Plotting CSV data from AJAX call'});
};
  makeplot();
      
      
Disabling Zoom Events for X and Y Axis
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function makeplot() {
    Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );

};

function processData(allRows) {

    console.log(allRows);
    var x = [], y = [], standard_deviation = [];

    for (var i=0; i&lt;allRows.length; i++) {
        row = allRows[i];
        x.push( row['AAPL_x'] );
        y.push( row['AAPL_y'] );
    }
    console.log( 'X',x, 'Y',y, 'SD',standard_deviation );
    makePlotly( x, y, standard_deviation );
}

function makePlotly( x, y, standard_deviation ){
    var plotDiv = document.getElementById("plot");
    var traces = [{
        x: x,
        y: y
    }];

    var layout = {
                   yaxis: {
                           fixedrange: true
                          },
                   xaxis : {
                            fixedrange: true
                            }
                  };

    Plotly.newPlot('myDiv', traces, layout,
        {title: 'Plotting CSV data from AJAX call'});
};
  makeplot();
                                                                        

Animmtions
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Adding Sliders to Animations in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Animating with a Slider
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function (err, data) {
    if(err){
        reject(err)
    }
  // Create a lookup table to sort and regroup the columns of data,
  // first by year, then by continent:
  var lookup = {};
  function getData(year, continent) {
    var byYear, trace;
    if (!(byYear = lookup[year])) {;
      byYear = lookup[year] = {};
    }
	 // If a container for this year + continent doesn't exist yet,
	 // then create one:
    if (!(trace = byYear[continent])) {
      trace = byYear[continent] = {
        x: [],
        y: [],
        id: [],
        text: [],
        marker: {size: []}
      };
    }
    return trace;
  }

  // Go through each row, get the right trace, and append the data:
  for (var i = 0; i < data.length; i++) {
    var datum = data[i];
    var trace = getData(datum.year, datum.continent);
    trace.text.push(datum.country);
    trace.id.push(datum.country);
    trace.x.push(datum.lifeExp);
    trace.y.push(datum.gdpPercap);
    trace.marker.size.push(datum.pop);
  }

  // Get the group names:
  var years = Object.keys(lookup);
  // In this case, every year includes every continent, so we
  // can just infer the continents from the *first* year:
  var firstYear = lookup[years[0]];
  var continents = Object.keys(firstYear);

  // Create the main traces, one for each continent:
  var traces = [];
  for (i = 0; i < continents.length; i++) {
    var data = firstYear[continents[i]];
	 // One small note. We're creating a single trace here, to which
	 // the frames will pass data for the different years. It's
	 // subtle, but to avoid data reference problems, we'll slice
	 // the arrays to ensure we never write any new data into our
	 // lookup table:
    traces.push({
      name: continents[i],
      x: data.x.slice(),
      y: data.y.slice(),
      id: data.id.slice(),
      text: data.text.slice(),
      mode: 'markers',
      marker: {
        size: data.marker.size.slice(),
        sizemode: 'area',
        sizeref: 200000
      }
    });
  }

  // Create a frame for each year. Frames are effectively just
  // traces, except they don't need to contain the *full* trace
  // definition (for example, appearance). The frames just need
  // the parts the traces that change (here, the data).
  var frames = [];
  for (i = 0; i < years.length; i++) {
    frames.push({
      name: years[i],
      data: continents.map(function (continent) {
        return getData(years[i], continent);
      })
    })
  }

  // Now create slider steps, one for each frame. The slider
  // executes a plotly.js API command (here, Plotly.animate).
  // In this example, we'll animate to one of the named frames
  // created in the above loop.
  var sliderSteps = [];
  for (i = 0; i < years.length; i++) {
    sliderSteps.push({
      method: 'animate',
      label: years[i],
      args: [[years[i]], {
        mode: 'immediate',
        transition: {duration: 300},
        frame: {duration: 300, redraw: false},
      }]
    });
  }

  var layout = {
    xaxis: {
      title: 'Life Expectancy',
      range: [30, 85]
    },
    yaxis: {
      title: 'GDP per Capita',
      type: 'log'
    },
    hovermode: 'closest',
	 // We'll use updatemenus (whose functionality includes menus as
	 // well as buttons) to create a play button and a pause button.
	 // The play button works by passing `null`, which indicates that
	 // Plotly should animate all frames. The pause button works by
	 // passing `[null]`, which indicates we'd like to interrupt any
	 // currently running animations with a new list of frames. Here
	 // The new list of frames is empty, so it halts the animation.
    updatemenus: [{
      x: 0,
      y: 0,
      yanchor: 'top',
      xanchor: 'left',
      showactive: false,
      direction: 'left',
      type: 'buttons',
      pad: {t: 87, r: 10},
      buttons: [{
        method: 'animate',
        args: [null, {
          mode: 'immediate',
          fromcurrent: true,
          transition: {duration: 300},
          frame: {duration: 500, redraw: false}
        }],
        label: 'Play'
      }, {
        method: 'animate',
        args: [[null], {
          mode: 'immediate',
          transition: {duration: 0},
          frame: {duration: 0, redraw: false}
        }],
        label: 'Pause'
      }]
    }],
	 // Finally, add the slider and use `pad` to position it
	 // nicely next to the buttons.
    sliders: [{
      pad: {l: 130, t: 55},
      currentvalue: {
        visible: true,
        prefix: 'Year:',
        xanchor: 'right',
        font: {size: 20, color: '#666'}
      },
      steps: sliderSteps
    }]
  };

  // Create the plot:
  Plotly.plot('myDiv0', {
    data: traces,
    layout,
    frames,
  });
});
      
      
Filled-Area Animation in plotly.js

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Filled-Area-Animation

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var frames = []
  var x = unpack(rows, 'AAPL_x')
  var y = unpack(rows, 'AAPL_y')

  var n = 100;
  for (var i = 0; i < n; i++) {
    frames[i] = {data: [{x: [], y: []}]}
    frames[i].data[0].x = x.slice(0, i+1);
    frames[i].data[0].y = y.slice(0, i+1);
  }

  Plotly.plot('myDiv', [{
    x: frames[1].data[0].x,
    y: frames[1].data[0].y,
    fill: 'tozeroy',
    type: 'scatter',
    mode: 'lines',
    line: {color: 'green'}
  }], {
    title: "Filled-Area Animation",
    xaxis: {
      type: 'date',
      range: [
        frames[99].data[0].x[0],
        frames[99].data[0].x[99]
      ]
    },
    yaxis: {
      range: [
        0,
        90
      ]
    },
    updatemenus: [{
      x: 0.1,
      y: 0,
      yanchor: "top",
      xanchor: "right",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 0,
          },
          frame: {
            duration: 40,
            redraw: false
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0,
              redraw: false
            }
          }
        ],
        label: "Pause"
      }]
    }]
  }).then(function() {
    Plotly.addFrames('myDiv', frames);
  });

})
                           
                                                                        
Multiple Trace Filled-Area
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var frames = []
  var x = unpack(rows, 'Date')
  var y = unpack(rows, 'AAPL.High')
  var x2 = unpack(rows, 'Date')
  var y2 = unpack(rows, 'AAPL.Low')

  var n = 100;
  for (var i = 0; i < n; i++) {
    frames[i] = {data: [{x: [], y: []}, {x: [], y: []}]}
    frames[i].data[1].x = x.slice(0, i+1);
    frames[i].data[1].y = y.slice(0, i+1);
    frames[i].data[0].x = x2.slice(0, i+1);
    frames[i].data[0].y = y2.slice(0, i+1);
  }

  var trace2 = {
    type: "scatter",
    mode: "lines",
    name: 'AAPL High',
    fill: 'tonexty',
    x: frames[5].data[1].x,
    y: frames[5].data[1].y,
    line: {color: 'grey'}
  }

  var trace1 = {
    type: "scatter",
    mode: "lines",
    name: 'AAPL Low',
    x: frames[5].data[0].x,
    y: frames[5].data[0].y,
    line: {color: 'lightgrey'}
  }

  var data = [trace1,trace2];

  var layout = {
    title: 'Multiple Trace Filled-Area Animation',
    xaxis: {
      range: [frames[99].data[0].x[0], frames[99].data[0].x[99]],
      showgrid: false
    },
    yaxis: {
      range: [120, 140],
      showgrid: false
    },
    legend: {
      orientation: 'h',
      x: 0.5,
      y: 1.2,
      xanchor: 'center'
    },
    updatemenus: [{
      x: 0.5,
      y: 0,
      yanchor: "top",
      xanchor: "center",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 0,
          },
          frame: {
            duration: 40,
            redraw: false
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0,
              redraw: false
            }
          }
        ],
        label: "Pause"
      }]
    }]
  };

  Plotly.newPlot('myDiv', data, layout).then(function() {
    Plotly.addFrames('myDiv', frames);
  });
})


Animations in plotly.js


Plotly.animate transitions traces to a new state or sequence of states. When you tell Plotly to animate, it merges the properties you've supplied into the current state of the plot. Therefore to animate a trace, you must first plot the trace you wish to animate.

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Animating the Data
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.newPlot('graph', [{
  x: [1, 2, 3],
  y: [0, 0.5, 1],
  line: {simplify: false},
}]);

function randomize() {
  Plotly.animate('graph', {
    data: [{y: [Math.random(), Math.random(), Math.random()]}],
    traces: [0],
    layout: {}
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    },
    frame: {
      duration: 500
    }
  })
}


                                                                        
                                                                        
Animating the Layout
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
{
        var resolveDiv4 = new Promise((resolve,reject)=>{
            
var n = 500;
var x = [], y = [];
for (var i = 0; i < n; i++) {
  x[i] = i / (n - 1);
  y[i] = x[i] + 0.2 * (Math.random() - 0.5);
}

Plotly.plot('myDiv4', [{
  x: x,
  y: y,
  mode: 'markers'
}], {
  xaxis: {range: [0, 1]},
  yaxis: {range: [0, 1]}
});

function zoom() {
  var min = 0.45 * Math.random();
  var max = 0.55 + 0.45 * Math.random();
  Plotly.animate('myDiv4', {
    layout: {
      xaxis: {range: [min, max]},
      yaxis: {range: [min, max]}
    }
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    }
  })
}

            var FL_0_i = {
                forLoop_0_i:0,
                forLoopLength:10,
                fn:function(   dev_obj   ){
                    zoom()
                },
                args: {}
            }
            ultraObject.forLoop(   FL_0_i   )
        })
    }
                                                                        
                                                                        
Defining Named Frames with Plotly.addFrames
 
 
 
 The above examples pass the data itself through the Plotly.animate command. You may instead predefine named frames through the Plotly.addFrames command. Then, instead of passing frames through Plotly.animate, you may simply refer to a frame by name.

Similar to traces, frames are assigned a serial index as they are added. Frames may be updated by passing an array of frame indices. For example, the command to update the frame with index 2 would be Plotly.addFrames('graph', [{...}], [2]). Frames can be similarly deleted with, for example, Plotly.deleteFrames('graph', [2]).
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var frames = [
  {name: 'sine', data: [{x: [], y: []}]},
  {name: 'cosine', data: [{x: [], y: []}]},
  {name: 'circle', data: [{x: [], y: []}]},
];

var n = 100;
for (var i = 0; i < n; i++) {
  var t = i / (n - 1) * 2 - 1;

  // A sine wave:
  frames[0].data[0].x[i] = t * Math.PI;
  frames[0].data[0].y[i] = Math.sin(t * Math.PI);

  // A cosine wave:
  frames[1].data[0].x[i] = t * Math.PI;
  frames[1].data[0].y[i] = Math.cos(t * Math.PI);

  // A circle:
  frames[2].data[0].x[i] = Math.sin(t * Math.PI);
  frames[2].data[0].y[i] = Math.cos(t * Math.PI);
}

Plotly.plot('graph', [{
  x: frames[0].data[0].x,
  y: frames[0].data[0].y,
  line: {simplify: false},
}], {
  xaxis: {range: [-Math.PI, Math.PI]},
  yaxis: {range: [-1.2, 1.2]},
  updatemenus: [{
    buttons: [
      {method: 'animate', args: [['sine']], label: 'sine'},
      {method: 'animate', args: [['cosine']], label: 'cosine'},
      {method: 'animate', args: [['circle']], label: 'circle'}
    ]
  }]
}).then(function() {
  Plotly.addFrames('graph', frames);
});
                                                                        
                                                                        
Animating Sequences of Frames

he above examples have used one frame at a time. Whether passing objects as frames or referring to frames by name, you may pass multiple frames together in an array. If null or undefined is passed as the second argument (i.e. Plotly.animate('graph')), then all defined frames will be animated in sequence.

The third argument of Plotly.animate contains animation options. The transition duration defines the amount of time spent interpolating a trace from one state to another (currently limited to scatter traces), while the frame duration defines the total time spent in that state, including time spent transitioning. The example below has two frames, each with their own transition and frame timing.
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Plotly.plot('graph', [{
  x: [0, 0],
  y: [-1, 1],
}], {
  xaxis: {range: [-Math.PI, Math.PI]},
  yaxis: {range: [-1.3, 1.3]}
}).then(function () {
  Plotly.addFrames('graph', [
    {
      data: [{x: [1, -1], y: [0, 0]}],
      name: 'frame1'
    }, {
      data: [{x: [0, 0], y: [-1, 1]}],
      name: 'frame2'
    }
  ]);
})

function startAnimation() {
  Plotly.animate('graph', ['frame1', 'frame2'], {
    frame: [
      {duration: 1500},
      {duration: 500},
    ],
    transition: [
      {duration: 800, easing: 'elastic-in'},
      {duration: 100, easing: 'cubic-in'},
    ],
    mode: 'afterall'
  })
}
                                                                        
                                                                        
Animating Many Frames Quickly

By default and to ensure any properties that cannot be animated are applied to the plot, a full redraw occurs after each transition. This is generally desirable, but hurts performance when you wish to animate frames as quickly as possible. The example below performs a live simulation of the Lorenz attractor and greatly improves the performance by eliminating the redraw with redraw: false.
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
 var resolveDiv7 = new Promise((resolve,reject)=>{
            
var n = 100;
var x = [], y = [], z = [];
var dt = 0.015;

for (i = 0; i < n; i++) {
  x[i] = Math.random() * 2 - 1;
  y[i] = Math.random() * 2 - 1;
  z[i] = 30 + Math.random() * 10;
}

Plotly.plot('myDiv7', [{
  x: x,
  y: z,
  mode: 'markers'
}], {
  xaxis: {range: [-40, 40]},
  yaxis: {range: [0, 60]}
})

function compute () {
  var s = 10, b = 8/3, r = 28;
  var dx, dy, dz;
  var xh, yh, zh;
  for (var i = 0; i < n; i++) {
    dx = s * (y[i] - x[i]);
    dy = x[i] * (r - z[i]) - y[i];
    dz = x[i] * y[i] - b * z[i];

    xh = x[i] + dx * dt * 0.5;
    yh = y[i] + dy * dt * 0.5;
    zh = z[i] + dz * dt * 0.5;

    dx = s * (yh - xh);
    dy = xh * (r - zh) - yh;
    dz = xh * yh - b * zh;

    x[i] += dx * dt;
    y[i] += dy * dt;
    z[i] += dz * dt;
  }
}

function update () {
  compute();

  Plotly.animate('myDiv7', {
    data: [{x: x, y: z}]
  }, {
    transition: {
      duration: 0
    },
    frame: {
      duration: 0,
      redraw: false
    }
  });

  requestAnimationFrame(update);
}

requestAnimationFrame(update);
        })
                                                                        
                                                                        
Object Constancy

For scatter traces, you may wish to retain a marker's identity as it is updated. If you include an array of string ids with the trace, the marker identity will be retained. By shuffling the ids, the example below shuffles the markers each time the button is pressed.
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function shuffleInPlace(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

var ids = ['1', '2', '3', '4', '5', '6'];

Plotly.plot('graph', [{
  x: [1, 0.5, -0.5, -1, -0.5, 0.5],
  y: [0, 0.866, 0.866, 0, -0.866, -0.866],
  marker:{size:14,
			 color:['#631357', '#880E4F', '#AD1457',
					  '#F06292', '#F48FB1']},
  ids: ids,
  mode: 'markers'
}], {
  xaxis: {range: [-3, 3]},
  yaxis: {range: [-2, 2]}
});

function animateShuffle() {
  shuffleInPlace(ids);
  Plotly.animate('graph', [{
    data: [{ids: ids}]
  }]);
}
                                                                        
                                                                        
Frame Groups and Animation Modes
 
 
 The first row of buttons animates a different set of predefined frames by changing the second argument of Plotly.animate. Passing null or undefined animates all defined frames in sequence, while passing an array of strings (here, the frames in reverse) animates a specific sequence of frames. By passing a plain string (here, lower or upper), it filters the animated frames to those with a group property equal to that name. The stop button is accomplished by interrupting the current animation with an empty list of frames, therefore simply stopping the animation at the end of the current frame.

The second row of buttons animates all frames with different animation modes. The mode option defines whether an animation either interrupts or follows the current animation. immediate mode discards all queued frames and begins a new sequence immediately. The next mode is very similar but doesn't begin the new animation until the end of the current frame. Finally, afterall queues the new frames so that the new animation begins only after all previous animations have completed.
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Map Animation in plotly.js
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Map Animations
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      bad example we need a better data that has massive difference
      
Plotly.d3.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/usa_pop_melted.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; })
  }

  var frames = []
  var z = unpack(rows, 'pop')
  var locations = unpack(rows, 'abb')

  var n = 7;
  var j = 51;
  var k = 0;
  var num = 2009
  for (var i = 0; i < n; i++) {
    k++
    num++
    j = 51
    j = j*k
    frames[i] = {data: [{z: [], locations: []}], name: num}
    frames[i].data[0].z = z.slice(0, j);
    frames[i].data[0].locations = locations.slice(0, j);
  }

var data = [{
      type: 'choropleth',
      locationmode: 'USA-states',
      locations: frames[0].data[0].locations,
      z: frames[0].data[0].z,
      text: frames[0].data[0].locations,
      zauto: false,
      zmin: 500000,
      zmax: 50000000

}];

var layout = {
    title: 'USA State Population<br>2010 - 2016',
    geo:{
       scope: 'usa',
       countrycolor: 'rgb(255, 255, 255)',
       showland: true,
       landcolor: 'rgb(217, 217, 217)',
       showlakes: true,
       lakecolor: 'rgb(255, 255, 255)',
       subunitcolor: 'rgb(255, 255, 255)',
       lonaxis: {},
       lataxis: {}
    },
    updatemenus: [{
      x: 0.1,
      y: 0,
      yanchor: "top",
      xanchor: "right",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 200,
          },
          frame: {
            duration: 500,
            redraw: false
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0,
              redraw: false
            }
          }
        ],
        label: "Pause"
      }]
    }],
    sliders: [{
      active: 0,
      steps: [{
        label: "2010",
        method: "animate",
        args: [["2010"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      },{
        label: "2011",
        method: "animate",
        args: [["2011"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }, {
        label: "2012",
        method: "animate",
        args: [["2012"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }, {
        label: "2013",
        method: "animate",
        args: [["2013"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }, {
        label: "2014",
        method: "animate",
        args: [["2014"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }, {
        label: "2015",
        method: "animate",
        args: [["2015"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }, {
        label: "2016",
        method: "animate",
        args: [["2016"], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300, "redraw": false}
          }
        ]
      }],
      x: 0.1,
      len: 0.9,
      xanchor: "left",
      y: 0,
      yanchor: "top",
      pad: {t: 50, b: 10},
      currentvalue: {
        visible: true,
        prefix: "Year:",
        xanchor: "right",
        font: {
          size: 20,
          color: "#666"
        }
      },
      transition: {
        duration: 300,
        easing: "cubic-in-out"
      }
    }]
};

Plotly.plot(myDiv, data, layout).then(function() {
    Plotly.addFrames('myDiv', frames);
  });
})
                                                                        
Style
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Colorway in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Set Default Trace Colors with colorway
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
const parabolaGen = (a, b) =>
  x => x*x*a + b;

var as = linspace(1, 3, 7);
var bs = linspace(2, 14, 7);
var x = linspace(-1, 3, 50);
var data = [];

for (i=0; i< as.length; i++ ){
  data.push({
    type: "scatter",
    mode: "lines",
    x: x,
    y: x.map(parabolaGen(as[i],bs[i]))
  })
}

var layout = {
  colorway : ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844']
};

Plotly.newPlot('myDiv', data, layout);
      
                            
                            
                            
                                                                        
Styling Markers in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

In order to make markers distinct, you can add a border to the markers. This can be achieved by adding the line dict to the marker dict. For example, marker:{..., line: {...}}.

Add Marker Border
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var x = Array.from({length: 500}, () => Math.random()*(6-3)+3);
var y = Array.from({length: 500}, () => Math.random()*(6-3)+3);

var data = [{
  x: x,
  y: y,
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 20,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 2
    }
  },
  showlegend: false
  }, {
  x: [2],
  y: [4.5],
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 60,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 6
    }
  },
  showlegend: false
}]

Plotly.plot('graph', data)
                                                                        
                                                                        
Fully Opaque
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
{
        var resolveDiv2 = new Promise((resolve,reject)=>{
            
var x = Array.from({length: 500}, () => Math.random()*(6-3)+3);
var y = Array.from({length: 500}, () => Math.random()*(6-3)+3);

var data = [{
  x: x,
  y: y,
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 20,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 2
    }
  },
  showlegend: false
  }, {
  x: [2,2],
  y: [4.25,4.75],
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 60,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 6
    }
  },
  showlegend: false
}]

Plotly.plot('myDiv2', data)
        })
    }
                                                                        
                                                                        
Trace Opacity
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
 {
        var resolveDiv3 = new Promise((resolve,reject)=>{
            
var x = Array.from({length: 500}, () => Math.random()*(6-3)+3);
var y = Array.from({length: 500}, () => Math.random()*(4.5-3)+3);
var x2 = Array.from({length: 500}, () => Math.random()*(6-3)+3);
var y2 = Array.from({length: 500}, () => Math.random()*(6-4.5)+4.5);

var data = [{
  x: x,
  y: y,
  type: 'scatter',
  mode: 'markers',
  opacity: 0.5,
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 20,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 2
    }
  },
  name: 'Opacity 0.5'
  }, {
  x: x2,
  y: y2,
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 20,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 2
    }
  },
  name: 'Opacity 1.0'
  }, {
  x: [2,2],
  y: [4.25,4.75],
  type: 'scatter',
  mode: 'markers',
  opacity: 0.5,
  marker: {
    color: 'rgb(17, 157, 255)',
    size: 60,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 6
    }
  },
  showlegend: false
}]

Plotly.plot('myDiv3', data)
        })
    }
                                                                        
                                                                        
Marker Opacity
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
{
        var resolveDiv4 = new Promise((resolve,reject)=>{
            
var x = Array.from({length: 500}, () => Math.random()*(6-3)+3);
var y = Array.from({length: 500}, () => Math.random()*(6-3)+3);

var data = [{
  x: x,
  y: y,
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    opacity: 0.5,
    size: 20,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 2
    }
  },
  showlegend: false
  }, {
  x: [2,2],
  y: [4.25,4.75],
  type: 'scatter',
  mode: 'markers',
  marker: {
    color: 'rgb(17, 157, 255)',
    opacity: 0.5,
    size: 60,
    line: {
      color: 'rgb(231, 99, 250)',
      width: 6
    }
  },
  showlegend: false
}]

Plotly.plot('myDiv4', data)
        })
    }
                                                                        

Colorscales in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Custom Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Colorscale for Contour Plot



            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
      Images in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Add a Logo

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
Blackbody Colorscale


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

            


LaTeX in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 LaTeX Typesetting

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var trace1 = {
  x: [1, 2, 3, 4],
  y: [1, 4, 9, 16],
  name: '$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$',
  type: 'scatter'
};
var trace2 = {
  x: [1, 2, 3, 4],
  y: [0.5, 2, 4.5, 8],
  name: '$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$',
  type: 'scatter'
};
var data = [trace1, trace2];
var layout = {
  xaxis: {title: '$\sqrt{(n_\text{c}(t|{T_\text{early}}))}$'},
  yaxis: {title: '$d, r \text{ (solar radius)}$'}
};
Plotly.newPlot('myDiv', data, layout);
      
      


Text and Font Styling in plotly.js
      
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Global Font Properties
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var data = [
  {
    x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
    y: [0, 1, 2, 3, 4, 5, 6, 7, 8],
    type: 'scatter'
  }
];
var layout = {
  title: 'Global Font',
  font: {
    family: 'Courier New, monospace',
    size: 18,
    color: '#7f7f7f'
  }
};
Plotly.newPlot('myDiv', data, layout);
      

Text and Annotations in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Adding Text to Data in Line and Scatter Plots
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var trace1 = {
  x: [0, 1, 2],
  y: [1, 1, 1],
  mode: 'lines+markers+text',
  name: 'Lines, Markers and Text',
  text: ['Text A', 'Text B', 'Text C'],
  textposition: 'top',
  type: 'scatter'
};
var trace2 = {
  x: [0, 1, 2],
  y: [2, 2, 2],
  mode: 'markers+text',
  name: 'Markers and Text',
  text: ['Text D', 'Text E', 'Text F'],
  textposition: 'bottom',
  type: 'scatter'
};
var trace3 = {
  x: [0, 1, 2],
  y: [3, 3, 3],
  mode: 'lines+text',
  name: 'Lines and Text',
  text: ['Text G', 'Text H', 'Text I'],
  textposition: 'bottom',
  type: 'scatter'
};
var data = [trace1, trace2, trace3];
var layout = {showlegend: false};
Plotly.newPlot('myDiv', data, layout);
            
            
            
            
            
Paper Referenced Annotations
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.plot('myDiv', [{
  x: [1,2,3],
  y: [2,1,2]
}], {
  annotations: [{
    xref: 'paper',
    yref: 'paper',
    x: 0,
    xanchor: 'right',
    y: 1,
    yanchor: 'bottom',
    text: 'X axis label',
    showarrow: false
  }, {
    xref: 'paper',
    yref: 'paper',
    x: 1,
    xanchor: 'left',
    y: 0,
    yanchor: 'top',
    text: 'Y axis label',
    showarrow: false
  }]
  
})
                                                                        
                                                                        
Simple Annotation

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],
  type: 'scatter'
};
var trace2 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],
  type: 'scatter'
};
var data = [trace1, trace2];
var layout = {
  showlegend: false,
  annotations: [
    {
      x: 2,
      y: 5,
      xref: 'x',
      yref: 'y',
      text: 'Annotation Text',
      showarrow: true,
      arrowhead: 7,
      ax: 0,
      ay: -40
    }
  ]
};
Plotly.newPlot('myDiv', data, layout);
                                                                        
                                                                        
Multiple Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],
  type: 'scatter'
};
var trace2 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],
  type: 'scatter'
};
var data = [trace1, trace2];
var layout = {
  showlegend: false,
  annotations: [
    {
      x: 2,
      y: 5,
      xref: 'x',
      yref: 'y',
      text: 'Annotation Text',
      showarrow: true,
      arrowhead: 7,
      ax: 0,
      ay: -40
    },
    {
      x: 4,
      y: 4,
      xref: 'x',
      yref: 'y',
      text: 'Annotation Text 2',
      showarrow: true,
      arrowhead: 7,
      ax: 0,
      ay: -40
    }
  ]
};
Plotly.newPlot('myDiv', data, layout);
                                                                        
                                                                        
Subplot Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var trace0 = {
  x: [1, 2, 3],
  y: [4, 5, 6],
  type: 'scatter'
};

var trace1 = {
  x: [20, 30, 40],
  y: [50, 60, 70],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var data = [trace0, trace1];

var layout = {
  title: 'Subplot Annontations',
  xaxis: {domain: [0, 0.45]},
  yaxis2: {anchor: 'x2'},
  xaxis2: {domain: [0.55, 1]},
  annotations: [
    {
      x: 2,
      y: 5,
      xref: 'x',
      yref: 'y',
      text: 'Annotation A',
      showarrow: true,
      arrowhead: 3,
      ax: -30,
      ay: -40
    },
    {
      x: 30,
      y: 60,
      xref: 'x2',
      yref: 'y2',
      text: 'Annotation B',
      showarrow: true,
      arrowhead: 2,
      ax: -25,
      ay: -40
    }
  ]
};

Plotly.newPlot('myDiv', data, layout);
                                                                        
    /* 3D Annotations    */ //{
    {
        var resolveDiv13 = new Promise((resolve,reject)=>{
            
var data = [{
    type: "scatter3d",
    x: ["2017-01-01", "2017-02-10", "2017-03-20"],
    y: ["A", "B", "C"],
    z: [1, 1e3, 1e5]
 }]

var layout = {
    scene: {
      camera: {
        eye: {x: 2.1, y: 0.1, z: 0.9}
      },
      xaxis: {
        title: ""
      },
      yaxis: {
        title: ""
      },
      zaxis: {
        type: "log",
        title: ""
      },
      annotations: [{
        showarrow: false,
        x: "2017-01-01",
        y: "A",
        z: 0,
        text: "Point 1",
        font: {
          color: "black",
          size: 12
        },
        xanchor: "left",
        xshift: 10,
        opacity: 0.7
      }, {
        x: "2017-02-10",
        y: "B",
        z: 4,
        text: "Point 2",
        textangle: 0,
        ax: 0,
        ay: -75,
        font: {
          color: "black",
          size: 12
        },
        arrowcolor: "black",
        arrowsize: 3,
        arrowwidth: 1,
        arrowhead: 1
      }, {
        x: "2017-03-20",
        y: "C",
        z: 5,
        ax: 50,
        ay: 0,
        text: "Point 3",
        arrowhead: 1,
        xanchor: "left",
        yanchor: "bottom"
      }]
}
}

Plotly.plot('myDiv13', data, layout);
        })
    }
   // } /**/
   
    /*   Custom Text Color and Styling  */ //{
    {
        var resolveDiv14 = new Promise((resolve,reject)=>{
            
var trace1 = {
  x: [0, 1, 2],
  y: [1, 1, 1],
  mode: 'lines+markers+text',
  name: 'Lines, Markers and Text',
  text: ['Text A', 'Text B', 'Text C'],
  textposition: 'top right',
  textfont: {
    family: 'sans serif',
    size: 18,
    color: '#1f77b4'
  },
  type: 'scatter'
};
var trace2 = {
  x: [0, 1, 2],
  y: [2, 2, 2],
  mode: 'lines+markers+text',
  name: 'Lines and Text',
  text: ['Text G', 'Text H', 'Text I'],
  textposition: 'bottom',
  textfont: {
    family: 'sans serif',
    size: 18,
    color: '#ff7f0e'
  },
  type: 'scatter'
};
var data = [trace1, trace2];
var layout = {showlegend: false};
Plotly.newPlot('myDiv14', data, layout);
        })
    }
   // } /**/
   
    /*  Styling and Coloring Annotations    */ //{
    {
        var resolveDiv15 = new Promise((resolve,reject)=>{
            
var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],
  type: 'scatter'
};
var trace2 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],
  type: 'scatter'
};
var data = [trace1, trace2];
var layout = {
  showlegend: false,
  annotations: [
    {
      x: 2,
      y: 5,
      xref: 'x',
      yref: 'y',
      text: 'max=5',
      showarrow: true,
      font: {
        family: 'Courier New, monospace',
        size: 16,
        color: '#ffffff'
      },
      align: 'center',
      arrowhead: 2,
      arrowsize: 1,
      arrowwidth: 2,
      arrowcolor: '#636363',
      ax: 20,
      ay: -30,
      bordercolor: '#c7c7c7',
      borderwidth: 2,
      borderpad: 4,
      bgcolor: '#ff7f0e',
      opacity: 0.8
    }
  ]
};
Plotly.newPlot('myDiv15', data, layout);
        })
    }
   // } /**/
                                                                        
                                                                        
Styling and Formatting Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var myPlot = document.getElementById('myDiv'),
   d3 = Plotly.d3,
   N = 12,
    x = d3.range(N).map( d3.random.normal(3) ),
    y1 = d3.range(N).map( d3.random.normal(4) ),
    y2 = d3.range(N).map( d3.random.normal(4) ),
    y3 = d3.range(N).map( d3.random.normal(4) ),
    months = ['Jan', 'Feb', 'Mar',
          'Apr', 'May', 'June',
          'July', 'Aug', 'Sept',
          'Oct', 'Nov', 'Dec'],
    data = [{ x:x, y:y1,
             type:'scatter', mode:'markers',
         name:'2014', text: months,
             marker:{color:'rgba(200, 50, 100, .7)',
                      size:16}
             },
            { x:x, y:y2,
             type:'scatter', mode:'markers',
         name:'2015', text:months,
             marker:{color:'rgba(120, 20, 130, .7)',
                     size:16}
             },
            { x:x, y:y3,
             type:'scatter', mode:'markers',
         name: '2016', text:months,
             marker:{color:'rgba(10, 180, 180, .8)',
                     size:16}}];
    layout = {
        hovermode:'closest',
        title:'<b>Formatting Annotations</b> <br> click on a point to plot an annotation',
        xaxis:{zeroline:false, title: 'Value A'},
        yaxis:{zeroline:false, title: 'Value B'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click',
    function(data){
      var point = data.points[0],
          newAnnotation = {
            x: point.xaxis.d2l(point.x),
            y: point.yaxis.d2l(point.y),
            arrowhead: 6,
            ax: 0,
            ay: -80,
            bgcolor: 'rgba(255, 255, 255, 0.9)',
            arrowcolor: point.fullData.marker.color,
            font: {size:12},
            bordercolor: point.fullData.marker.color,
            borderwidth: 3,
            borderpad: 4,
            text: '<i>Series Identification</i>' + <br>
                  '<b>Year</b>       '+(point.data.name) + '<br>' +
                  '<i>Point Identification</i><br>' +
                  '<b>Month</b>      '+ (months[point.pointNumber]) +
                  '<br><i>Point Values</i><br>' +
                  '<b>A</b>     '+(point.x).toPrecision(4) +
                  '<br><b>B</b>     '+(point.y).toPrecision(4)

        },
        divid = document.getElementById('myDiv'),
        newIndex = (divid.layout.annotations || []).length;
    console.log(point.pointNumber)
     // delete instead if clicked twice
    if(newIndex) {
       var foundCopy = false;
       divid.layout.annotations.forEach(function(ann, sameIndex) {
         if(ann.text === newAnnotation.text ) {
           Plotly.relayout('myDiv', 'annotations[' + sameIndex + ']', 'remove');
           foundCopy = true;
         }
       });
       if(foundCopy) return;
     }
     Plotly.relayout('myDiv', 'annotations[' + newIndex + ']', newAnnotation);
  })
  .on('plotly_clickannotation', function(event, data) {
    Plotly.relayout('myDiv', 'annotations[' + data.index + ']', 'remove');
  });
                                                                        
                                                                        
WebGL Text and Annotations
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
var n = 250;
var t = 12;
var x = [];
var y = [];
var z = [];
var text = [];
var arr = ["A","T","G", "C"];

for (var j = 0; j < t; j++){
  ztemp = [];
  for (var i = 0; i < n; i++) {
    x.push(i);
    y.push(j);
    ztemp.push(Math.floor(Math.random() * 10));
    text.push(arr[Math.floor(Math.random() * 4)])
  }
  z.push(ztemp)
}

var steps = [];
for (var e = 0; e < n-30; e++){
  steps.push({
      label: e,
      value: e,
      method: 'relayout',
      args: ['xaxis', {range: [-0.5 + e, 30.5 + e]}]
    })
}

data1 = {
  x: x,
  y: y,
  mode: "text",
  text: text,
  type: "scattergl",
  textfont: {
    size: 20
    }
  }
       
data2 = {
  z: z,
  type: "heatmap"
  }

sliders = [{
      active: 0,
      steps: steps
    }]

layout = {
  sliders: sliders,
  xaxis: {
    range: [-0.5, 30.5],
    showline: false,
    zeroline: false,
     showgrid: false
  },
  yaxis: {
    showline: false,
    zeroline: false,
     showgrid: false
  }
  }

data = [data1, data2]
Plotly.plot('graph', {data:data,
                     layout:layout});
                                                                        

Layout Options


            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


Formatting Ticks

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      


3D Surface Lighting in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 Ambient Lighting
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var z_data = [ ];
for(i=0;i<100;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
  z: z_data,
  type: 'surface',
  colorscale: 'Viridis',
  lighting: {ambient: 0.9}
  },
   {
  z: z_data,
  type: 'surface',
  scene: 'scene2',
  colorscale:'Viridis',
  lighting: {ambient: 0.2}
  }
];

var layout = {
  title: 'Ambient Lighting',
  grid: {
    rows: 1,
    columns: 2,
    pattern: 'independent',
  },
  	scene:{
		aspectmode:'cube',
		domain:{row:0, column:0}
	},
	scene2:{
		aspectmode:'cube',
		domain:{row:0, column:1}
  }
};
Plotly.newPlot('myDiv', data, layout);
});
            
      
Layout Template Examples in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 The Layout Template Attribute
 
 allows a plotly plot to take its styling from a template object
            .___
            [__]
        .___    .___
      | [__]    [__]  |

      
      
Add Named Container Array Items


Container array items in a template with a name attribute will be added to any plot using that template. We can use this feature to create a template that adds watermarks to our chart by including named image items in images. The example below also shows how to make one of these images invisible using the templateitemname attribute if you don't want it to display for this specific chart.
 
 
 
 
 3D Hover Options in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Customize Hover for Spikelines
  
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                      
                                      
                                                                        
Hover Text and Formatting in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 Adding Hover Text to Data in Line and Scatter Plots

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Rounding X and Y Hover Values
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                    
                    
                                                                        
3D Axes in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


Range of Axes


            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        

 
 Fixed Ratio Axes
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Ticks Formatting
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Axes Background Color
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Set Axes Title
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Camera Controls
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      


Shapes in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
      
                                                                        
                                                                        
Highlighting Time Series Regions with Rectangle Shapes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Highlighting Clusters of Scatter Points with Circle Shapes

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Vertical and Horizontal Lines Positioned Relative to the Axes
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Circle
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
var trace1 = {
  x: [1.5, 3.5],
  y: [0.75, 2.5],
  text: ['Unfilled Circle', 'Filled Circle'],
  mode: 'text'
};

var layout = {
  title: 'Circles',
  xaxis: {
    range: [0, 4.5],
    zeroline: false
  },
  yaxis: {
    range: [0, 4.5]
  },
  width: 500,
  height: 500,
  shapes: [

    // Unfilled Circle

    {
      type: 'circle',
      xref: 'x',
      yref: 'y',
      x0: 1,
      y0: 1,
      x1: 3,
      y1: 3,
      line: {
        color: 'rgba(50, 171, 96, 1)'
      }
    },

    // Filled Circle

    {
      type: 'circle',
      xref: 'x',
      yref: 'y',
      fillcolor: 'rgba(50, 171, 96, 0.7)',
      x0: 3,
      y0: 3,
      x1: 4,
      y1: 4,
      line: {
        color: 'rgba(50, 171, 96, 1)'
      }
    }
  ]
};

var data = [trace1];

Plotly.newPlot('myDiv', data, layout);
                                                                        
                                                                        
Rectangle Positioned Relative to the Axes*
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Lines Positioned REaltive to the Plot and to the Axis
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Basic Arbitrary SVG Paths
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                               
                                                                        
Venn Diagram with Circle Shapes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        

                                                                        
Creating Tangent Lines with Shapes

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |



Setting Graph Size in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

Adjusting Height, Width, and Margins

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      

      
Automatically Adjust Margins

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
      
Legends in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
       
                                                                        
                                                                        
Hiding the Legend
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Legend Names
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Styling and Coloring the Legend
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
changing the orientation of Legend
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Hiding Legend Entries
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        

Grouped Legend
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Subplot Grouped Legend
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        



Setting the Title, Legend Entries, and Axis Titles in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 
Styling Names
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Horizontal Legends in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 
Basic Example
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      

Axes in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
Tick Placement, Color, and Style
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
      
 
      
                               
                                                                        
Styling and Coloring Axes and the Zero-Line
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Styling and Coloring Axes and the Zero-Line
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
nonnegative, tozero, and normal Rangemode
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Toggling Axes Lines, Ticks, Labels, and Autorange
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Setting the Range of Axes Manually
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Styling and Coloring Axes and the Zero-Line
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Enumerated Ticks with Tickvals and Ticktext
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Logarithmic Axes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Reversed Axes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Reversed Axes with Range ( Min/Max ) Specified
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Categorical Axes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Multi-Category Axes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Using Dates on the X-Axis
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Fixed-Ratio Axes
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |


Fundamentals
file:fundamentals.html

            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]



Static Image Export in plotly.js
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
saving plotly graphs to svg

            .___
            [__]
        .___    .___
      | [__]    [__]  |

Plotly.toImage(
gd,{
  format:'jpeg',
  height:desired_height,
  width:desired_width,
  layout:'jpg' // default
});

for layout jpg and svg can be used



Responsive / Fluid Layout in plotly.js

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

 
Responsive Plots



 plotly.js config to { responsive: true }, when the window is resized plotly changes
            .___
            [__]
        .___    .___
      | [__]    [__]  |
     
                   



uirevision in Plotly.react in plotly.js


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

 
Responsive Plots

Persist User Changes


            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                           
                                                                        
US Airports Map




Event Handlers in plotly.js

            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]



Using plotly.js events

file:  events.html
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 
 
plotly events are pre fixed with plotly

so to update the chart, you take the div where the chart is you take the property of the object you passed to plotly,create or .newPlot you want to modify, and use plotly.restyle and bam
ex

graphDiv.on('plotly_event', function(){
    	// do something;
	});

            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Simple event example

in 0

var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5],
    y = [10, 20, 30, 20, 10],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:20}
            }],
    layout = {hovermode:'closest',
              title:'Click on Points'
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(){
    alert('You clicked this Plotly chart!');
});
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                         
                                                                        
Event Data

five types that emit event data

plotly_click, plotly_hover, plotly_unhover, plotly_selecting, and plotly_selected.
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                        
                        
Click event
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                                                                         
                                                                        
changing marker color

examples
https://plot.ly/javascript/click-events/

in 1

however in the loop there is only the marker you clicked, probably the XY css coordinate, if there were more markers it would probably reflect the needs for a loop

var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    colors = ['#00000','#00000','#00000',
              '#00000','#00000','#00000'],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title:'Click on a Point to Change Color<br>Double Click (anywhere) to Change it Back'
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                        
Legend Click Events

plotly_legendclick and plotly_legenddoubleclick
                
                
in 2

var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    y2 = [1, 4, 7, 6, 1, 5],
    colors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],
              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']],
    data = [{x:x, y:y, type:'scatter',
             mode:'line', line:{ color:'#5C636E'},marker:{size:16, color:colors[0]}},
            {x:x, y:y2, type:'scatter',
             mode:'line',line:{ color:'#393e46'}, marker:{size:16, color:colors[1]}}],
    layout = {
        showlegend: true,
        hovermode:'closest',
        title:'Click on a Point to Change Color<br>Click on a Trace in the Legend to Change Back One Trace Only'
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';
  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update,[tn]);
});

myPlot.on('plotly_legendclick', function(data){
  var trColors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],
              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']];
  var update = {'marker':{color: trColors[data.curveNumber], size:16}};
  Plotly.restyle('myDiv', update,[data.curveNumber]);
  return false;
});


legendclick default is to hide the trace
legenddoubleclick default is to hide all traces and choose one trace
                                                                        
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Hover Event


for more examples https://plot.ly/javascript/hover-events/


ploty_hover plotly_unhover


            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                           

var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6, 7],
    y = [1, 2, 3, 2, 3, 4, 3],
    colors =['#00000','#00000','#00000',
             '#00000','#00000','#00000',
             '#00000'],
    data = [{x:x, y:y,
             type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title:'Hover on a Point<br>to Change Color'
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_hover', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

myPlot.on('plotly_unhover', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#00000';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});



            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Select Event

 plotly_selected plotly_selecting
 
 examples plotly_selected and plotly_selecting events, see: https://plot.ly/javascript/lasso-selection/
 
 they are used in persistent events, like a drag or zoom, you use these when persistent events are presently occuring
 
 var graphDiv = document.getElementById('graph');
var N = 1000;
var color1 = '#7b3294';
var color1Light = '#c2a5cf';
var colorX = '#ffa7b5';
var colorY = '#fdae61';

function randomArray() {
  var out = new Array(N);
  for(var i = 0; i < N; i++) {
    out[i] = Math.random();
  }
  return out;
}
var x = randomArray();
var y = randomArray();

Plotly.plot(graphDiv, [{
  type: 'scatter',
  mode: 'markers',
  x: x,
  y: y,
  xaxis: 'x',
  yaxis: 'y',
  name: 'random data',
  marker: {color: color1, size: 10}
}, {
  type: 'histogram',
  x: x,
  xaxis: 'x2',
  yaxis: 'y2',
  name: 'x coord dist.',
  marker: {color: colorX}
}, {
  type: 'histogram',
  x: y,
  xaxis: 'x3',
  yaxis: 'y3',
  name: 'y coord dist.',
  marker: {color: colorY}
}], {
  title: 'Lasso around the scatter points to see sub-distributions',
  dragmode: 'lasso',
  xaxis: {
    zeroline: false,
  },
  yaxis: {
    domain: [0.55, 1],
  },
  xaxis2: {
    domain: [0, 0.45],
    anchor: 'y2',
  },
  yaxis2: {
    domain: [0, 0.45],
    anchor: 'x2'
  },
  xaxis3: {
    domain: [0.55, 1],
    anchor: 'y3'
  },
  yaxis3: {
    domain: [0, 0.45],
    anchor: 'x3'
  }
});

graphDiv.on('plotly_selected', function(eventData) {
  var x = [];
  var y = [];

  var colors = [];
  for(var i = 0; i < N; i++) colors.push(color1Light);

  eventData.points.forEach(function(pt) {
    x.push(pt.x);
    y.push(pt.y);
    colors[pt.pointNumber] = color1;
  });

  Plotly.restyle(graphDiv, {
    x: [x, y],
    xbins: {}
  }, [1, 2]);

  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);
});
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Update Data

plotly_restyle   plotly_relayout

these happens when the plot is updated

For Cartesian (2D) plots, plotly_relayout emits only the xaxis and yaxis ranges which were directly changed by the triggering event
 3D plots, layout.scene.camera data is similarly emitted.
 
 
this is what you would get

// plotly_restyle update
[
  {update},  // update object -- attribute updated: new value
  [0]       // array of traces updated
]

// plotly_relayout update: Cartesian
//// Upon resizing plot:
{
 xaxis.range[0]: , // new value if xaxis.range[0] was updated
 xaxis.range[1]: ,
 yaxis.range[0]: , // new value if yaxis.range[0] was updated
 yaxis.range[1]:
}
//// Upon autosizing plot:
{
 xaxis.autorange: true,
 yaxis.autorange: true
}

// plotly_relayout update: 3D
// a subset of the following data will be emitted depending on
// which attributes were changed by the triggering event.
{
  scene: {
    center: { // https://plot.ly/javascript/reference/#layout-scene-camera-center
      x: 0,
      y: 0,
      z: 0
    }
  },
  {
    eye: { // https://plot.ly/javascript/reference/#layout-scene-camera-eye
      x: 1.25,
      y: 1.25,
      z: 1.25
    }
  }.
  {
    up: { // https://plot.ly/javascript/reference/#layout-scene-camera-up
      x: 0,
      y: 0,
      z: 1
    }
  }
}
 

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                           


      
Additional Events

plotly_webglcontextlost, plotly_afterplot, plotly_autosize, plotly_deselect, plotly_doubleclick, plotly_redraw, and plotly_animated.

they do not return any data


            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Webgl Context Lost Event

to use the gpu plotly comes in and ask inthe form of webgl, when plotly uses too much the process gets killed



                                                                        
                                                                        

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Afterplot Event

plotly_afterplot


every time you plot a chart this fires

in 5


var myPlot = document.getElementById('myDiv'),
    d3 = Plotly.d3,
    N = 20,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [{x:x, y:y, type:'scatter',
            mode:'markers', marker:{size:14}}
           ];

Plotly.plot('myDiv', data);

myPlot.on('plotly_afterplot', function(){
    console.log('done plotting');
});
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Double Click Event

its registered by clicking anywhere on the graph it doesnt return data

in 6

var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    colors = ['#00000','#00000','#00000',
              '#00000','#00000','#00000'],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title:'Click on a Point to Change Color<br>Double Click (anywhere) to Change it Back'
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

myPlot.on('plotly_doubleclick', function(data){
  var orgColors = ['#00000','#00000','#00000',
                   '#00000','#00000','#00000'];
  var update = {'marker':{color: orgColors, size:16}};
  Plotly.restyle('myDiv', update);
});
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                        
Function in plotly.js
            .___                        .___                        .___                        .___
         |  [__]                        [__]  |                 |   [__]                      | [__]
        .___    .___                .___    .___                .___    .___                .___    .___
      | [__]    [__]  |           | [__]    [__]              | [__]    [__]                [__]    [__]
    .___            .___        .___            .___        .___            .___        .___            .___
 |  [__]            [__]      |  [__]            [__] |     [__]            [__]     |  [__]            [__]
.___                   .___ .___                   .___.___                   .___ .___                   .___
[__]                   [__] [__]                   [__][__]                   [__] [__]                   [__]


 
Common parameters
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                          
                          
                           
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
      
file functions.html

Graph Div

the first argument to most of the function also know as plotDiv. you can use document.getElementbyID or give the id as a string
to specify dimensions use the layout object or edit the element yrself

                                                                        

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
data

The data to be plotted is described in an array usually called data

mabye check out the full reference
                                                                        
                                                                        
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
layout
    
    The layout of the plot – non-data-related visual attributes such as the title, annotations etc – is described in an object usually called layout,
    mabye check out the full reference
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        

config

High-level configuration options for the plot, such as the scroll/zoom/hover behaviour, is described in an object usually called config,
layout is about the plot itself, config is about how the plot is shown
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
frames

Animation frames are described in an object usually called frames as per the example here. They can contain data and layout objects, which define any changes to be animated, and a traces object that defines which traces to animate. Additionally, frames containing name and/or group attributes can be referenced by Plotly.animate after they are added by Plotly.addFrames

in other words, when you need to animate, your frames are contained here
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.newPlot
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                                
                                                                        
                                                                        
draws a newplot in a given div, to update an existing plot use Plotly.react

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
signature

Plotly.newPlot(graphDiv, data, layout, config)
                                                                        
                                                                        
Plotly.newPlot(graphDiv, obj)
for all past arguments[0]

{data: [], layout: {}, config: {}, frames: []})


 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
data and layout can be retrieved from the containing div


in 0

var graphDiv = document.getElementById('id_of_the_div')

var data = [{
  x: [1999, 2000, 2001, 2002],
  y: [10, 15, 13, 17],
  type: 'scatter'
}];

var layout = {
  title: 'Sales Growth',
  xaxis: {
    title: 'Year',
    showgrid: false,
    zeroline: false
  },
  yaxis: {
    title: 'Percent',
    showline: false
  }
};
Plotly.newPlot(graphDiv, data, layout);

...
var dataRetrievedLater = graphDiv.data;
var layoutRetrievedLater = graphDiv.layout;
                                                                        
                                                                        
Plotly.react
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 


its has the same signaure as plotly.newPlot, but this is used to update the graph, when updating use thise

to use it the data array must have been chanded or layout.datarevision must have chaged


Plotly.plot

is another method but it got deprecated in favor of plotly.react


            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.restyle

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
An efficient means of changing attributes in the data array in an existing plot.
you must chooses your traces or all traces get restyled
 
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
function signature

Plotly.restyle(graphDiv, update [, traceIndices])

graphDiv
    DOM node or string id of a DOM node
update
    object, see below for examples
traceIndices
    array of integer indices into existing value of data
    (optional, default behaviour is to apply to all traces)
                                                                        
                                                                        

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
examples

// restyle a single trace using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update, 0);

// restyle all traces using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update);

// restyle two traces using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update, [1, 2]);
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
arrays go in conjunction with traces to apply arrays as a value you must wrap it in another array
                                                                        
examples

var update = {
    'marker.color': [['red', 'green']]
}
Plotly.restyle(graphDiv, update, [0])

// update two traces with new z data
var update = {z: [[[1,2,3], [2,1,2], [1,1,1]], [[0,1,1], [0,2,1], [3,2,1]]]};
Plotly.restyle(graphDiv, update, [1, 2])


                                                                        

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
attribute strings

{marker: {color: 'red'}} vs. {'marker.color': red}).
 
 
 the first you replace the whole object, the second you change only the property
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        

resetting the graph null turns it to its default value undefined does nothing

in 2

Plotly.restyle(graphDiv, {
  'line.color': ['red', null, undefined]
}, [0, 1, 2])



Plotly.relayout

use this to update the layout of a plot

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 signature
 
 Plotly.relayout(graphDiv, update)
graphDiv
    DOM node or string id of a DOM node
update
    object, see below for examples
    (defaults to {})
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
in 3

// update only values within nested objects
var update = {
    title: 'some new title', // updates the title
    'xaxis.range': [0, 5],   // updates the xaxis range
    'yaxis.range[1]': 15     // updates the end of the yaxis range
};
Plotly.relayout(graphDiv, update)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.update

basically a combination of Plotly.restyle and Plotly.relayout.

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
signature


Plotly.update(graphDiv, data_update, layout_update, [, traceIndices])
graphDiv
    DOM node or string id of a DOM node
data_update
    object, see Plotly.restyle above
    (defaults to {})
layout_update
    object, see Plotly.relayout above
    (defaults to {})
traceIndices
    array of integer indices into existing value of data, see Plotly.restyle above
    (optional, default behaviour is to apply to all traces)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
examples


//update the layout and all the traces
var layout_update = {
    title: 'some new title', // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update)

//update the layout and a single trace
var layout_update = {
    title: 'some new title', // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update,0)

//update the layout and two specific traces
var layout_update = {
    title: 'some new title', // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update, [0,2])

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
                                                                        
Plotly.validate

helps check data before you use it

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 signature
 
Plotly.validate(data, layout)
    data
        array of objects
    layout
        object
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
example

in 4

var data = [{
  type: 'bar',
  y: [2, 1, 3, 2],
  orientation: 'horizontal'
}];

var out = Plotly.validate(data, layout);
console.log(out[0].msg)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.makeTemplate

makes a template out of an existing plot
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

signauture

Plotly.makeTemplate(figure)
figure or DOM Node
where figure is a plot object, with {data, layout} members.
If a DOM node is used it must be a div element already containing a plot.

whats cool is that if there is info specified in data its presevered in the next plot,
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
in 5

var figure = {
  data: [{
    type: 'bar',
    marker: {color: 'red'},
    y: [2, 1, 3, 2],
  }],
  layout:{
    title: 'Quarterly Earnings'
  }
};

var template = Plotly.makeTemplate(figure);

newData = [{
  type:'bar',
  y:[3,2,5,8]
}]
layoutWithTemplate = {template:template}

Plotly.newPlot(graphDiv,newData,layoutTemplate)

                                                                        
                                                                        
Plotly.validateTemplate

 Test for consistency between the given figure and a template,
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 

signature

Plotly.validateTemplate(figure, template)
    figure or DOM Node
    where figure is a plot object, with {data, layout} members.
template
    the template, with its own {data, layout}, to test. If omitted, we will look for a template already attached as the plot's layout.template attribute.
 

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
example

in 6

var out = Plotly.validateTemplate(figure, template);
console.log(out)

so its not exactly obvious but every index where theres an object representing a trace, those are the differences, it doesnt care about the plot in the trace it just cares about the trace, if the amount and type of traces are present

 
                                                                        
Plotly.addTraces


allows you to add new traces to a graphDiv, you could use Plotly.restyle Plotly.update
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
examples

in 7

// add a single trace to an existing graphDiv
Plotly.addTraces(graphDiv, {y: [2,1,2]});

// add two traces
Plotly.addTraces(graphDiv, [{y: [2,1,2]}, {y: [4, 5, 7]}]);

// add a trace at the beginning of the data array
Plotly.addTraces(graphDiv, {y: [1, 5, 7]}, 0);
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.deleteTraces



This allows you to remove traces from an existing graphDiv
in 7

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
examples


// remove the first trace
Plotly.deleteTraces(graphDiv, 0);

// remove the last two traces
Plotly.deleteTraces(graphDiv, [-2, -1]);
                                                                        

            .___
            [__]
        .___    .___
      | [__]    [__]  |
                        
                        
Plotly.moveTraces


This allows you to reorder traces in an existing graphDiv, it doesnt mean it will repaint one over the other
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
                                                                         

examples

// move the first trace (at index 0) the the end of the data array
Plotly.moveTraces(graphDiv, 0);

// move selected traces (at indices [0, 3, 5]) to the end of the data array
Plotly.moveTraces(graphDiv, [0, 3, 5]);

// move last trace (at index -1) to the beginning of the data array (index 0)
Plotly.moveTraces(graphDiv, -1, 0);

// move selected traces (at indices [1, 4, 5]) to new indices [0, 3, 2]
Plotly.moveTraces(graphDiv, [1, 4, 5], [0, 3, 2]);

            .___
            [__]
        .___    .___
      | [__]    [__]  |

                           
Plotly.extendTraces

This allows you to add data to traces in an existing graphDiv.
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 examples
 
 in 8
 
// extend one trace
Plotly.extendTraces(graphDiv, {y: [[rand()]]}, [0])

// extend multiple traces
Plotly.extendTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1])

// extend multiple traces up to a maximum of 10 points per trace
Plotly.extendTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1], 10)
                                                                                                 
                                                                        

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.prependTraces

allows you  to prepend data to an existing div

            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 // prepend one trace
Plotly.prependTraces(graphDiv, {y: [[rand()]]}, [0])

// prepend multiple traces
Plotly.prependTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1])

// prepend multiple traces up to a maximum of 10 points per trace
Plotly.prependTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1], 10)
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
      
      
Plotly.addFrames

https://plot.ly/javascript/gapminder-example/

This allows you to add animation frames to a graphDiv frames are subobject for each traces represent what needs to be changed
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
       
                                                                        
                                                                        
Plotly.animate
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 signature
 
 
Plotly.animate(graphDiv, frameOrGroupNameOrFrameList, animationAttributes)
graphDiv
    DOM node or string id of a DOM node
frameOrGroupNameOrFrameList
A frame to be animated or an array of frames to be animated in sequence. Frames added by Plotly.addFrames which have a group attribute, can be animated by passing their group name here. Similarly, you can reference frames by an array of strings of frame name values.
animationAttributes
    An object, see documentation for examples.
       
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
example
in 10

Plotly.newPlot('graph', [{
  x: [1, 2, 3],
  y: [0, 0.5, 1],
  line: {simplify: false},
}]);

function randomize() {
  Plotly.animate('graph', {
    data: [{y: [Math.random(), Math.random(), Math.random()]}],
    traces: [0],
    layout: {}
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    },
	  frame: {
		  duration: 500
	  }
  })
}

 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.purge

Using purge will clear the div, and remove any Plotly plots that have been placed in it.



            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 sample
 Plotly.purge(graphDiv);
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
Plotly.toImage
toImage will generate a promise to an image of the plot in data URL format.
 
 
Plotly.downloadImage
downloadImage will trigger a request to download the image of a Plotly plot.
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
    .___            .___
 |  [__]            [__]
 
 
 in 11
 Plotly.toImage(graphDiv, {format: 'png', width: 800, height: 600}).then(function(dataUrl) {
    // use the dataUrl
})

Plotly.downloadImage(graphDiv, {format: 'png', width: 800, height: 600, filename: 'newplot'});

 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                                                                                                         
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                        
US Airports Map
 
 
            .___
            [__]
        .___    .___
      | [__]    [__]  |
                                                                        
                                                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                        